window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = {"version": "0.9.5", "fields": ["qualname", "fullname", "annotation", "default_value", "signature", "bases", "doc"], "ref": "fullname", "documentStore": {"docs": {"etl": {"fullname": "etl", "modulename": "etl", "kind": "module", "doc": "<p></p>\n"}, "etl.pkg": {"fullname": "etl.pkg", "modulename": "etl.pkg", "kind": "module", "doc": "<p></p>\n"}, "etl.pkg.components": {"fullname": "etl.pkg.components", "modulename": "etl.pkg.components", "kind": "module", "doc": "<p></p>\n"}, "etl.pkg.components.checkers": {"fullname": "etl.pkg.components.checkers", "modulename": "etl.pkg.components.checkers", "kind": "module", "doc": "<p>Module checkers provide data checkers.</p>\n"}, "etl.pkg.components.checkers.SchemaChecker": {"fullname": "etl.pkg.components.checkers.SchemaChecker", "modulename": "etl.pkg.components.checkers", "qualname": "SchemaChecker", "kind": "class", "doc": "<p>Schema _summary_</p>\n\n<p>Args:\n    interface (_type_): _description_</p>\n", "bases": "etl.pkg.components.interface.Pipable"}, "etl.pkg.components.checkers.SchemaChecker.__init__": {"fullname": "etl.pkg.components.checkers.SchemaChecker.__init__", "modulename": "etl.pkg.components.checkers", "qualname": "SchemaChecker.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">schema_resolver</span><span class=\"p\">:</span> <span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">resolvers</span><span class=\"o\">.</span><span class=\"n\">SchemaResolver</span></span>)</span>"}, "etl.pkg.components.checkers.SchemaChecker.schema_resolver": {"fullname": "etl.pkg.components.checkers.SchemaChecker.schema_resolver", "modulename": "etl.pkg.components.checkers", "qualname": "SchemaChecker.schema_resolver", "kind": "variable", "doc": "<p></p>\n", "annotation": ": etl.pkg.resolvers.SchemaResolver"}, "etl.pkg.components.checkers.SchemaChecker.pipe": {"fullname": "etl.pkg.components.checkers.SchemaChecker.pipe", "modulename": "etl.pkg.components.checkers", "qualname": "SchemaChecker.pipe", "kind": "function", "doc": "<p>schema_check verifies the correctness of the input schema.</p>\n\n<h1 id=\"todo-is-it-still-relevant\">TODO: is it still relevant?</h1>\n\n<p>Returns:\n    dataframe: _description_</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">input_df</span><span class=\"p\">:</span> <span class=\"n\">dask</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">dask</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">,</span> <span class=\"n\">dask</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "etl.pkg.components.checkers.ContentChecker": {"fullname": "etl.pkg.components.checkers.ContentChecker", "modulename": "etl.pkg.components.checkers", "qualname": "ContentChecker", "kind": "class", "doc": "<p>ContentChecker exposes a pipeline to validate the input columns of a DataFrame.</p>\n\n<p>The pipe method parallelizes all field validations.</p>\n\n<p>The content checker is aware of the validation policy provided when filtering the input.</p>\n", "bases": "etl.pkg.components.interface.Pipable"}, "etl.pkg.components.checkers.ContentChecker.__init__": {"fullname": "etl.pkg.components.checkers.ContentChecker.__init__", "modulename": "etl.pkg.components.checkers", "qualname": "ContentChecker.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">fields_validator</span><span class=\"p\">:</span> <span class=\"s1\">&#39;validators.FieldValidator&#39;</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">policy</span><span class=\"p\">:</span> <span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">policy</span><span class=\"o\">.</span><span class=\"n\">Policy</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span></span>)</span>"}, "etl.pkg.components.checkers.ContentChecker.fields_validator": {"fullname": "etl.pkg.components.checkers.ContentChecker.fields_validator", "modulename": "etl.pkg.components.checkers", "qualname": "ContentChecker.fields_validator", "kind": "variable", "doc": "<p></p>\n", "annotation": ": &#x27;validators.FieldValidator&#x27;"}, "etl.pkg.components.checkers.ContentChecker.policy": {"fullname": "etl.pkg.components.checkers.ContentChecker.policy", "modulename": "etl.pkg.components.checkers", "qualname": "ContentChecker.policy", "kind": "variable", "doc": "<p></p>\n", "annotation": ": etl.pkg.policy.Policy"}, "etl.pkg.components.checkers.ContentChecker.pipe": {"fullname": "etl.pkg.components.checkers.ContentChecker.pipe", "modulename": "etl.pkg.components.checkers", "qualname": "ContentChecker.pipe", "kind": "function", "doc": "<p>pipe performs validation on every column to validate\nin the input dataframe.</p>\n\n<p>The list of raw input columns to be validated by the ETL\nis configured by the \"fieldsValidator\"\nargument when constructing an instance of the ETL processor.</p>\n\n<p>The validation of each column is carried out in parallel.</p>\n\n<p>The behavior depends on the policy configured for this ETL instance:\nif a failure occurs on a field marked with a RequiresValid policy,\nthis pipeline raises an <code>exceptions.InvalidDataError</code> exception.</p>\n\n<p>Args:\n    input_df (dataframe): the input dataframe to submit to validations</p>\n\n<p>Returns:\n    dataframe: the input dataframe augmented with boolean columns\n    with their validation status.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">input_df</span><span class=\"p\">:</span> <span class=\"n\">dask</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">dask</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">,</span> <span class=\"n\">dask</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "etl.pkg.components.historian": {"fullname": "etl.pkg.components.historian", "modulename": "etl.pkg.components.historian", "kind": "module", "doc": "<p>Module historian provides utiities to build a historical record into the target database.</p>\n"}, "etl.pkg.components.historian.HistoryBuilder": {"fullname": "etl.pkg.components.historian.HistoryBuilder", "modulename": "etl.pkg.components.historian", "qualname": "HistoryBuilder", "kind": "class", "doc": "<p>Identifier _summary_</p>\n\n<p>Args:\n    interface (_type_): _description_</p>\n", "bases": "etl.pkg.components.interface.Pipable"}, "etl.pkg.components.historian.HistoryBuilder.pipe": {"fullname": "etl.pkg.components.historian.HistoryBuilder.pipe", "modulename": "etl.pkg.components.historian", "qualname": "HistoryBuilder.pipe", "kind": "function", "doc": "<p>_summary_</p>\n\n<p>Args:\n    input_df (dataframe): _description_</p>\n\n<p>Returns:\n    dataframe: _description_</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.components.identifiers": {"fullname": "etl.pkg.components.identifiers", "modulename": "etl.pkg.components.identifiers", "kind": "module", "doc": "<p>Module identifiers provides utiities to match identifiers against the target database.</p>\n"}, "etl.pkg.components.identifiers.Identifier": {"fullname": "etl.pkg.components.identifiers.Identifier", "modulename": "etl.pkg.components.identifiers", "qualname": "Identifier", "kind": "class", "doc": "<p>Identifier _summary_</p>\n\n<p>Args:\n    interface (_type_): _description_</p>\n", "bases": "etl.pkg.components.interface.Pipable"}, "etl.pkg.components.identifiers.Identifier.pipe": {"fullname": "etl.pkg.components.identifiers.Identifier.pipe", "modulename": "etl.pkg.components.identifiers", "qualname": "Identifier.pipe", "kind": "function", "doc": "<p>identify_entity picks all external identifiers from the input dataframe\nthen return a dataframe with 2 columns:\n[{external identifier}, {numerical_identifier}].</p>\n\n<p>Args:\n    input_df (dataframe): _description_</p>\n\n<p>Returns:\n    dataframe: _description_</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.components.interface": {"fullname": "etl.pkg.components.interface", "modulename": "etl.pkg.components.interface", "kind": "module", "doc": "<p>Module components exposes the abstract class Executable,\nan interface which knows how to report an execution.</p>\n"}, "etl.pkg.components.interface.ResultWithReport": {"fullname": "etl.pkg.components.interface.ResultWithReport", "modulename": "etl.pkg.components.interface", "qualname": "ResultWithReport", "kind": "variable", "doc": "<p></p>\n", "default_value": "typing.Tuple[dask.dataframe.core.DataFrame, dask.dataframe.core.DataFrame]"}, "etl.pkg.components.interface.Executable": {"fullname": "etl.pkg.components.interface.Executable", "modulename": "etl.pkg.components.interface", "qualname": "Executable", "kind": "class", "doc": "<p>Executable knows how to execute things.</p>\n", "bases": "abc.ABC"}, "etl.pkg.components.interface.Executable.execute": {"fullname": "etl.pkg.components.interface.Executable.execute", "modulename": "etl.pkg.components.interface", "qualname": "Executable.execute", "kind": "function", "doc": "<p>execute a workflow and return a report.</p>\n\n<p>Returns:\n    DataFrame: the execution report folded as a DataFrame</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">dask</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, "etl.pkg.components.interface.Pipable": {"fullname": "etl.pkg.components.interface.Pipable", "modulename": "etl.pkg.components.interface", "qualname": "Pipable", "kind": "class", "doc": "<p>Pipable knows how to pipe an input dataframe into a result dataframe,\ntogether with a report dataframe.</p>\n", "bases": "abc.ABC"}, "etl.pkg.components.interface.Pipable.pipe": {"fullname": "etl.pkg.components.interface.Pipable.pipe", "modulename": "etl.pkg.components.interface", "qualname": "Pipable.pipe", "kind": "function", "doc": "<p>Process the input dataframe.</p>\n\n<p>Returns:\n    Tuple[DataFrame,DataFrame]: the output DataFrame and an execution report.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">input_df</span><span class=\"p\">:</span> <span class=\"n\">dask</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">dask</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">,</span> <span class=\"n\">dask</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "etl.pkg.components.interface.NopPipe": {"fullname": "etl.pkg.components.interface.NopPipe", "modulename": "etl.pkg.components.interface", "qualname": "NopPipe", "kind": "class", "doc": "<p>NopPipe is a no-operation pipe used for empty initializers</p>\n", "bases": "Pipable"}, "etl.pkg.components.interface.NopPipe.pipe": {"fullname": "etl.pkg.components.interface.NopPipe.pipe", "modulename": "etl.pkg.components.interface", "qualname": "NopPipe.pipe", "kind": "function", "doc": "<p>Process the input dataframe.</p>\n\n<p>Returns:\n    Tuple[DataFrame,DataFrame]: the output DataFrame and an execution report.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">input_df</span><span class=\"p\">:</span> <span class=\"n\">dask</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">dask</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">,</span> <span class=\"n\">dask</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "etl.pkg.components.mappers": {"fullname": "etl.pkg.components.mappers", "modulename": "etl.pkg.components.mappers", "kind": "module", "doc": "<p>Module mappers provides utiities to map taxonomies.</p>\n"}, "etl.pkg.components.mappers.TaxonomyMapper": {"fullname": "etl.pkg.components.mappers.TaxonomyMapper", "modulename": "etl.pkg.components.mappers", "qualname": "TaxonomyMapper", "kind": "class", "doc": "<p>Identifier _summary_</p>\n\n<p>Args:\n    interface (_type_): _description_</p>\n", "bases": "etl.pkg.components.interface.Pipable"}, "etl.pkg.components.mappers.TaxonomyMapper.pipe": {"fullname": "etl.pkg.components.mappers.TaxonomyMapper.pipe", "modulename": "etl.pkg.components.mappers", "qualname": "TaxonomyMapper.pipe", "kind": "function", "doc": "<p>resolve_taxonomies</p>\n\n<p>Args:\n    input_df (dataframe): _description_</p>\n\n<p>Returns:\n    [dataframe]: _description_</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.components.mappers.TaxonomyMapper.check_taxonomies": {"fullname": "etl.pkg.components.mappers.TaxonomyMapper.check_taxonomies", "modulename": "etl.pkg.components.mappers", "qualname": "TaxonomyMapper.check_taxonomies", "kind": "function", "doc": "<p>_summary_</p>\n\n<p>Args:\n    input_df (dataframe): _description_</p>\n\n<p>Returns:\n    dataframe: _description_</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.components.mappers.EntityMapper": {"fullname": "etl.pkg.components.mappers.EntityMapper", "modulename": "etl.pkg.components.mappers", "qualname": "EntityMapper", "kind": "class", "doc": "<p>Identifier _summary_</p>\n\n<p>Args:\n    interface (_type_): _description_</p>\n", "bases": "etl.pkg.components.interface.Pipable"}, "etl.pkg.components.mappers.EntityMapper.pipe": {"fullname": "etl.pkg.components.mappers.EntityMapper.pipe", "modulename": "etl.pkg.components.mappers", "qualname": "EntityMapper.pipe", "kind": "function", "doc": "<p>resolve_taxonomies</p>\n\n<p>Args:\n    input_df (dataframe): _description_</p>\n\n<p>Returns:\n    [dataframe]: _description_</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.components.mappers.EntityMapper.map_remainder": {"fullname": "etl.pkg.components.mappers.EntityMapper.map_remainder", "modulename": "etl.pkg.components.mappers", "qualname": "EntityMapper.map_remainder", "kind": "function", "doc": "<p>_summary_</p>\n\n<p>Args:\n    input_df (dataframe): _description_</p>\n\n<p>Returns:\n    dataframe: _description_</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.components.mappers.EntityMapper.map_target_entities": {"fullname": "etl.pkg.components.mappers.EntityMapper.map_target_entities", "modulename": "etl.pkg.components.mappers", "qualname": "EntityMapper.map_target_entities", "kind": "function", "doc": "<p>_summary_</p>\n\n<p>Args:\n    input_df (dataframe): _description_</p>\n\n<p>Returns:\n    [dataframe]: _description_</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.components.recycler": {"fullname": "etl.pkg.components.recycler", "modulename": "etl.pkg.components.recycler", "kind": "module", "doc": "<p></p>\n"}, "etl.pkg.components.recycler.output_recyclable_file": {"fullname": "etl.pkg.components.recycler.output_recyclable_file", "modulename": "etl.pkg.components.recycler", "qualname": "output_recyclable_file", "kind": "function", "doc": "<p>_summary_</p>\n\n<p>Args:\n    filename (str): _description_</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">_filename_</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "etl.pkg.components.transformers": {"fullname": "etl.pkg.components.transformers", "modulename": "etl.pkg.components.transformers", "kind": "module", "doc": "<p>Module transformers exposes a parallelizable column transformer</p>\n"}, "etl.pkg.config": {"fullname": "etl.pkg.config", "modulename": "etl.pkg.config", "kind": "module", "doc": "<p>Module config exposes a dict-like Config class.</p>\n\n<p>This is a configuration loader that abides by\nthe 12-factors app requirements.</p>\n"}, "etl.pkg.config.DEFAULT_ENV_PREFIX": {"fullname": "etl.pkg.config.DEFAULT_ENV_PREFIX", "modulename": "etl.pkg.config", "qualname": "DEFAULT_ENV_PREFIX", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;APP_&#x27;"}, "etl.pkg.config.DEFAULT_CONTEXT_ENV": {"fullname": "etl.pkg.config.DEFAULT_CONTEXT_ENV", "modulename": "etl.pkg.config", "qualname": "DEFAULT_CONTEXT_ENV", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;APP_ENV&#x27;"}, "etl.pkg.config.SUPPORTED_CONTEXTS": {"fullname": "etl.pkg.config.SUPPORTED_CONTEXTS", "modulename": "etl.pkg.config", "qualname": "SUPPORTED_CONTEXTS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;dev&#x27;: True, &#x27;uat&#x27;: True, &#x27;prod&#x27;: True, &#x27;local-testing&#x27;: True, &#x27;ci-testing&#x27;: True}"}, "etl.pkg.config.DEFAULT_CONTEXT": {"fullname": "etl.pkg.config.DEFAULT_CONTEXT", "modulename": "etl.pkg.config", "qualname": "DEFAULT_CONTEXT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;local-testing&#x27;"}, "etl.pkg.config.DEFAULTS_SETTINGS": {"fullname": "etl.pkg.config.DEFAULTS_SETTINGS", "modulename": "etl.pkg.config", "qualname": "DEFAULTS_SETTINGS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;default&#x27;"}, "etl.pkg.config.DEFAULT_SETTING_ROOT_PATH_ENV": {"fullname": "etl.pkg.config.DEFAULT_SETTING_ROOT_PATH_ENV", "modulename": "etl.pkg.config", "qualname": "DEFAULT_SETTING_ROOT_PATH_ENV", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;APP_CONFIG_PATH&#x27;"}, "etl.pkg.config.DEFAULT_SETTING_ROOT_PATH": {"fullname": "etl.pkg.config.DEFAULT_SETTING_ROOT_PATH", "modulename": "etl.pkg.config", "qualname": "DEFAULT_SETTING_ROOT_PATH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;.&#x27;"}, "etl.pkg.config.DEFAULT_SETTING_CONTEXT_FOLDER": {"fullname": "etl.pkg.config.DEFAULT_SETTING_CONTEXT_FOLDER", "modulename": "etl.pkg.config", "qualname": "DEFAULT_SETTING_CONTEXT_FOLDER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;config.d&#x27;"}, "etl.pkg.config.DEFAULT_SETTING_CONFIG_NAME": {"fullname": "etl.pkg.config.DEFAULT_SETTING_CONFIG_NAME", "modulename": "etl.pkg.config", "qualname": "DEFAULT_SETTING_CONFIG_NAME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;config&#x27;"}, "etl.pkg.config.Registry": {"fullname": "etl.pkg.config.Registry", "modulename": "etl.pkg.config", "qualname": "Registry", "kind": "class", "doc": "<p>Registry provides configurable parameters for a job.</p>\n\n<p>It equips the app with a 12-factor setup, configurable from YAML or JSON files\nas well as from environment variables.</p>\n\n<p>Environment-specific configuration and secrets are merged\non top of the default configuration.</p>\n\n<p>See: <a href=\"https://www.dynaconf.com/\">https://www.dynaconf.com/</a></p>\n\n<p>Possible alternative contemplated: <a href=\"https://configloader.readthedocs.io/en/stable/\">https://configloader.readthedocs.io/en/stable/</a></p>\n\n<p>TODO(fredbi, before Azure integration): Azure key Vault secrets:\nmake an extension loader based on Azure SDK</p>\n\n<h2 id=\"note-hashicorp-vault-configuration\">NOTE: Hashicorp Vault configuration</h2>\n\n<p>VAULT_URL_FOR_DYNACONF=\"http://localhost:8200\"</p>\n\n<h1 id=\"specify-the-secrets-engine-for-kv-default-is-1\">Specify the secrets engine for kv, default is 1</h1>\n\n<p>VAULT_KV_VERSION_FOR_DYNACONF=1</p>\n\n<h1 id=\"authenticate-with-token-httpswwwvaultprojectiodocsauthtoken\">Authenticate with token <a href=\"https://www.vaultproject.io/docs/auth/token\">https://www.vaultproject.io/docs/auth/token</a></h1>\n\n<p>VAULT_TOKN_FOR_DYNACONF=\"myroot\"</p>\n\n<h1 id=\"authenticate-with-approle-httpswwwvaultprojectiodocsauthapprole\">Authenticate with AppRole <a href=\"https://www.vaultproject.io/docs/auth/approle\">https://www.vaultproject.io/docs/auth/approle</a></h1>\n\n<p>VAULT_ROLE_ID_FOR_DYNACONF=\"role-id\"\nVAULT_SECRET_ID_FOR_DYNACONF=\"secret-id\"</p>\n\n<h1 id=\"authenticate-with-aws-iam-httpswwwvaultprojectiodocsauthaws\">Authenticate with AWS IAM <a href=\"https://www.vaultproject.io/docs/auth/aws\">https://www.vaultproject.io/docs/auth/aws</a></h1>\n\n<h1 id=\"the-iam-credentials-can-be-retrieved-from-the-standard-providers\">The IAM Credentials can be retrieved from the standard providers:</h1>\n\n<h1 id=\"httpsboto3amazonawscomv1documentationapilatestguidecredentialshtml\"><a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html\">https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html</a></h1>\n\n<p>VAULT_AUTH_WITH_IAM_FOR_DYNACONF=True\nVAULT_AUTH_ROLE_FOR_DYNACONF=\"vault-role\"</p>\n\n<h1 id=\"authenticate-with-root-token\">Authenticate with root token</h1>\n\n<p>VAULT_ROOT_TOKEN_FOR_DYNACONF=\"root-token\"</p>\n", "bases": "builtins.dict"}, "etl.pkg.config.Registry.context_var": {"fullname": "etl.pkg.config.Registry.context_var", "modulename": "etl.pkg.config", "qualname": "Registry.context_var", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;APP_ENV&#x27;"}, "etl.pkg.config.Registry.root_var": {"fullname": "etl.pkg.config.Registry.root_var", "modulename": "etl.pkg.config", "qualname": "Registry.root_var", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;APP_CONFIG_PATH&#x27;"}, "etl.pkg.config.Registry.env_prefix": {"fullname": "etl.pkg.config.Registry.env_prefix", "modulename": "etl.pkg.config", "qualname": "Registry.env_prefix", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;APP_&#x27;"}, "etl.pkg.config.Registry.config_context_folder": {"fullname": "etl.pkg.config.Registry.config_context_folder", "modulename": "etl.pkg.config", "qualname": "Registry.config_context_folder", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;config.d&#x27;"}, "etl.pkg.config.Registry.config_name": {"fullname": "etl.pkg.config.Registry.config_name", "modulename": "etl.pkg.config", "qualname": "Registry.config_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;config&#x27;"}, "etl.pkg.config.Registry.context_folder": {"fullname": "etl.pkg.config.Registry.context_folder", "modulename": "etl.pkg.config", "qualname": "Registry.context_folder", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;config.d&#x27;"}, "etl.pkg.config.Registry.defaults": {"fullname": "etl.pkg.config.Registry.defaults", "modulename": "etl.pkg.config", "qualname": "Registry.defaults", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;default&#x27;"}, "etl.pkg.config.Registry.root": {"fullname": "etl.pkg.config.Registry.root", "modulename": "etl.pkg.config", "qualname": "Registry.root", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, "etl.pkg.config.Registry.context": {"fullname": "etl.pkg.config.Registry.context", "modulename": "etl.pkg.config", "qualname": "Registry.context", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, "etl.pkg.config.Registry.preload_defaults": {"fullname": "etl.pkg.config.Registry.preload_defaults", "modulename": "etl.pkg.config", "qualname": "Registry.preload_defaults", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]", "default_value": "&lt;class &#x27;list&#x27;&gt;"}, "etl.pkg.config.Registry.settings_files": {"fullname": "etl.pkg.config.Registry.settings_files", "modulename": "etl.pkg.config", "qualname": "Registry.settings_files", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]", "default_value": "&lt;class &#x27;list&#x27;&gt;"}, "etl.pkg.config.Registry.include_files": {"fullname": "etl.pkg.config.Registry.include_files", "modulename": "etl.pkg.config", "qualname": "Registry.include_files", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]", "default_value": "&lt;class &#x27;list&#x27;&gt;"}, "etl.pkg.config.Registry.secret_suffix": {"fullname": "etl.pkg.config.Registry.secret_suffix", "modulename": "etl.pkg.config", "qualname": "Registry.secret_suffix", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;.secrets&#x27;"}, "etl.pkg.config.Registry.config_ext": {"fullname": "etl.pkg.config.Registry.config_ext", "modulename": "etl.pkg.config", "qualname": "Registry.config_ext", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]", "default_value": "&lt;class &#x27;list&#x27;&gt;"}, "etl.pkg.config.Registry.load": {"fullname": "etl.pkg.config.Registry.load", "modulename": "etl.pkg.config", "qualname": "Registry.load", "kind": "function", "doc": "<p>load the configuration from file or environment.</p>\n\n<p>NOTE: with Dynaconf, this doesn't actually do anything, since\nDynaconf's design is to perform the load at object instantiation time.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">Registry</span>:</span></span>", "funcdef": "def"}, "etl.pkg.config.Registry.get": {"fullname": "etl.pkg.config.Registry.get", "modulename": "etl.pkg.config", "qualname": "Registry.get", "kind": "function", "doc": "<p>get a key from the configuration registry.</p>\n\n<p>Args:\n    key (str): the config key, e.g. \"path.to.this.key\"\n    default (Any): the default value  to use if the key is not defined</p>\n\n<p>Returns:\n    Any: the configured value</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, "etl.pkg.config.Registry.dump": {"fullname": "etl.pkg.config.Registry.dump", "modulename": "etl.pkg.config", "qualname": "Registry.dump", "kind": "function", "doc": "<p>dump the loaded config.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "etl.pkg.database": {"fullname": "etl.pkg.database", "modulename": "etl.pkg.database", "kind": "module", "doc": "<p>Module database exposes database-related abstractions.</p>\n\n<p>This allows an ETL program to interact with \nremote database resources.</p>\n\n<p>TODO: connexion pool (with multiprocessing)\nTODO: DBJob</p>\n"}, "etl.pkg.database.DBJob": {"fullname": "etl.pkg.database.DBJob", "modulename": "etl.pkg.database", "qualname": "DBJob", "kind": "class", "doc": "<p>_summary_</p>\n"}, "etl.pkg.database.DBJob.execute": {"fullname": "etl.pkg.database.DBJob.execute", "modulename": "etl.pkg.database", "qualname": "DBJob.execute", "kind": "function", "doc": "<p>_summary_</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe": {"fullname": "etl.pkg.dataframe", "modulename": "etl.pkg.dataframe", "kind": "module", "doc": "<p>Module dataframe insulates external dependencies\nfor the DataFrame abstraction.</p>\n\n<p>Other modules consuming a DataFrame don't have to\ndirectly import from dask</p>\n"}, "etl.pkg.dataframe.DataFrame": {"fullname": "etl.pkg.dataframe.DataFrame", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame", "kind": "class", "doc": "<p>Parallel Pandas DataFrame</p>\n\n<p>Do not use this class directly.  Instead use functions like\n<code>dd.read_csv</code>, <code>dd.read_parquet</code>, or <code>dd.from_pandas</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>dsk: dict\n    The dask graph to compute this DataFrame\nname: str\n    The key prefix that specifies which keys in the dask comprise this\n    particular DataFrame\nmeta: pandas.DataFrame\n    An empty <code>pandas.DataFrame</code> with names, dtypes, and index matching\n    the expected output.\ndivisions: tuple of index values\n    Values along which we partition our blocks on the index</p>\n", "bases": "dask.dataframe.core._Frame"}, "etl.pkg.dataframe.DataFrame.__init__": {"fullname": "etl.pkg.dataframe.DataFrame.__init__", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dsk</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">meta</span>, </span><span class=\"param\"><span class=\"n\">divisions</span></span>)</span>"}, "etl.pkg.dataframe.DataFrame.axes": {"fullname": "etl.pkg.dataframe.DataFrame.axes", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.axes", "kind": "variable", "doc": "<p></p>\n"}, "etl.pkg.dataframe.DataFrame.columns": {"fullname": "etl.pkg.dataframe.DataFrame.columns", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.columns", "kind": "variable", "doc": "<p></p>\n"}, "etl.pkg.dataframe.DataFrame.iloc": {"fullname": "etl.pkg.dataframe.DataFrame.iloc", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.iloc", "kind": "variable", "doc": "<p>Purely integer-location based indexing for selection by position.</p>\n\n<p>Only indexing the column positions is supported. Trying to select\nrow positions will raise a ValueError.</p>\n\n<p>See :ref:<code>dataframe.indexing</code> for more.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">iloc</span><span class=\"p\">[:,</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]]</span>  <span class=\"c1\"># doctest: +SKIP</span>\n</code></pre>\n</div>\n"}, "etl.pkg.dataframe.DataFrame.empty": {"fullname": "etl.pkg.dataframe.DataFrame.empty", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.empty", "kind": "variable", "doc": "<p></p>\n"}, "etl.pkg.dataframe.DataFrame.ndim": {"fullname": "etl.pkg.dataframe.DataFrame.ndim", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.ndim", "kind": "variable", "doc": "<p>Return dimensionality</p>\n"}, "etl.pkg.dataframe.DataFrame.shape": {"fullname": "etl.pkg.dataframe.DataFrame.shape", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.shape", "kind": "variable", "doc": "<p>Return a tuple representing the dimensionality of the DataFrame.</p>\n\n<p>The number of rows is a Delayed result. The number of columns\nis a concrete integer.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">size</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">(Delayed(&#39;int-07f06075-5ecc-4d77-817e-63c69a9188a8&#39;), 2)</span>\n</code></pre>\n</div>\n"}, "etl.pkg.dataframe.DataFrame.dtypes": {"fullname": "etl.pkg.dataframe.DataFrame.dtypes", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.dtypes", "kind": "variable", "doc": "<p>Return data types</p>\n"}, "etl.pkg.dataframe.DataFrame.get_dtype_counts": {"fullname": "etl.pkg.dataframe.DataFrame.get_dtype_counts", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.get_dtype_counts", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.get_ftype_counts": {"fullname": "etl.pkg.dataframe.DataFrame.get_ftype_counts", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.get_ftype_counts", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"fullname": "etl.pkg.dataframe.DataFrame.select_dtypes", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.select_dtypes", "kind": "function", "doc": "<p>Return a subset of the DataFrame's columns based on the column dtypes.</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.select_dtypes.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>include, exclude : scalar or list-like\n    A selection of dtypes or strings to be included/excluded. At least\n    one of these parameters must be supplied.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    The subset of the frame including the dtypes in <code>include</code> and\n    excluding the dtypes in <code>exclude</code>.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    * If both of <code>include</code> and <code>exclude</code> are empty\n    * If <code>include</code> and <code>exclude</code> have overlapping elements\n    * If any kind of string dtype is passed in.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.dtypes: Return Series with the data type of each column.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<ul>\n<li>To select all <em>numeric</em> types, use <code>np.number</code> or <code>'number'</code></li>\n<li>To select strings you must use the <code>object</code> dtype, but note that\nthis will return <em>all</em> object dtype columns</li>\n<li>See the <code>numpy dtype hierarchy\n&lt;https://numpy.org/doc/stable/reference/arrays.scalars.html&gt;</code>__</li>\n<li>To select datetimes, use <code>np.datetime64</code>, <code>'datetime'</code> or\n<code>'datetime64'</code></li>\n<li>To select timedeltas, use <code>np.timedelta64</code>, <code>'timedelta'</code> or\n<code>'timedelta64'</code></li>\n<li>To select Pandas categorical dtypes, use <code>'category'</code></li>\n<li>To select Pandas datetimetz dtypes, use <code>'datetimetz'</code> (new in\n0.20.0) or <code>'datetime64[ns, tz]'</code></li>\n</ul>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">3</span><span class=\"p\">,</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                   <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                   <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">3</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">        a      b  c</span>\n<span class=\"go\">0       1   True  1.0</span>\n<span class=\"go\">1       2  False  2.0</span>\n<span class=\"go\">2       1   True  1.0</span>\n<span class=\"go\">3       2  False  2.0</span>\n<span class=\"go\">4       1   True  1.0</span>\n<span class=\"go\">5       2  False  2.0</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">select_dtypes</span><span class=\"p\">(</span><span class=\"n\">include</span><span class=\"o\">=</span><span class=\"s1\">&#39;bool&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   b</span>\n<span class=\"go\">0  True</span>\n<span class=\"go\">1  False</span>\n<span class=\"go\">2  True</span>\n<span class=\"go\">3  False</span>\n<span class=\"go\">4  True</span>\n<span class=\"go\">5  False</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">select_dtypes</span><span class=\"p\">(</span><span class=\"n\">include</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;float64&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   c</span>\n<span class=\"go\">0  1.0</span>\n<span class=\"go\">1  2.0</span>\n<span class=\"go\">2  1.0</span>\n<span class=\"go\">3  2.0</span>\n<span class=\"go\">4  1.0</span>\n<span class=\"go\">5  2.0</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">select_dtypes</span><span class=\"p\">(</span><span class=\"n\">exclude</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;int64&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">       b    c</span>\n<span class=\"go\">0   True  1.0</span>\n<span class=\"go\">1  False  2.0</span>\n<span class=\"go\">2   True  1.0</span>\n<span class=\"go\">3  False  2.0</span>\n<span class=\"go\">4   True  1.0</span>\n<span class=\"go\">5  False  2.0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">include</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">exclude</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.sort_values": {"fullname": "etl.pkg.dataframe.DataFrame.sort_values", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.sort_values", "kind": "function", "doc": "<p>Sort the dataset by a single column.</p>\n\n<p>Sorting a parallel dataset requires expensive shuffles and is generally\nnot recommended. See <code>set_index</code> for implementation details.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>by: str or list[str]\n    Column(s) to sort by.\nnpartitions: int, None, or 'auto'\n    The ideal number of output partitions. If None, use the same as\n    the input. If 'auto' then decide by memory use.\nascending: bool, optional\n    Sort ascending vs. descending.\n    Defaults to True.\nna_position: {'last', 'first'}, optional\n    Puts NaNs at the beginning if 'first', puts NaN at the end if 'last'.\n    Defaults to 'last'.\nsort_function: function, optional\n    Sorting function to use when sorting underlying partitions.\n    If None, defaults to <code>M.sort_values</code> (the partition library's\n    implementation of <code>sort_values</code>).\nsort_function_kwargs: dict, optional\n    Additional keyword arguments to pass to the partition sorting function.\n    By default, <code>by</code>, <code>ascending</code>, and <code>na_position</code> are provided.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df2</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">sort_values</span><span class=\"p\">(</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">by</span><span class=\"p\">:</span> <span class=\"s1\">&#39;str | list[str]&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">npartitions</span><span class=\"p\">:</span> <span class=\"s2\">&quot;int | Literal[&#39;auto&#39;] | None&quot;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ascending</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">na_position</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Literal[&#39;first&#39;] | Literal[&#39;last&#39;]&quot;</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;last&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">sort_function</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Callable[[pd.DataFrame], pd.DataFrame] | None&#39;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sort_function_kwargs</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Mapping[str, Any] | None&#39;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">dask</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.set_index": {"fullname": "etl.pkg.dataframe.DataFrame.set_index", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.set_index", "kind": "function", "doc": "<p>Set the DataFrame index (row labels) using an existing column.</p>\n\n<p>This realigns the dataset to be sorted by a new column. This can have a\nsignificant impact on performance, because joins, groupbys, lookups, etc.\nare all much faster on that column. However, this performance increase\ncomes with a cost, sorting a parallel dataset requires expensive shuffles.\nOften we <code>set_index</code> once directly after data ingest and filtering and\nthen perform many cheap computations off of the sorted dataset.</p>\n\n<p>This function operates exactly like <code>pandas.set_index</code> except with\ndifferent performance costs (dask dataframe <code>set_index</code> is much more expensive).\nUnder normal operation this function does an initial pass over the index column\nto compute approximate quantiles to serve as future divisions. It then passes\nover the data a second time, splitting up each input partition into several\npieces and sharing those pieces to all of the output partitions now in\nsorted order.</p>\n\n<p>In some cases we can alleviate those costs, for example if your dataset is\nsorted already then we can avoid making many small pieces or if you know\ngood values to split the new index column then we can avoid the initial\npass over the data. For example if your new index is a datetime index and\nyour data is already sorted by day then this entire operation can be done\nfor free. You can control these options with the following parameters.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other: string or Dask Series\n    Column to use as index.\ndrop: boolean, default True\n    Delete column to be used as the new index.\nsorted: bool, optional\n    If the index column is already sorted in increasing order.\n    Defaults to False\nnpartitions: int, None, or 'auto'\n    The ideal number of output partitions. If None, use the same as\n    the input. If 'auto' then decide by memory use.\n    Only used when <code>divisions</code> is not given. If <code>divisions</code> is given,\n    the number of output partitions will be <code>len(divisions) - 1</code>.\ndivisions: list, optional\n    The \"dividing lines\" used to split the new index into partitions.\n    For <code>divisions=[0, 10, 50, 100]</code>, there would be three output partitions,\n    where the new index contained [0, 10), [10, 50), and [50, 100), respectively.\n    See <a href=\"https://docs.dask.org/en/latest/dataframe-design.html#partitions\">https://docs.dask.org/en/latest/dataframe-design.html#partitions</a>.\n    If not given (default), good divisions are calculated by immediately computing\n    the data and looking at the distribution of its values. For large datasets,\n    this can be expensive.\n    Note that if <code>sorted=True</code>, specified divisions are assumed to match\n    the existing partitions in the data; if this is untrue you should\n    leave divisions empty and call <code>repartition</code> after <code>set_index</code>.\ninplace: bool, optional\n    Modifying the DataFrame in place is not supported by Dask.\n    Defaults to False.\nshuffle: string, 'disk' or 'tasks', optional\n    Either <code>'disk'</code> for single-node operation or <code>'tasks'</code> for\n    distributed operation.  Will be inferred by your current scheduler.\ncompute: bool, default False\n    Whether or not to trigger an immediate computation. Defaults to False.\n    Note, that even if you set <code>compute=False</code>, an immediate computation\n    will still be triggered if <code>divisions</code> is <code>None</code>.\npartition_size: int, optional\n    Desired size of each partitions in bytes.\n    Only used when <code>npartitions='auto'</code></p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">dask</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ddf</span> <span class=\"o\">=</span> <span class=\"n\">dask</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"s2\">&quot;2021-01-01&quot;</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s2\">&quot;2021-01-07&quot;</span><span class=\"p\">,</span> <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"s2\">&quot;1H&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">reset_index</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ddf2</span> <span class=\"o\">=</span> <span class=\"n\">ddf</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">(</span><span class=\"s2\">&quot;x&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ddf2</span> <span class=\"o\">=</span> <span class=\"n\">ddf</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">(</span><span class=\"n\">ddf</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ddf2</span> <span class=\"o\">=</span> <span class=\"n\">ddf</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">(</span><span class=\"n\">ddf</span><span class=\"o\">.</span><span class=\"n\">timestamp</span><span class=\"p\">,</span> <span class=\"nb\">sorted</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>A common case is when we have a datetime column that we know to be\nsorted and is cleanly divided by day.  We can set this index for free\nby specifying both that the column is pre-sorted and the particular\ndivisions along which is is separated</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">divisions</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">date_range</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"s2\">&quot;2021-01-01&quot;</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s2\">&quot;2021-01-07&quot;</span><span class=\"p\">,</span> <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"s1\">&#39;1D&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">divisions</span>\n<span class=\"go\">DatetimeIndex([&#39;2021-01-01&#39;, &#39;2021-01-02&#39;, &#39;2021-01-03&#39;, &#39;2021-01-04&#39;,</span>\n<span class=\"go\">               &#39;2021-01-05&#39;, &#39;2021-01-06&#39;, &#39;2021-01-07&#39;],</span>\n<span class=\"go\">              dtype=&#39;datetime64[ns]&#39;, freq=&#39;D&#39;)</span>\n</code></pre>\n</div>\n\n<p>Note that <code>len(divisons)</code> is equal to <code>npartitions + 1</code>. This is because <code>divisions</code>\nrepresents the upper and lower bounds of each partition. The first item is the\nlower bound of the first partition, the second item is the lower bound of the\nsecond partition and the upper bound of the first partition, and so on.\nThe second-to-last item is the lower bound of the last partition, and the last\n(extra) item is the upper bound of the last partition.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ddf2</span> <span class=\"o\">=</span> <span class=\"n\">ddf</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">(</span><span class=\"s2\">&quot;timestamp&quot;</span><span class=\"p\">,</span> <span class=\"nb\">sorted</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">divisions</span><span class=\"o\">=</span><span class=\"n\">divisions</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">())</span>\n</code></pre>\n</div>\n\n<p>If you'll be running <code>set_index</code> on the same (or similar) datasets repeatedly,\nyou could save time by letting Dask calculate good divisions once, then copy-pasting\nthem to reuse. This is especially helpful running in a Jupyter notebook:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ddf2</span> <span class=\"o\">=</span> <span class=\"n\">ddf</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">(</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">)</span>  <span class=\"c1\"># slow, calculates data distribution</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ddf2</span><span class=\"o\">.</span><span class=\"n\">divisions</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">[&quot;Alice&quot;, &quot;Laura&quot;, &quot;Ursula&quot;, &quot;Zelda&quot;]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># ^ Now copy-paste this and edit the line above to:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># ddf2 = ddf.set_index(&quot;name&quot;, divisions=[&quot;Alice&quot;, &quot;Laura&quot;, &quot;Ursula&quot;, &quot;Zelda&quot;])</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"s1\">&#39;str | Series&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">drop</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"nb\">sorted</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">npartitions</span><span class=\"p\">:</span> <span class=\"s2\">&quot;int | Literal[&#39;auto&#39;] | None&quot;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">divisions</span><span class=\"p\">:</span> <span class=\"s1\">&#39;Sequence | None&#39;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">inplace</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.pop": {"fullname": "etl.pkg.dataframe.DataFrame.pop", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.pop", "kind": "function", "doc": "<p>Return item and drop from frame. Raise KeyError if not found.</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.pop.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>item : label\n    Label of column to be popped.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">([(</span><span class=\"s1\">&#39;falcon&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bird&#39;</span><span class=\"p\">,</span> <span class=\"mf\">389.0</span><span class=\"p\">),</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                   <span class=\"p\">(</span><span class=\"s1\">&#39;parrot&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bird&#39;</span><span class=\"p\">,</span> <span class=\"mf\">24.0</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>                   <span class=\"p\">(</span><span class=\"s1\">&#39;lion&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;mammal&#39;</span><span class=\"p\">,</span> <span class=\"mf\">80.5</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>                   <span class=\"p\">(</span><span class=\"s1\">&#39;monkey&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;mammal&#39;</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">)],</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;class&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;max_speed&#39;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">     name   class  max_speed</span>\n<span class=\"go\">0  falcon    bird      389.0</span>\n<span class=\"go\">1  parrot    bird       24.0</span>\n<span class=\"go\">2    lion  mammal       80.5</span>\n<span class=\"go\">3  monkey  mammal        NaN</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">&#39;class&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">0      bird</span>\n<span class=\"go\">1      bird</span>\n<span class=\"go\">2    mammal</span>\n<span class=\"go\">3    mammal</span>\n<span class=\"go\">Name: class, dtype: object</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">     name  max_speed</span>\n<span class=\"go\">0  falcon      389.0</span>\n<span class=\"go\">1  parrot       24.0</span>\n<span class=\"go\">2    lion       80.5</span>\n<span class=\"go\">3  monkey        NaN</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.nlargest": {"fullname": "etl.pkg.dataframe.DataFrame.nlargest", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.nlargest", "kind": "function", "doc": "<p>Return the first <code>n</code> rows ordered by <code>columns</code> in descending order.</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.nlargest.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Return the first <code>n</code> rows with the largest values in <code>columns</code>, in\ndescending order. The columns that are not specified are returned as\nwell, but not used for ordering.</p>\n\n<p>This method is equivalent to\n<code>df.sort_values(columns, ascending=False).head(n)</code>, but more\nperformant.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>n : int\n    Number of rows to return.\ncolumns : label or list of labels\n    Column label(s) to order by.\nkeep : {'first', 'last', 'all'}, default 'first'  (Not supported in Dask)\n    Where there are duplicate values:</p>\n\n<pre><code>- ``first`` : prioritize the first occurrence(s)\n- ``last`` : prioritize the last occurrence(s)\n- ``all`` : do not drop any duplicates, even it means\n  selecting more than `n` items.\n</code></pre>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    The first <code>n</code> rows ordered by the given columns in descending\n    order.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.nsmallest : Return the first <code>n</code> rows ordered by <code>columns</code> in\n    ascending order.\nDataFrame.sort_values : Sort DataFrame by the values.\nDataFrame.head : Return the first <code>n</code> rows without re-ordering.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This function cannot be used with all column types. For example, when\nspecifying columns with <code>object</code> or <code>category</code> dtypes, <code>TypeError</code> is\nraised.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;population&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">59000000</span><span class=\"p\">,</span> <span class=\"mi\">65000000</span><span class=\"p\">,</span> <span class=\"mi\">434000</span><span class=\"p\">,</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                                  <span class=\"mi\">434000</span><span class=\"p\">,</span> <span class=\"mi\">434000</span><span class=\"p\">,</span> <span class=\"mi\">337000</span><span class=\"p\">,</span> <span class=\"mi\">11300</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                  <span class=\"mi\">11300</span><span class=\"p\">,</span> <span class=\"mi\">11300</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                   <span class=\"s1\">&#39;GDP&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1937894</span><span class=\"p\">,</span> <span class=\"mi\">2583560</span> <span class=\"p\">,</span> <span class=\"mi\">12011</span><span class=\"p\">,</span> <span class=\"mi\">4520</span><span class=\"p\">,</span> <span class=\"mi\">12128</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                           <span class=\"mi\">17036</span><span class=\"p\">,</span> <span class=\"mi\">182</span><span class=\"p\">,</span> <span class=\"mi\">38</span><span class=\"p\">,</span> <span class=\"mi\">311</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                   <span class=\"s1\">&#39;alpha-2&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;IT&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;FR&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;MT&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;MV&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;BN&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                               <span class=\"s2\">&quot;IS&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;NR&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;TV&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;AI&quot;</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;Italy&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;France&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Malta&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                         <span class=\"s2\">&quot;Maldives&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Brunei&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Iceland&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                         <span class=\"s2\">&quot;Nauru&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Tuvalu&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Anguilla&quot;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">          population      GDP alpha-2</span>\n<span class=\"go\">Italy       59000000  1937894      IT</span>\n<span class=\"go\">France      65000000  2583560      FR</span>\n<span class=\"go\">Malta         434000    12011      MT</span>\n<span class=\"go\">Maldives      434000     4520      MV</span>\n<span class=\"go\">Brunei        434000    12128      BN</span>\n<span class=\"go\">Iceland       337000    17036      IS</span>\n<span class=\"go\">Nauru          11300      182      NR</span>\n<span class=\"go\">Tuvalu         11300       38      TV</span>\n<span class=\"go\">Anguilla       11300      311      AI</span>\n</code></pre>\n</div>\n\n<p>In the following example, we will use <code>nlargest</code> to select the three\nrows having the largest values in column \"population\".</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">nlargest</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">&#39;population&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">        population      GDP alpha-2</span>\n<span class=\"go\">France    65000000  2583560      FR</span>\n<span class=\"go\">Italy     59000000  1937894      IT</span>\n<span class=\"go\">Malta       434000    12011      MT</span>\n</code></pre>\n</div>\n\n<p>When using <code>keep='last'</code>, ties are resolved in reverse order:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">nlargest</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">&#39;population&#39;</span><span class=\"p\">,</span> <span class=\"n\">keep</span><span class=\"o\">=</span><span class=\"s1\">&#39;last&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">        population      GDP alpha-2</span>\n<span class=\"go\">France    65000000  2583560      FR</span>\n<span class=\"go\">Italy     59000000  1937894      IT</span>\n<span class=\"go\">Brunei      434000    12128      BN</span>\n</code></pre>\n</div>\n\n<p>When using <code>keep='all'</code>, all duplicate items are maintained:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">nlargest</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">&#39;population&#39;</span><span class=\"p\">,</span> <span class=\"n\">keep</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">          population      GDP alpha-2</span>\n<span class=\"go\">France      65000000  2583560      FR</span>\n<span class=\"go\">Italy       59000000  1937894      IT</span>\n<span class=\"go\">Malta         434000    12011      MT</span>\n<span class=\"go\">Maldives      434000     4520      MV</span>\n<span class=\"go\">Brunei        434000    12128      BN</span>\n</code></pre>\n</div>\n\n<p>To order by the largest values in column \"population\" and then \"GDP\",\nwe can specify multiple columns like in the next example.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">nlargest</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;population&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;GDP&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">        population      GDP alpha-2</span>\n<span class=\"go\">France    65000000  2583560      FR</span>\n<span class=\"go\">Italy     59000000  1937894      IT</span>\n<span class=\"go\">Brunei      434000    12128      BN</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">5</span>, </span><span class=\"param\"><span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">split_every</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.nsmallest": {"fullname": "etl.pkg.dataframe.DataFrame.nsmallest", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.nsmallest", "kind": "function", "doc": "<p>Return the first <code>n</code> rows ordered by <code>columns</code> in ascending order.</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.nsmallest.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Return the first <code>n</code> rows with the smallest values in <code>columns</code>, in\nascending order. The columns that are not specified are returned as\nwell, but not used for ordering.</p>\n\n<p>This method is equivalent to\n<code>df.sort_values(columns, ascending=True).head(n)</code>, but more\nperformant.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>n : int\n    Number of items to retrieve.\ncolumns : list or str\n    Column name or names to order by.\nkeep : {'first', 'last', 'all'}, default 'first'  (Not supported in Dask)\n    Where there are duplicate values:</p>\n\n<pre><code>- ``first`` : take the first occurrence.\n- ``last`` : take the last occurrence.\n- ``all`` : do not drop any duplicates, even it means\n  selecting more than `n` items.\n</code></pre>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.nlargest : Return the first <code>n</code> rows ordered by <code>columns</code> in\n    descending order.\nDataFrame.sort_values : Sort DataFrame by the values.\nDataFrame.head : Return the first <code>n</code> rows without re-ordering.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;population&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">59000000</span><span class=\"p\">,</span> <span class=\"mi\">65000000</span><span class=\"p\">,</span> <span class=\"mi\">434000</span><span class=\"p\">,</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                                  <span class=\"mi\">434000</span><span class=\"p\">,</span> <span class=\"mi\">434000</span><span class=\"p\">,</span> <span class=\"mi\">337000</span><span class=\"p\">,</span> <span class=\"mi\">337000</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                  <span class=\"mi\">11300</span><span class=\"p\">,</span> <span class=\"mi\">11300</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                   <span class=\"s1\">&#39;GDP&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1937894</span><span class=\"p\">,</span> <span class=\"mi\">2583560</span> <span class=\"p\">,</span> <span class=\"mi\">12011</span><span class=\"p\">,</span> <span class=\"mi\">4520</span><span class=\"p\">,</span> <span class=\"mi\">12128</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                           <span class=\"mi\">17036</span><span class=\"p\">,</span> <span class=\"mi\">182</span><span class=\"p\">,</span> <span class=\"mi\">38</span><span class=\"p\">,</span> <span class=\"mi\">311</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                   <span class=\"s1\">&#39;alpha-2&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;IT&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;FR&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;MT&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;MV&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;BN&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                               <span class=\"s2\">&quot;IS&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;NR&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;TV&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;AI&quot;</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;Italy&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;France&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Malta&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                         <span class=\"s2\">&quot;Maldives&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Brunei&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Iceland&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                         <span class=\"s2\">&quot;Nauru&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Tuvalu&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Anguilla&quot;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">          population      GDP alpha-2</span>\n<span class=\"go\">Italy       59000000  1937894      IT</span>\n<span class=\"go\">France      65000000  2583560      FR</span>\n<span class=\"go\">Malta         434000    12011      MT</span>\n<span class=\"go\">Maldives      434000     4520      MV</span>\n<span class=\"go\">Brunei        434000    12128      BN</span>\n<span class=\"go\">Iceland       337000    17036      IS</span>\n<span class=\"go\">Nauru         337000      182      NR</span>\n<span class=\"go\">Tuvalu         11300       38      TV</span>\n<span class=\"go\">Anguilla       11300      311      AI</span>\n</code></pre>\n</div>\n\n<p>In the following example, we will use <code>nsmallest</code> to select the\nthree rows having the smallest values in column \"population\".</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">nsmallest</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">&#39;population&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">          population    GDP alpha-2</span>\n<span class=\"go\">Tuvalu         11300     38      TV</span>\n<span class=\"go\">Anguilla       11300    311      AI</span>\n<span class=\"go\">Iceland       337000  17036      IS</span>\n</code></pre>\n</div>\n\n<p>When using <code>keep='last'</code>, ties are resolved in reverse order:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">nsmallest</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">&#39;population&#39;</span><span class=\"p\">,</span> <span class=\"n\">keep</span><span class=\"o\">=</span><span class=\"s1\">&#39;last&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">          population  GDP alpha-2</span>\n<span class=\"go\">Anguilla       11300  311      AI</span>\n<span class=\"go\">Tuvalu         11300   38      TV</span>\n<span class=\"go\">Nauru         337000  182      NR</span>\n</code></pre>\n</div>\n\n<p>When using <code>keep='all'</code>, all duplicate items are maintained:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">nsmallest</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">&#39;population&#39;</span><span class=\"p\">,</span> <span class=\"n\">keep</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">          population    GDP alpha-2</span>\n<span class=\"go\">Tuvalu         11300     38      TV</span>\n<span class=\"go\">Anguilla       11300    311      AI</span>\n<span class=\"go\">Iceland       337000  17036      IS</span>\n<span class=\"go\">Nauru         337000    182      NR</span>\n</code></pre>\n</div>\n\n<p>To order by the smallest values in column \"population\" and then \"GDP\", we can\nspecify multiple columns like in the next example.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">nsmallest</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;population&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;GDP&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">          population  GDP alpha-2</span>\n<span class=\"go\">Tuvalu         11300   38      TV</span>\n<span class=\"go\">Anguilla       11300  311      AI</span>\n<span class=\"go\">Nauru         337000  182      NR</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">5</span>, </span><span class=\"param\"><span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">split_every</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.groupby": {"fullname": "etl.pkg.dataframe.DataFrame.groupby", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.groupby", "kind": "function", "doc": "<p>Group DataFrame using a mapper or by a Series of columns.</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.groupby.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>A groupby operation involves some combination of splitting the\nobject, applying a function, and combining the results. This can be\nused to group large amounts of data and compute operations on these\ngroups.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>by : mapping, function, label, pd.Grouper or list of such\n    Used to determine the groups for the groupby.\n    If <code>by</code> is a function, it's called on each value of the object's\n    index. If a dict or Series is passed, the Series or dict VALUES\n    will be used to determine the groups (the Series' values are first\n    aligned; see <code>.align()</code> method). If a list or ndarray of length\n    equal to the selected axis is passed (see the <code>groupby user guide\n    &lt;https://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html#splitting-an-object-into-groups&gt;</code>_),\n    the values are used as-is to determine the groups. A label or list\n    of labels may be passed to group by the columns in <code>self</code>.\n    Notice that a tuple is interpreted as a (single) key.\naxis : {0 or 'index', 1 or 'columns'}, default 0  (Not supported in Dask)\n    Split along rows (0) or columns (1). For <code>Series</code> this parameter\n    is unused and defaults to 0.\nlevel : int, level name, or sequence of such, default None  (Not supported in Dask)\n    If the axis is a MultiIndex (hierarchical), group by a particular\n    level or levels. Do not specify both <code>by</code> and <code>level</code>.\nas_index : bool, default True  (Not supported in Dask)\n    For aggregated output, return object with group labels as the\n    index. Only relevant for DataFrame input. as_index=False is\n    effectively \"SQL-style\" grouped output.\nsort : bool, default True\n    Sort group keys. Get better performance by turning this off.\n    Note this does not influence the order of observations within each\n    group. Groupby preserves the order of rows within each group.</p>\n\n<pre><code>.. versionchanged:: 2.0.0\n\n    Specifying ``sort=False`` with an ordered categorical grouper will no\n    longer sort the values.\n</code></pre>\n\n<p>group_keys : bool, default True\n    When calling apply and the <code>by</code> argument produces a like-indexed\n    (i.e. :ref:<code>a transform &lt;groupby.transform&gt;</code>) result, add group keys to\n    index to identify pieces. By default group keys are not included\n    when the result's index (and column) labels match the inputs, and\n    are included otherwise.</p>\n\n<pre><code>.. versionchanged:: 1.5.0\n\n   Warns that ``group_keys`` will no longer be ignored when the\n   result from ``apply`` is a like-indexed Series or DataFrame.\n   Specify ``group_keys`` explicitly to include the group keys or\n   not.\n\n.. versionchanged:: 2.0.0\n\n   ``group_keys`` now defaults to ``True``.\n</code></pre>\n\n<p>observed : bool, default False\n    This only applies if any of the groupers are Categoricals.\n    If True: only show observed values for categorical groupers.\n    If False: show all values for categorical groupers.\ndropna : bool, default True\n    If True, and if group keys contain NA values, NA values together\n    with row/column will be dropped.\n    If False, NA values will also be treated as the key in groups.</p>\n\n<pre><code>.. versionadded:: 1.1.0\n</code></pre>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrameGroupBy\n    Returns a groupby object that contains information about the groups.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>resample : Convenience method for frequency conversion and resampling\n    of time series.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>See the <code>user guide\n&lt;https://pandas.pydata.org/pandas-docs/stable/groupby.html&gt;</code>__ for more\ndetailed usage and examples, including splitting an object into groups,\niterating through groups, selecting a group, aggregation, and more.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;Animal&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;Falcon&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Falcon&#39;</span><span class=\"p\">,</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                              <span class=\"s1\">&#39;Parrot&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Parrot&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                   <span class=\"s1\">&#39;Max Speed&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mf\">380.</span><span class=\"p\">,</span> <span class=\"mf\">370.</span><span class=\"p\">,</span> <span class=\"mf\">24.</span><span class=\"p\">,</span> <span class=\"mf\">26.</span><span class=\"p\">]})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   Animal  Max Speed</span>\n<span class=\"go\">0  Falcon      380.0</span>\n<span class=\"go\">1  Falcon      370.0</span>\n<span class=\"go\">2  Parrot       24.0</span>\n<span class=\"go\">3  Parrot       26.0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">([</span><span class=\"s1\">&#39;Animal&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">        Max Speed</span>\n<span class=\"go\">Animal</span>\n<span class=\"go\">Falcon      375.0</span>\n<span class=\"go\">Parrot       25.0</span>\n</code></pre>\n</div>\n\n<p><strong>Hierarchical Indexes</strong></p>\n\n<p>We can groupby different levels of a hierarchical index\nusing the <code>level</code> parameter:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">arrays</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"s1\">&#39;Falcon&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Falcon&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Parrot&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Parrot&#39;</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>          <span class=\"p\">[</span><span class=\"s1\">&#39;Captive&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Wild&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Captive&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Wild&#39;</span><span class=\"p\">]]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">MultiIndex</span><span class=\"o\">.</span><span class=\"n\">from_arrays</span><span class=\"p\">(</span><span class=\"n\">arrays</span><span class=\"p\">,</span> <span class=\"n\">names</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;Animal&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Type&#39;</span><span class=\"p\">))</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;Max Speed&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mf\">390.</span><span class=\"p\">,</span> <span class=\"mf\">350.</span><span class=\"p\">,</span> <span class=\"mf\">30.</span><span class=\"p\">,</span> <span class=\"mf\">20.</span><span class=\"p\">]},</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">index</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">                Max Speed</span>\n<span class=\"go\">Animal Type</span>\n<span class=\"go\">Falcon Captive      390.0</span>\n<span class=\"go\">       Wild         350.0</span>\n<span class=\"go\">Parrot Captive       30.0</span>\n<span class=\"go\">       Wild          20.0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">        Max Speed</span>\n<span class=\"go\">Animal</span>\n<span class=\"go\">Falcon      370.0</span>\n<span class=\"go\">Parrot       25.0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"s2\">&quot;Type&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">         Max Speed</span>\n<span class=\"go\">Type</span>\n<span class=\"go\">Captive      210.0</span>\n<span class=\"go\">Wild         185.0</span>\n</code></pre>\n</div>\n\n<p>We can also choose to include NA in group keys or not by setting\n<code>dropna</code> parameter, the default setting is <code>True</code>.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]]</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;b&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;c&quot;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"n\">by</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;b&quot;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    a   c</span>\n<span class=\"go\">b</span>\n<span class=\"go\">1.0 2   3</span>\n<span class=\"go\">2.0 2   5</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"n\">by</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;b&quot;</span><span class=\"p\">],</span> <span class=\"n\">dropna</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    a   c</span>\n<span class=\"go\">b</span>\n<span class=\"go\">1.0 2   3</span>\n<span class=\"go\">2.0 2   5</span>\n<span class=\"go\">NaN 1   4</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mf\">12.3</span><span class=\"p\">,</span> <span class=\"mf\">33.</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s2\">&quot;b&quot;</span><span class=\"p\">,</span> <span class=\"mf\">12.3</span><span class=\"p\">,</span> <span class=\"mi\">123</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]]</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;b&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;c&quot;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"n\">by</span><span class=\"o\">=</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    b     c</span>\n<span class=\"go\">a</span>\n<span class=\"go\">a   13.0   13.0</span>\n<span class=\"go\">b   12.3  123.0</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"n\">by</span><span class=\"o\">=</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"n\">dropna</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    b     c</span>\n<span class=\"go\">a</span>\n<span class=\"go\">a   13.0   13.0</span>\n<span class=\"go\">b   12.3  123.0</span>\n<span class=\"go\">NaN 12.3   33.0</span>\n</code></pre>\n</div>\n\n<p>When using <code>.apply()</code>, use <code>group_keys</code> to include or exclude the group keys.\nThe <code>group_keys</code> argument defaults to <code>True</code> (include).</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;Animal&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;Falcon&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Falcon&#39;</span><span class=\"p\">,</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                              <span class=\"s1\">&#39;Parrot&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Parrot&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                   <span class=\"s1\">&#39;Max Speed&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mf\">380.</span><span class=\"p\">,</span> <span class=\"mf\">370.</span><span class=\"p\">,</span> <span class=\"mf\">24.</span><span class=\"p\">,</span> <span class=\"mf\">26.</span><span class=\"p\">]})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"s2\">&quot;Animal&quot;</span><span class=\"p\">,</span> <span class=\"n\">group_keys</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">          Animal  Max Speed</span>\n<span class=\"go\">Animal</span>\n<span class=\"go\">Falcon 0  Falcon      380.0</span>\n<span class=\"go\">       1  Falcon      370.0</span>\n<span class=\"go\">Parrot 2  Parrot       24.0</span>\n<span class=\"go\">       3  Parrot       26.0</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"s2\">&quot;Animal&quot;</span><span class=\"p\">,</span> <span class=\"n\">group_keys</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   Animal  Max Speed</span>\n<span class=\"go\">0  Falcon      380.0</span>\n<span class=\"go\">1  Falcon      370.0</span>\n<span class=\"go\">2  Parrot       24.0</span>\n<span class=\"go\">3  Parrot       26.0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">by</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">group_keys</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">observed</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dropna</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.categorize": {"fullname": "etl.pkg.dataframe.DataFrame.categorize", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.categorize", "kind": "function", "doc": "<p>Convert columns of the DataFrame to category dtype.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>columns : list, optional\n    A list of column names to convert to categoricals. By default any\n    column with an object dtype is converted to a categorical, and any\n    unknown categoricals are made known.\nindex : bool, optional\n    Whether to categorize the index. By default, object indices are\n    converted to categorical, and unknown categorical indices are made\n    known. Set True to always categorize the index, False to never.\nsplit_every : int, optional\n    Group partitions into groups of this size while performing a\n    tree-reduction. If set to False, no tree-reduction will be used.\n    Default is 16.\nkwargs\n    Keyword arguments are passed on to compute.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">split_every</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.assign": {"fullname": "etl.pkg.dataframe.DataFrame.assign", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.assign", "kind": "function", "doc": "<p>Assign new columns to a DataFrame.</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.assign.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Returns a new object with all original columns in addition to new ones.\nExisting columns that are re-assigned will be overwritten.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>**kwargs : dict of {str: callable or Series}\n    The column names are keywords. If the values are\n    callable, they are computed on the DataFrame and\n    assigned to the new columns. The callable must not\n    change input DataFrame (though pandas doesn't check it).\n    If the values are not callable, (e.g. a Series, scalar, or array),\n    they are simply assigned.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    A new DataFrame with the new columns in addition to\n    all the existing columns.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>Assigning multiple columns within the same <code>assign</code> is possible.\nLater items in '**kwargs' may refer to newly created or modified\ncolumns in 'df'; items are computed and assigned into 'df' in order.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;temp_c&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mf\">17.0</span><span class=\"p\">,</span> <span class=\"mf\">25.0</span><span class=\"p\">]},</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;Portland&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Berkeley&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">          temp_c</span>\n<span class=\"go\">Portland    17.0</span>\n<span class=\"go\">Berkeley    25.0</span>\n</code></pre>\n</div>\n\n<p>Where the value is a callable, evaluated on <code>df</code>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">assign</span><span class=\"p\">(</span><span class=\"n\">temp_f</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">temp_c</span> <span class=\"o\">*</span> <span class=\"mi\">9</span> <span class=\"o\">/</span> <span class=\"mi\">5</span> <span class=\"o\">+</span> <span class=\"mi\">32</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">          temp_c  temp_f</span>\n<span class=\"go\">Portland    17.0    62.6</span>\n<span class=\"go\">Berkeley    25.0    77.0</span>\n</code></pre>\n</div>\n\n<p>Alternatively, the same behavior can be achieved by directly\nreferencing an existing Series or sequence:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">assign</span><span class=\"p\">(</span><span class=\"n\">temp_f</span><span class=\"o\">=</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;temp_c&#39;</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">9</span> <span class=\"o\">/</span> <span class=\"mi\">5</span> <span class=\"o\">+</span> <span class=\"mi\">32</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">          temp_c  temp_f</span>\n<span class=\"go\">Portland    17.0    62.6</span>\n<span class=\"go\">Berkeley    25.0    77.0</span>\n</code></pre>\n</div>\n\n<p>You can create multiple columns within the same assign where one\nof the columns depends on another one defined within the same assign:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">assign</span><span class=\"p\">(</span><span class=\"n\">temp_f</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">&#39;temp_c&#39;</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">9</span> <span class=\"o\">/</span> <span class=\"mi\">5</span> <span class=\"o\">+</span> <span class=\"mi\">32</span><span class=\"p\">,</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>          <span class=\"n\">temp_k</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">&#39;temp_f&#39;</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mf\">459.67</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">5</span> <span class=\"o\">/</span> <span class=\"mi\">9</span><span class=\"p\">)</span>\n<span class=\"go\">          temp_c  temp_f  temp_k</span>\n<span class=\"go\">Portland    17.0    62.6  290.15</span>\n<span class=\"go\">Berkeley    25.0    77.0  298.15</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.rename": {"fullname": "etl.pkg.dataframe.DataFrame.rename", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.rename", "kind": "function", "doc": "<p>Rename columns or index labels.</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.rename.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Function / dict values must be unique (1-to-1). Labels not contained in\na dict / Series will be left as-is. Extra labels listed don't throw an\nerror.</p>\n\n<p>See the :ref:<code>user guide &lt;basics.rename&gt;</code> for more.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>mapper : dict-like or function  (Not supported in Dask)\n    Dict-like or function transformations to apply to\n    that axis' values. Use either <code>mapper</code> and <code>axis</code> to\n    specify the axis to target with <code>mapper</code>, or <code>index</code> and\n    <code>columns</code>.\nindex : dict-like or function  (Not supported in Dask)\n    Alternative to specifying axis (<code>mapper, axis=0</code>\n    is equivalent to <code>index=mapper</code>).\ncolumns : dict-like or function\n    Alternative to specifying axis (<code>mapper, axis=1</code>\n    is equivalent to <code>columns=mapper</code>).\naxis : {0 or 'index', 1 or 'columns'}, default 0  (Not supported in Dask)\n    Axis to target with <code>mapper</code>. Can be either the axis name\n    ('index', 'columns') or number (0, 1). The default is 'index'.\ncopy : bool, default True  (Not supported in Dask)\n    Also copy underlying data.\ninplace : bool, default False  (Not supported in Dask)\n    Whether to modify the DataFrame rather than creating a new one.\n    If True then value of copy is ignored.\nlevel : int or level name, default None  (Not supported in Dask)\n    In case of a MultiIndex, only rename labels in the specified\n    level.\nerrors : {'ignore', 'raise'}, default 'ignore'  (Not supported in Dask)\n    If 'raise', raise a <code>KeyError</code> when a dict-like <code>mapper</code>, <code>index</code>,\n    or <code>columns</code> contains labels that are not present in the Index\n    being transformed.\n    If 'ignore', existing keys will be renamed and extra keys will be\n    ignored.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame or None\n    DataFrame with the renamed axis labels or None if <code>inplace=True</code>.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>KeyError\n    If any of the labels is not found in the selected axis and\n    \"errors='raise'\".</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.rename_axis : Set the name of the axis.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<p><code>DataFrame.rename</code> supports two calling conventions</p>\n\n<ul>\n<li><code>(index=index_mapper, columns=columns_mapper, ...)</code></li>\n<li><code>(mapper, axis={'index', 'columns'}, ...)</code></li>\n</ul>\n\n<p>We <em>highly</em> recommend using keyword arguments to clarify your\nintent.</p>\n\n<p>Rename columns using a mapping:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s2\">&quot;A&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"s2\">&quot;B&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]})</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">rename</span><span class=\"p\">(</span><span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;A&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;B&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;c&quot;</span><span class=\"p\">})</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   a  c</span>\n<span class=\"go\">0  1  4</span>\n<span class=\"go\">1  2  5</span>\n<span class=\"go\">2  3  6</span>\n</code></pre>\n</div>\n\n<p>Rename index using a mapping:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">rename</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"s2\">&quot;x&quot;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"s2\">&quot;y&quot;</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"s2\">&quot;z&quot;</span><span class=\"p\">})</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   A  B</span>\n<span class=\"go\">x  1  4</span>\n<span class=\"go\">y  2  5</span>\n<span class=\"go\">z  3  6</span>\n</code></pre>\n</div>\n\n<p>Cast index labels to a different type:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">index</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">RangeIndex(start=0, stop=3, step=1)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">rename</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">Index([&#39;0&#39;, &#39;1&#39;, &#39;2&#39;], dtype=&#39;object&#39;)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">rename</span><span class=\"p\">(</span><span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;A&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;B&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;b&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;C&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;c&quot;</span><span class=\"p\">},</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"s2\">&quot;raise&quot;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n<span class=\"gr\">KeyError</span>: <span class=\"n\">[&#39;C&#39;] not found in axis</span>\n</code></pre>\n</div>\n\n<p>Using axis-style parameters:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">rename</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   a  b</span>\n<span class=\"go\">0  1  4</span>\n<span class=\"go\">1  2  5</span>\n<span class=\"go\">2  3  6</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">rename</span><span class=\"p\">({</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">},</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   A  B</span>\n<span class=\"go\">0  1  4</span>\n<span class=\"go\">2  2  5</span>\n<span class=\"go\">4  3  6</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.query": {"fullname": "etl.pkg.dataframe.DataFrame.query", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.query", "kind": "function", "doc": "<p>Filter dataframe with complex expression</p>\n\n<p>Blocked version of pd.DataFrame.query</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>expr: str\n    The query string to evaluate.\n    You can refer to column names that are not valid Python variable names\n    by surrounding them in backticks.\n    Dask does not fully support referring to variables using the '@' character,\n    use f-strings or the <code>local_dict</code> keyword argument instead.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This is like the sequential version except that this will also happen\nin many threads.  This may conflict with <code>numexpr</code> which will use\nmultiple threads itself.  We recommend that you set <code>numexpr</code> to use a\nsingle thread:</p>\n\n<p>.. code-block:: python</p>\n\n<pre><code>import numexpr\nnumexpr.set_num_threads(1)\n</code></pre>\n\n<h2 id=\"see-also\">See also</h2>\n\n<p>pandas.DataFrame.query\npandas.eval</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">dask.dataframe</span> <span class=\"k\">as</span> <span class=\"nn\">dd</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                   <span class=\"s1\">&#39;y&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                   <span class=\"s1\">&#39;z z&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ddf</span> <span class=\"o\">=</span> <span class=\"n\">dd</span><span class=\"o\">.</span><span class=\"n\">from_pandas</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">npartitions</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Refer to column names directly:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ddf</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s1\">&#39;y &gt; x&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">compute</span><span class=\"p\">()</span>\n<span class=\"go\">   x  y  z z</span>\n<span class=\"go\">2  1  3    2</span>\n<span class=\"go\">3  2  4    1</span>\n</code></pre>\n</div>\n\n<p>Refer to column name using backticks:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ddf</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s1\">&#39;`z z` &gt; x&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">compute</span><span class=\"p\">()</span>\n<span class=\"go\">   x  y  z z</span>\n<span class=\"go\">0  1  1    4</span>\n<span class=\"go\">1  2  2    3</span>\n<span class=\"go\">2  1  3    2</span>\n</code></pre>\n</div>\n\n<p>Refer to variable name using f-strings:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ddf</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">&#39;x == </span><span class=\"si\">{</span><span class=\"n\">value</span><span class=\"si\">}</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">compute</span><span class=\"p\">()</span>\n<span class=\"go\">   x  y  z z</span>\n<span class=\"go\">0  1  1    4</span>\n<span class=\"go\">2  1  3    2</span>\n</code></pre>\n</div>\n\n<p>Refer to variable name using <code>local_dict</code>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ddf</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s1\">&#39;x == @value&#39;</span><span class=\"p\">,</span> <span class=\"n\">local_dict</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;value&quot;</span><span class=\"p\">:</span> <span class=\"n\">value</span><span class=\"p\">})</span><span class=\"o\">.</span><span class=\"n\">compute</span><span class=\"p\">()</span>\n<span class=\"go\">   x  y  z z</span>\n<span class=\"go\">0  1  1    4</span>\n<span class=\"go\">2  1  3    2</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">expr</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.eval": {"fullname": "etl.pkg.dataframe.DataFrame.eval", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.eval", "kind": "function", "doc": "<p>Evaluate a string describing operations on DataFrame columns.</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.eval.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Operates on columns only, not specific rows or elements.  This allows\n<code>eval</code> to run arbitrary code, which can make you vulnerable to code\ninjection if you pass user input to this function.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>expr : str\n    The expression string to evaluate.\ninplace : bool, default False\n    If the expression contains an assignment, whether to perform the\n    operation inplace and mutate the existing DataFrame. Otherwise,\n    a new DataFrame is returned.\n**kwargs\n    See the documentation for :func:<code>eval</code> for complete details\n    on the keyword arguments accepted by\n    :meth:<code>~pandas.DataFrame.query</code>.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>ndarray, scalar, pandas object, or None\n    The result of the evaluation or None if <code>inplace=True</code>.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.query : Evaluates a boolean expression to query the columns\n    of a frame.\nDataFrame.assign : Can evaluate an expression or function to create new\n    values for a column.\neval : Evaluate a Python expression as a string using various\n    backends.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>For more details see the API documentation for :func:<code>~eval</code>.\nFor detailed examples see :ref:<code>enhancing performance with eval\n&lt;enhancingperf.eval&gt;</code>.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">:</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">:</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">)})</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   A   B</span>\n<span class=\"go\">0  1  10</span>\n<span class=\"go\">1  2   8</span>\n<span class=\"go\">2  3   6</span>\n<span class=\"go\">3  4   4</span>\n<span class=\"go\">4  5   2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"s1\">&#39;A + B&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">0    11</span>\n<span class=\"go\">1    10</span>\n<span class=\"go\">2     9</span>\n<span class=\"go\">3     8</span>\n<span class=\"go\">4     7</span>\n<span class=\"go\">dtype: int64</span>\n</code></pre>\n</div>\n\n<p>Assignment is allowed though by default the original DataFrame is not\nmodified.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"s1\">&#39;C = A + B&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   A   B   C</span>\n<span class=\"go\">0  1  10  11</span>\n<span class=\"go\">1  2   8  10</span>\n<span class=\"go\">2  3   6   9</span>\n<span class=\"go\">3  4   4   8</span>\n<span class=\"go\">4  5   2   7</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   A   B</span>\n<span class=\"go\">0  1  10</span>\n<span class=\"go\">1  2   8</span>\n<span class=\"go\">2  3   6</span>\n<span class=\"go\">3  4   4</span>\n<span class=\"go\">4  5   2</span>\n</code></pre>\n</div>\n\n<p>Multiple columns can be assigned to using multi-line expressions:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"p\">(</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span><span class=\"w\">    </span><span class=\"sd\">&#39;&#39;&#39;</span>\n<span class=\"gp\">... </span><span class=\"sd\">C = A + B</span>\n<span class=\"gp\">... </span><span class=\"sd\">D = A - B</span>\n<span class=\"gp\">... </span><span class=\"sd\">&#39;&#39;&#39;</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"go\">   A   B   C  D</span>\n<span class=\"go\">0  1  10  11 -9</span>\n<span class=\"go\">1  2   8  10 -6</span>\n<span class=\"go\">2  3   6   9 -3</span>\n<span class=\"go\">3  4   4   8  0</span>\n<span class=\"go\">4  5   2   7  3</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">expr</span>, </span><span class=\"param\"><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.dropna": {"fullname": "etl.pkg.dataframe.DataFrame.dropna", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.dropna", "kind": "function", "doc": "<p>Remove missing values.</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.dropna.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>See the :ref:<code>User Guide &lt;missing_data&gt;</code> for more on which values are\nconsidered missing, and how to work with missing data.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>axis : {0 or 'index', 1 or 'columns'}, default 0  (Not supported in Dask)\n    Determine if rows or columns which contain missing values are\n    removed.</p>\n\n<pre><code>* 0, or 'index' : Drop rows which contain missing values.\n* 1, or 'columns' : Drop columns which contain missing value.\n\nPass tuple or list to drop on multiple axes.\nOnly a single axis is allowed.\n</code></pre>\n\n<p>how : {'any', 'all'}, default 'any'\n    Determine if row or column is removed from DataFrame, when we have\n    at least one NA or all NA.</p>\n\n<pre><code>* 'any' : If any NA values are present, drop that row or column.\n* 'all' : If all values are NA, drop that row or column.\n</code></pre>\n\n<p>thresh : int, optional\n    Require that many non-NA values. Cannot be combined with how.\nsubset : column label or sequence of labels, optional\n    Labels along other axis to consider, e.g. if you are dropping rows\n    these would be a list of columns to include.\ninplace : bool, default False  (Not supported in Dask)\n    Whether to modify the DataFrame rather than creating a new one.\nignore_index : bool, default <code>False</code>  (Not supported in Dask)\n    If <code>True</code>, the resulting axis will be labeled 0, 1, \u2026, n - 1.</p>\n\n<pre><code>.. versionadded:: 2.0.0\n</code></pre>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame or None\n    DataFrame with NA entries dropped from it or None if <code>inplace=True</code>.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.isna: Indicate missing values.\nDataFrame.notna : Indicate existing (non-missing) values.\nDataFrame.fillna : Replace missing values.\nSeries.dropna : Drop missing values.\nIndex.dropna : Drop missing indices.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;Alfred&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Batman&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Catwoman&#39;</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                   <span class=\"s2\">&quot;toy&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Batmobile&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Bullwhip&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                   <span class=\"s2\">&quot;born&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">NaT</span><span class=\"p\">,</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">(</span><span class=\"s2\">&quot;1940-04-25&quot;</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>                            <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">NaT</span><span class=\"p\">]})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">       name        toy       born</span>\n<span class=\"go\">0    Alfred        NaN        NaT</span>\n<span class=\"go\">1    Batman  Batmobile 1940-04-25</span>\n<span class=\"go\">2  Catwoman   Bullwhip        NaT</span>\n</code></pre>\n</div>\n\n<p>Drop the rows where at least one element is missing.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">dropna</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">     name        toy       born</span>\n<span class=\"go\">1  Batman  Batmobile 1940-04-25</span>\n</code></pre>\n</div>\n\n<p>Drop the columns where at least one element is missing.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">dropna</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">       name</span>\n<span class=\"go\">0    Alfred</span>\n<span class=\"go\">1    Batman</span>\n<span class=\"go\">2  Catwoman</span>\n</code></pre>\n</div>\n\n<p>Drop the rows where all elements are missing.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">dropna</span><span class=\"p\">(</span><span class=\"n\">how</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">       name        toy       born</span>\n<span class=\"go\">0    Alfred        NaN        NaT</span>\n<span class=\"go\">1    Batman  Batmobile 1940-04-25</span>\n<span class=\"go\">2  Catwoman   Bullwhip        NaT</span>\n</code></pre>\n</div>\n\n<p>Keep only the rows with at least 2 non-NA values.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">dropna</span><span class=\"p\">(</span><span class=\"n\">thresh</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">       name        toy       born</span>\n<span class=\"go\">1    Batman  Batmobile 1940-04-25</span>\n<span class=\"go\">2  Catwoman   Bullwhip        NaT</span>\n</code></pre>\n</div>\n\n<p>Define in which columns to look for missing values.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">dropna</span><span class=\"p\">(</span><span class=\"n\">subset</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;toy&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">       name        toy       born</span>\n<span class=\"go\">1    Batman  Batmobile 1940-04-25</span>\n<span class=\"go\">2  Catwoman   Bullwhip        NaT</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">how</span><span class=\"o\">=</span><span class=\"s1\">&#39;__no_default__&#39;</span>, </span><span class=\"param\"><span class=\"n\">subset</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">thresh</span><span class=\"o\">=</span><span class=\"s1\">&#39;__no_default__&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.clip": {"fullname": "etl.pkg.dataframe.DataFrame.clip", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.clip", "kind": "function", "doc": "<p>Trim values at input threshold(s).</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.clip.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Assigns values outside boundary to boundary values. Thresholds\ncan be singular values or array like, and in the latter case\nthe clipping is performed element-wise in the specified axis.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>lower : float or array-like, default None\n    Minimum threshold value. All values below this\n    threshold will be set to it. A missing\n    threshold (e.g <code>NA</code>) will not clip the value.\nupper : float or array-like, default None\n    Maximum threshold value. All values above this\n    threshold will be set to it. A missing\n    threshold (e.g <code>NA</code>) will not clip the value.\naxis : {{0 or 'index', 1 or 'columns', None}}, default None  (Not supported in Dask)\n    Align object with lower and upper along the given axis.\n    For <code>Series</code> this parameter is unused and defaults to <code>None</code>.\ninplace : bool, default False  (Not supported in Dask)\n    Whether to perform the operation in place on the data.\n<em>args, *</em>kwargs\n    Additional keywords have no effect but might be accepted\n    for compatibility with numpy.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series or DataFrame or None\n    Same type as calling object with the values outside the\n    clip boundaries replaced or None if <code>inplace=True</code>.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>Series.clip : Trim values at input threshold in series.\nDataFrame.clip : Trim values at input threshold in dataframe.\nnumpy.clip : Clip (limit) the values in an array.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;col_0&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"s1\">&#39;col_1&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">]}</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   col_0  col_1</span>\n<span class=\"go\">0      9     -2</span>\n<span class=\"go\">1     -3     -7</span>\n<span class=\"go\">2      0      6</span>\n<span class=\"go\">3     -1      8</span>\n<span class=\"go\">4      5     -5</span>\n</code></pre>\n</div>\n\n<p>Clips per column using lower and upper thresholds:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">clip</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   col_0  col_1</span>\n<span class=\"go\">0      6     -2</span>\n<span class=\"go\">1     -3     -4</span>\n<span class=\"go\">2      0      6</span>\n<span class=\"go\">3     -1      6</span>\n<span class=\"go\">4      5     -4</span>\n</code></pre>\n</div>\n\n<p>Clips using specific lower and upper thresholds per column element:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">0    2</span>\n<span class=\"go\">1   -4</span>\n<span class=\"go\">2   -1</span>\n<span class=\"go\">3    6</span>\n<span class=\"go\">4    3</span>\n<span class=\"go\">dtype: int64</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">clip</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">t</span> <span class=\"o\">+</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   col_0  col_1</span>\n<span class=\"go\">0      6      2</span>\n<span class=\"go\">1     -3     -4</span>\n<span class=\"go\">2      0      3</span>\n<span class=\"go\">3      6      8</span>\n<span class=\"go\">4      5      3</span>\n</code></pre>\n</div>\n\n<p>Clips using specific lower threshold per column element, with missing values:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">NaN</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">0    2.0</span>\n<span class=\"go\">1   -4.0</span>\n<span class=\"go\">2    NaN</span>\n<span class=\"go\">3    6.0</span>\n<span class=\"go\">4    3.0</span>\n<span class=\"go\">dtype: float64</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">clip</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">col_0  col_1</span>\n<span class=\"go\">0      9      2</span>\n<span class=\"go\">1     -3     -4</span>\n<span class=\"go\">2      0      6</span>\n<span class=\"go\">3      6      8</span>\n<span class=\"go\">4      5      3</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lower</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">upper</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">out</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.clip_lower": {"fullname": "etl.pkg.dataframe.DataFrame.clip_lower", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.clip_lower", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">threshold</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.clip_upper": {"fullname": "etl.pkg.dataframe.DataFrame.clip_upper", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.clip_upper", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">threshold</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.squeeze": {"fullname": "etl.pkg.dataframe.DataFrame.squeeze", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.squeeze", "kind": "function", "doc": "<p>Squeeze 1 dimensional axis objects into scalars.</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.squeeze.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Series or DataFrames with a single element are squeezed to a scalar.\nDataFrames with a single column or a single row are squeezed to a\nSeries. Otherwise the object is unchanged.</p>\n\n<p>This method is most useful when you don't know if your\nobject is a Series or DataFrame, but you do know it has just a single\ncolumn. In that case you can safely call <code>squeeze</code> to ensure you have a\nSeries.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>axis : {0 or 'index', 1 or 'columns', None}, default None\n    A specific axis to squeeze. By default, all length-1 axes are\n    squeezed. For <code>Series</code> this parameter is unused and defaults to <code>None</code>.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame, Series, or scalar\n    The projection after squeezing <code>axis</code> or all the axes.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>Series.iloc : Integer-location based indexing for selecting scalars.\nDataFrame.iloc : Integer-location based indexing for selecting Series.\nSeries.to_frame : Inverse of DataFrame.squeeze for a\n    single-column DataFrame.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">primes</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n</code></pre>\n</div>\n\n<p>Slicing might produce a Series with a single value:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">even_primes</span> <span class=\"o\">=</span> <span class=\"n\">primes</span><span class=\"p\">[</span><span class=\"n\">primes</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">]</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">even_primes</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">0    2</span>\n<span class=\"go\">dtype: int64</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">even_primes</span><span class=\"o\">.</span><span class=\"n\">squeeze</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">2</span>\n</code></pre>\n</div>\n\n<p>Squeezing objects with more than one value in every axis does nothing:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">odd_primes</span> <span class=\"o\">=</span> <span class=\"n\">primes</span><span class=\"p\">[</span><span class=\"n\">primes</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">]</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">odd_primes</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">1    3</span>\n<span class=\"go\">2    5</span>\n<span class=\"go\">3    7</span>\n<span class=\"go\">dtype: int64</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">odd_primes</span><span class=\"o\">.</span><span class=\"n\">squeeze</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">1    3</span>\n<span class=\"go\">2    5</span>\n<span class=\"go\">3    7</span>\n<span class=\"go\">dtype: int64</span>\n</code></pre>\n</div>\n\n<p>Squeezing is even more effective when used with DataFrames.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]],</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   a  b</span>\n<span class=\"go\">0  1  2</span>\n<span class=\"go\">1  3  4</span>\n</code></pre>\n</div>\n\n<p>Slicing a single column will produce a DataFrame with the columns\nhaving only one value:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_a</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"p\">[[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">]]</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_a</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   a</span>\n<span class=\"go\">0  1</span>\n<span class=\"go\">1  3</span>\n</code></pre>\n</div>\n\n<p>So the columns can be squeezed down, resulting in a Series:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_a</span><span class=\"o\">.</span><span class=\"n\">squeeze</span><span class=\"p\">(</span><span class=\"s1\">&#39;columns&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">0    1</span>\n<span class=\"go\">1    3</span>\n<span class=\"go\">Name: a, dtype: int64</span>\n</code></pre>\n</div>\n\n<p>Slicing a single row from a single column will produce a single\nscalar DataFrame:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_0a</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">index</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">]]</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_0a</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   a</span>\n<span class=\"go\">0  1</span>\n</code></pre>\n</div>\n\n<p>Squeezing the rows produces a single scalar Series:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_0a</span><span class=\"o\">.</span><span class=\"n\">squeeze</span><span class=\"p\">(</span><span class=\"s1\">&#39;rows&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1</span>\n<span class=\"go\">Name: 0, dtype: int64</span>\n</code></pre>\n</div>\n\n<p>Squeezing all axes will project directly into a scalar:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_0a</span><span class=\"o\">.</span><span class=\"n\">squeeze</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">1</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"fullname": "etl.pkg.dataframe.DataFrame.to_timestamp", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.to_timestamp", "kind": "function", "doc": "<p>Cast to DatetimeIndex of timestamps, at <em>beginning</em> of period.</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.to_timestamp.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>freq : str, default frequency of PeriodIndex\n    Desired frequency.\nhow : {'s', 'e', 'start', 'end'}\n    Convention for converting period to timestamp; start of period\n    vs. end.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The axis to convert (the index by default).\ncopy : bool, default True  (Not supported in Dask)\n    If False then underlying input data is not copied.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    The DataFrame has a DatetimeIndex.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">PeriodIndex</span><span class=\"p\">([</span><span class=\"s1\">&#39;2023&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2024&#39;</span><span class=\"p\">],</span> <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"s1\">&#39;Y&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;col1&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"s1\">&#39;col2&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]}</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df1</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">idx</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df1</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">      col1   col2</span>\n<span class=\"go\">2023     1      3</span>\n<span class=\"go\">2024     2      4</span>\n</code></pre>\n</div>\n\n<p>The resulting timestamps will be at the beginning of the year in this case</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df1</span> <span class=\"o\">=</span> <span class=\"n\">df1</span><span class=\"o\">.</span><span class=\"n\">to_timestamp</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df1</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">            col1   col2</span>\n<span class=\"go\">2023-01-01     1      3</span>\n<span class=\"go\">2024-01-01     2      4</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df1</span><span class=\"o\">.</span><span class=\"n\">index</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">DatetimeIndex([&#39;2023-01-01&#39;, &#39;2024-01-01&#39;], dtype=&#39;datetime64[ns]&#39;, freq=None)</span>\n</code></pre>\n</div>\n\n<p>Using <code>freq</code> which is the offset that the Timestamps will have</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df2</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">idx</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df2</span> <span class=\"o\">=</span> <span class=\"n\">df2</span><span class=\"o\">.</span><span class=\"n\">to_timestamp</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"s1\">&#39;M&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df2</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">            col1   col2</span>\n<span class=\"go\">2023-01-31     1      3</span>\n<span class=\"go\">2024-01-31     2      4</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df2</span><span class=\"o\">.</span><span class=\"n\">index</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">DatetimeIndex([&#39;2023-01-31&#39;, &#39;2024-01-31&#39;], dtype=&#39;datetime64[ns]&#39;, freq=None)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">how</span><span class=\"o\">=</span><span class=\"s1\">&#39;start&#39;</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.explode": {"fullname": "etl.pkg.dataframe.DataFrame.explode", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.explode", "kind": "function", "doc": "<p>Transform each element of a list-like to a row, replicating index values.</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.explode.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>column : IndexLabel\n    Column(s) to explode.\n    For multiple columns, specify a non-empty list with each element\n    be str or tuple, and all specified columns their list-like data\n    on same row of the frame must have matching length.</p>\n\n<pre><code>.. versionadded:: 1.3.0\n    Multi-column explode\n</code></pre>\n\n<p>ignore_index : bool, default False  (Not supported in Dask)\n    If True, the resulting index will be labeled 0, 1, \u2026, n - 1.</p>\n\n<pre><code>.. versionadded:: 1.1.0\n</code></pre>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    Exploded lists to rows of the subset columns;\n    index will be duplicated for these rows.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError :\n    * If columns of the frame are not unique.\n    * If specified columns to explode is empty list.\n    * If specified columns to explode have not matching count of\n      elements rowwise in the frame.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.unstack : Pivot a level of the (necessarily hierarchical)\n    index labels.\nDataFrame.melt : Unpivot a DataFrame from wide format to long format.\nSeries.explode : Explode a DataFrame from list-like columns to long format.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This routine will explode list-likes including lists, tuples, sets,\nSeries, and np.ndarray. The result dtype of the subset rows will\nbe object. Scalars will be returned unchanged, and empty list-likes will\nresult in a np.nan for that row. In addition, the ordering of rows in the\noutput will be non-deterministic when exploding sets.</p>\n\n<p>Reference :ref:<code>the user guide &lt;reshaping.explode&gt;</code> for more examples.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">:</span> <span class=\"p\">[[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">,</span> <span class=\"p\">[],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                   <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                   <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">:</span> <span class=\"p\">[[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">],</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"p\">[],</span> <span class=\"p\">[</span><span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">]]})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           A  B          C</span>\n<span class=\"go\">0  [0, 1, 2]  1  [a, b, c]</span>\n<span class=\"go\">1        foo  1        NaN</span>\n<span class=\"go\">2         []  1         []</span>\n<span class=\"go\">3     [3, 4]  1     [d, e]</span>\n</code></pre>\n</div>\n\n<p>Single-column explode.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">explode</span><span class=\"p\">(</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">     A  B          C</span>\n<span class=\"go\">0    0  1  [a, b, c]</span>\n<span class=\"go\">0    1  1  [a, b, c]</span>\n<span class=\"go\">0    2  1  [a, b, c]</span>\n<span class=\"go\">1  foo  1        NaN</span>\n<span class=\"go\">2  NaN  1         []</span>\n<span class=\"go\">3    3  1     [d, e]</span>\n<span class=\"go\">3    4  1     [d, e]</span>\n</code></pre>\n</div>\n\n<p>Multi-column explode.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">explode</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"s1\">&#39;AC&#39;</span><span class=\"p\">))</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">     A  B    C</span>\n<span class=\"go\">0    0  1    a</span>\n<span class=\"go\">0    1  1    b</span>\n<span class=\"go\">0    2  1    c</span>\n<span class=\"go\">1  foo  1  NaN</span>\n<span class=\"go\">2  NaN  1  NaN</span>\n<span class=\"go\">3    3  1    d</span>\n<span class=\"go\">3    4  1    e</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">column</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.to_bag": {"fullname": "etl.pkg.dataframe.DataFrame.to_bag", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.to_bag", "kind": "function", "doc": "<p>Create Dask Bag from a Dask DataFrame</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>index : bool, optional\n    If True, the elements are tuples of <code>(index, value)</code>, otherwise\n    they're just the <code>value</code>.  Default is False.\nformat : {\"tuple\", \"dict\", \"frame\"}, optional\n    Whether to return a bag of tuples, dictionaries, or\n    dataframe-like objects. Default is \"tuple\". If \"frame\",\n    the original partitions of <code>df</code> will not be transformed\n    in any way.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bag</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">to_bag</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"s1\">&#39;tuple&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.to_parquet": {"fullname": "etl.pkg.dataframe.DataFrame.to_parquet", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.to_parquet", "kind": "function", "doc": "<p>Store Dask.dataframe to Parquet files</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>Each partition will be written to a separate file.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>df : dask.dataframe.DataFrame\npath : string or pathlib.Path\n    Destination directory for data.  Prepend with protocol like <code>s3://</code>\n    or <code>hdfs://</code> for remote data.\nengine : {'auto', 'pyarrow', 'fastparquet'}, default 'auto'\n    Parquet library to use. Defaults to 'auto', which uses <code>pyarrow</code> if\n    it is installed, and falls back to <code>fastparquet</code> otherwise.\ncompression : string or dict, default 'snappy'\n    Either a string like <code>\"snappy\"</code> or a dictionary mapping column names\n    to compressors like <code>{\"name\": \"gzip\", \"values\": \"snappy\"}</code>. Defaults\n    to <code>\"snappy\"</code>.\nwrite_index : boolean, default True\n    Whether or not to write the index. Defaults to True.\nappend : bool, default False\n    If False (default), construct data-set from scratch. If True, add new\n    row-group(s) to an existing data-set. In the latter case, the data-set\n    must exist, and the schema must match the input data.\noverwrite : bool, default False\n    Whether or not to remove the contents of <code>path</code> before writing the dataset.\n    The default is False.  If True, the specified path must correspond to\n    a directory (but not the current working directory).  This option cannot\n    be set to True if <code>append=True</code>.\n    NOTE: <code>overwrite=True</code> will remove the original data even if the current\n    write operation fails.  Use at your own risk.\nignore_divisions : bool, default False\n    If False (default) raises error when previous divisions overlap with\n    the new appended divisions. Ignored if append=False.\npartition_on : list, default None\n    Construct directory-based partitioning by splitting on these fields'\n    values. Each dask partition will result in one or more datafiles,\n    there will be no global groupby.\nstorage_options : dict, default None\n    Key/value pairs to be passed on to the file-system backend, if any.\ncustom_metadata : dict, default None\n    Custom key/value metadata to include in all footer metadata (and\n    in the global \"_metadata\" file, if applicable).  Note that the custom\n    metadata may not contain the reserved b\"pandas\" key.\nwrite_metadata_file : bool or None, default None\n    Whether to write the special <code>_metadata</code> file. If <code>None</code> (the\n    default), a <code>_metadata</code> file will only be written if <code>append=True</code>\n    and the dataset already has a <code>_metadata</code> file.\ncompute : bool, default True\n    If <code>True</code> (default) then the result is computed immediately. If\n    <code>False</code> then a <code>dask.dataframe.Scalar</code> object is returned for\n    future computation.\ncompute_kwargs : dict, default True\n    Options to be passed in to the compute method\nschema : pyarrow.Schema, dict, \"infer\", or None, default \"infer\"\n    Global schema to use for the output dataset. Defaults to \"infer\", which\n    will infer the schema from the dask dataframe metadata. This is usually\n    sufficient for common schemas, but notably will fail for <code>object</code>\n    dtype columns that contain things other than strings. These columns\n    will require an explicit schema be specified. The schema for a subset\n    of columns can be overridden by passing in a dict of column names to\n    pyarrow types (for example <code>schema={\"field\": pa.string()}</code>); columns\n    not present in this dict will still be automatically inferred.\n    Alternatively, a full <code>pyarrow.Schema</code> may be passed, in which case\n    no schema inference will be done. Passing in <code>schema=None</code> will\n    disable the use of a global file schema - each written file may use a\n    different schema dependent on the dtypes of the corresponding\n    partition. Note that this argument is ignored by the \"fastparquet\"\n    engine.\nname_function : callable, default None\n    Function to generate the filename for each output partition.\n    The function should accept an integer (partition index) as input and\n    return a string which will be used as the filename for the corresponding\n    partition. Should preserve the lexicographic order of partitions.\n    If not specified, files will created using the convention\n    <code>part.0.parquet</code>, <code>part.1.parquet</code>, <code>part.2.parquet</code>, ...\n    and so on for each partition in the DataFrame.\nfilesystem: \"fsspec\", \"arrow\", or fsspec.AbstractFileSystem backend to use.\n    Note that the \"fastparquet\" engine only supports \"fsspec\" or an explicit\n    <code>pyarrow.fs.AbstractFileSystem</code> object. Default is \"fsspec\".\n**kwargs :\n    Extra options to be passed on to the specific backend.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">dd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">to_parquet</span><span class=\"p\">(</span><span class=\"s1\">&#39;/path/to/output/&#39;</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n</code></pre>\n</div>\n\n<p>By default, files will be created in the specified output directory using the\nconvention <code>part.0.parquet</code>, <code>part.1.parquet</code>, <code>part.2.parquet</code>, ... and so on for\neach partition in the DataFrame. To customize the names of each file, you can use the\n<code>name_function=</code> keyword argument. The function passed to <code>name_function</code> will be\nused to generate the filename for each partition and should expect a partition's index\ninteger as input and return a string which will be used as the filename for the corresponding\npartition. Strings produced by <code>name_function</code> must preserve the order of their respective\npartition indices.</p>\n\n<p>For example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">name_function</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;data-</span><span class=\"si\">{</span><span class=\"n\">x</span><span class=\"si\">}</span><span class=\"s2\">.parquet&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">to_parquet</span><span class=\"p\">(</span><span class=\"s1\">&#39;/path/to/output/&#39;</span><span class=\"p\">,</span> <span class=\"n\">name_function</span><span class=\"o\">=</span><span class=\"n\">name_function</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n</code></pre>\n</div>\n\n<p>will result in the following files being created::</p>\n\n<pre><code>/path/to/output/\n    \u251c\u2500\u2500 data-0.parquet\n    \u251c\u2500\u2500 data-1.parquet\n    \u251c\u2500\u2500 data-2.parquet\n    \u2514\u2500\u2500 ...\n</code></pre>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>read_parquet: Read parquet data to dask.dataframe</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.to_orc": {"fullname": "etl.pkg.dataframe.DataFrame.to_orc", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.to_orc", "kind": "function", "doc": "<p>See dd.to_orc docstring for more information</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.to_string": {"fullname": "etl.pkg.dataframe.DataFrame.to_string", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.to_string", "kind": "function", "doc": "<p>Render a DataFrame to a console-friendly tabular output.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>buf : str, Path or StringIO-like, optional, default None  (Not supported in Dask)\n    Buffer to write to. If None, the output is returned as a string.\ncolumns : sequence, optional, default None  (Not supported in Dask)\n    The subset of columns to write. Writes all columns by default.\ncol_space : int, list or dict of int, optional  (Not supported in Dask)\n    The minimum width of each column. If a list of ints is given every integers corresponds with one column. If a dict is given, the key references the column, while the value defines the space to use..\nheader : bool or sequence of str, optional  (Not supported in Dask)\n    Write out the column names. If a list of strings is given, it is assumed to be aliases for the column names.\nindex : bool, optional, default True  (Not supported in Dask)\n    Whether to print index (row) labels.\nna_rep : str, optional, default 'NaN'  (Not supported in Dask)\n    String representation of <code>NaN</code> to use.\nformatters : list, tuple or dict of one-param. functions, optional  (Not supported in Dask)\n    Formatter functions to apply to columns' elements by position or\n    name.\n    The result of each function must be a unicode string.\n    List/tuple must be of length equal to the number of columns.\nfloat_format : one-parameter function, optional, default None  (Not supported in Dask)\n    Formatter function to apply to columns' elements if they are\n    floats. This function must return a unicode string and will be\n    applied only to the non-<code>NaN</code> elements, with <code>NaN</code> being\n    handled by <code>na_rep</code>.</p>\n\n<pre><code>This docstring was copied from pandas.core.frame.DataFrame.to_string.\n\nSome inconsistencies with the Dask version may exist.\n\n.. versionchanged:: 1.2.0\n</code></pre>\n\n<p>sparsify : bool, optional, default True  (Not supported in Dask)\n    Set to False for a DataFrame with a hierarchical index to print\n    every multiindex key at each row.\nindex_names : bool, optional, default True  (Not supported in Dask)\n    Prints the names of the indexes.\njustify : str, default None  (Not supported in Dask)\n    How to justify the column labels. If None uses the option from\n    the print configuration (controlled by set_option), 'right' out\n    of the box. Valid values are</p>\n\n<pre><code>* left\n* right\n* center\n* justify\n* justify-all\n* start\n* end\n* inherit\n* match-parent\n* initial\n* unset.\n</code></pre>\n\n<p>max_rows : int, optional\n    Maximum number of rows to display in the console.\nmax_cols : int, optional  (Not supported in Dask)\n    Maximum number of columns to display in the console.\nshow_dimensions : bool, default False  (Not supported in Dask)\n    Display DataFrame dimensions (number of rows by number of columns).\ndecimal : str, default '.'  (Not supported in Dask)\n    Character recognized as decimal separator, e.g. ',' in Europe.</p>\n\n<p>line_width : int, optional  (Not supported in Dask)\n    Width to wrap a line in characters.\nmin_rows : int, optional  (Not supported in Dask)\n    The number of rows to display in the console in a truncated repr\n    (when number of rows is above <code>max_rows</code>).\nmax_colwidth : int, optional  (Not supported in Dask)\n    Max width to truncate each column in characters. By default, no limit.\nencoding : str, default \"utf-8\"  (Not supported in Dask)\n    Set character encoding.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>str or None\n    If buf is None, returns the result as a string. Otherwise returns\n    None.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>to_html : Convert DataFrame to HTML.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;col1&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"s1\">&#39;col2&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]}</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">to_string</span><span class=\"p\">())</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   col1  col2</span>\n<span class=\"go\">0     1     4</span>\n<span class=\"go\">1     2     5</span>\n<span class=\"go\">2     3     6</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">max_rows</span><span class=\"o\">=</span><span class=\"mi\">5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.drop": {"fullname": "etl.pkg.dataframe.DataFrame.drop", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.drop", "kind": "function", "doc": "<p>Drop specified labels from rows or columns.</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.drop.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Remove rows or columns by specifying label names and corresponding\naxis, or by specifying directly index or column names. When using a\nmulti-index, labels on different levels can be removed by specifying\nthe level. See the :ref:<code>user guide &lt;advanced.shown_levels&gt;</code>\nfor more information about the now unused levels.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>labels : single label or list-like\n    Index or column labels to drop. A tuple will be used as a single\n    label and not treated as a list-like.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    Whether to drop labels from the index (0 or 'index') or\n    columns (1 or 'columns').\nindex : single label or list-like  (Not supported in Dask)\n    Alternative to specifying axis (<code>labels, axis=0</code>\n    is equivalent to <code>index=labels</code>).\ncolumns : single label or list-like\n    Alternative to specifying axis (<code>labels, axis=1</code>\n    is equivalent to <code>columns=labels</code>).\nlevel : int or level name, optional  (Not supported in Dask)\n    For MultiIndex, level from which the labels will be removed.\ninplace : bool, default False  (Not supported in Dask)\n    If False, return a copy. Otherwise, do operation\n    inplace and return None.\nerrors : {'ignore', 'raise'}, default 'raise'\n    If 'ignore', suppress error and only existing labels are\n    dropped.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame or None\n    DataFrame without the removed index or column labels or\n    None if <code>inplace=True</code>.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>KeyError\n    If any of the labels is not found in the selected axis.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.loc : Label-location based indexer for selection by label.\nDataFrame.dropna : Return DataFrame with labels on given axis omitted\n    where (all or any) data are missing.\nDataFrame.drop_duplicates : Return DataFrame with duplicate rows\n    removed, optionally only considering certain columns.\nSeries.drop : Return Series with specified index labels removed.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;D&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   A  B   C   D</span>\n<span class=\"go\">0  0  1   2   3</span>\n<span class=\"go\">1  4  5   6   7</span>\n<span class=\"go\">2  8  9  10  11</span>\n</code></pre>\n</div>\n\n<p>Drop columns</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"p\">([</span><span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   A   D</span>\n<span class=\"go\">0  0   3</span>\n<span class=\"go\">1  4   7</span>\n<span class=\"go\">2  8  11</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   A   D</span>\n<span class=\"go\">0  0   3</span>\n<span class=\"go\">1  4   7</span>\n<span class=\"go\">2  8  11</span>\n</code></pre>\n</div>\n\n<p>Drop a row by index</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   A  B   C   D</span>\n<span class=\"go\">2  8  9  10  11</span>\n</code></pre>\n</div>\n\n<p>Drop columns and/or rows of MultiIndex DataFrame</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">midx</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">MultiIndex</span><span class=\"p\">(</span><span class=\"n\">levels</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s1\">&#39;lama&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;cow&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;falcon&#39;</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                             <span class=\"p\">[</span><span class=\"s1\">&#39;speed&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;length&#39;</span><span class=\"p\">]],</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">codes</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">midx</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;big&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;small&#39;</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                        <span class=\"p\">[</span><span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">320</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                        <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">                big     small</span>\n<span class=\"go\">lama    speed   45.0    30.0</span>\n<span class=\"go\">        weight  200.0   100.0</span>\n<span class=\"go\">        length  1.5     1.0</span>\n<span class=\"go\">cow     speed   30.0    20.0</span>\n<span class=\"go\">        weight  250.0   150.0</span>\n<span class=\"go\">        length  1.5     0.8</span>\n<span class=\"go\">falcon  speed   320.0   250.0</span>\n<span class=\"go\">        weight  1.0     0.8</span>\n<span class=\"go\">        length  0.3     0.2</span>\n</code></pre>\n</div>\n\n<p>Drop a specific index combination from the MultiIndex\nDataFrame, i.e., drop the combination <code>'falcon'</code> and\n<code>'weight'</code>, which deletes only the corresponding row</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;falcon&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">))</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">                big     small</span>\n<span class=\"go\">lama    speed   45.0    30.0</span>\n<span class=\"go\">        weight  200.0   100.0</span>\n<span class=\"go\">        length  1.5     1.0</span>\n<span class=\"go\">cow     speed   30.0    20.0</span>\n<span class=\"go\">        weight  250.0   150.0</span>\n<span class=\"go\">        length  1.5     0.8</span>\n<span class=\"go\">falcon  speed   320.0   250.0</span>\n<span class=\"go\">        length  0.3     0.2</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"s1\">&#39;cow&#39;</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"s1\">&#39;small&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">                big</span>\n<span class=\"go\">lama    speed   45.0</span>\n<span class=\"go\">        weight  200.0</span>\n<span class=\"go\">        length  1.5</span>\n<span class=\"go\">falcon  speed   320.0</span>\n<span class=\"go\">        weight  1.0</span>\n<span class=\"go\">        length  0.3</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"s1\">&#39;length&#39;</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">                big     small</span>\n<span class=\"go\">lama    speed   45.0    30.0</span>\n<span class=\"go\">        weight  200.0   100.0</span>\n<span class=\"go\">cow     speed   30.0    20.0</span>\n<span class=\"go\">        weight  250.0   150.0</span>\n<span class=\"go\">falcon  speed   320.0   250.0</span>\n<span class=\"go\">        weight  1.0     0.8</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"s1\">&#39;raise&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.merge": {"fullname": "etl.pkg.dataframe.DataFrame.merge", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.merge", "kind": "function", "doc": "<p>Merge the DataFrame with another DataFrame</p>\n\n<p>This will merge the two datasets, either on the indices, a certain column\nin each dataset or the index in one dataset and the column in another.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>right: dask.dataframe.DataFrame\nhow : {'left', 'right', 'outer', 'inner'}, default: 'inner'\n    How to handle the operation of the two objects:</p>\n\n<pre><code>- left: use calling frame's index (or column if on is specified)\n- right: use other frame's index\n- outer: form union of calling frame's index (or column if on is\n  specified) with other frame's index, and sort it\n  lexicographically\n- inner: form intersection of calling frame's index (or column if\n  on is specified) with other frame's index, preserving the order\n  of the calling's one\n</code></pre>\n\n<p>on : label or list\n    Column or index level names to join on. These must be found in both\n    DataFrames. If on is None and not merging on indexes then this\n    defaults to the intersection of the columns in both DataFrames.\nleft_on : label or list, or array-like\n    Column to join on in the left DataFrame. Other than in pandas\n    arrays and lists are only support if their length is 1.\nright_on : label or list, or array-like\n    Column to join on in the right DataFrame. Other than in pandas\n    arrays and lists are only support if their length is 1.\nleft_index : boolean, default False\n    Use the index from the left DataFrame as the join key.\nright_index : boolean, default False\n    Use the index from the right DataFrame as the join key.\nsuffixes : 2-length sequence (tuple, list, ...)\n    Suffix to apply to overlapping column names in the left and\n    right side, respectively\nindicator : boolean or string, default False\n    If True, adds a column to output DataFrame called \"_merge\" with\n    information on the source of each row. If string, column with\n    information on source of each row will be added to output DataFrame,\n    and column will be named value of string. Information column is\n    Categorical-type and takes on a value of \"left_only\" for observations\n    whose merge key only appears in <code>left</code> DataFrame, \"right_only\" for\n    observations whose merge key only appears in <code>right</code> DataFrame,\n    and \"both\" if the observation\u2019s merge key is found in both.\nnpartitions: int or None, optional\n    The ideal number of output partitions. This is only utilised when\n    performing a hash_join (merging on columns only). If <code>None</code> then\n    <code>npartitions = max(lhs.npartitions, rhs.npartitions)</code>.\n    Default is <code>None</code>.\nshuffle: {'disk', 'tasks'}, optional\n    Either <code>'disk'</code> for single-node operation or <code>'tasks'</code> for\n    distributed operation.  Will be inferred by your current scheduler.\nbroadcast: boolean or float, optional\n    Whether to use a broadcast-based join in lieu of a shuffle-based\n    join for supported cases.  By default, a simple heuristic will be\n    used to select the underlying algorithm. If a floating-point value\n    is specified, that number will be used as the <code>broadcast_bias</code>\n    within the simple heuristic (a large number makes Dask more likely\n    to choose the <code>broacast_join</code> code path). See <code>broadcast_join</code>\n    for more information.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>There are three ways to join dataframes:</p>\n\n<ol>\n<li><p>Joining on indices. In this case the divisions are\naligned using the function <code>dask.dataframe.multi.align_partitions</code>.\nAfterwards, each partition is merged with the pandas merge function.</p></li>\n<li><p>Joining one on index and one on column. In this case the divisions of\ndataframe merged by index (:math:<code>d_i</code>) are used to divide the column\nmerged dataframe (:math:<code>d_c</code>) one using\n<code>dask.dataframe.multi.rearrange_by_divisions</code>. In this case the\nmerged dataframe (:math:<code>d_m</code>) has the exact same divisions\nas (:math:<code>d_i</code>). This can lead to issues if you merge multiple rows from\n(:math:<code>d_c</code>) to one row in (:math:<code>d_i</code>).</p></li>\n<li><p>Joining both on columns. In this case a hash join is performed using\n<code>dask.dataframe.multi.hash_join</code>.</p></li>\n</ol>\n\n<p>In some cases, you may see a <code>MemoryError</code> if the <code>merge</code> operation requires\nan internal <code>shuffle</code>, because shuffling places all rows that have the same\nindex in the same partition. To avoid this error, make sure all rows with the\nsame <code>on</code>-column value can fit on a single partition.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">right</span>,</span><span class=\"param\">\t<span class=\"n\">how</span><span class=\"o\">=</span><span class=\"s1\">&#39;inner&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">on</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">left_on</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">right_on</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">left_index</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">right_index</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">suffixes</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;_x&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;_y&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">indicator</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">npartitions</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">shuffle</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">broadcast</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.join": {"fullname": "etl.pkg.dataframe.DataFrame.join", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.join", "kind": "function", "doc": "<p>Join columns of another DataFrame.</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.join.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Join columns with <code>other</code> DataFrame either on index or on a key\ncolumn. Efficiently join multiple DataFrame objects by index at once by\npassing a list.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : DataFrame, Series, or a list containing any combination of them\n    Index should be similar to one of the columns in this one. If a\n    Series is passed, its name attribute must be set, and that will be\n    used as the column name in the resulting joined DataFrame.\non : str, list of str, or array-like, optional\n    Column or index level name(s) in the caller to join on the index\n    in <code>other</code>, otherwise joins index-on-index. If multiple\n    values given, the <code>other</code> DataFrame must have a MultiIndex. Can\n    pass an array as the join key if it is not already contained in\n    the calling DataFrame. Like an Excel VLOOKUP operation.\nhow : {'left', 'right', 'outer', 'inner', 'cross'}, default 'left'\n    How to handle the operation of the two objects.</p>\n\n<pre><code>* left: use calling frame's index (or column if on is specified)\n* right: use `other`'s index.\n* outer: form union of calling frame's index (or column if on is\n  specified) with `other`'s index, and sort it.\n  lexicographically.\n* inner: form intersection of calling frame's index (or column if\n  on is specified) with `other`'s index, preserving the order\n  of the calling's one.\n* cross: creates the cartesian product from both frames, preserves the order\n  of the left keys.\n\n  .. versionadded:: 1.2.0\n</code></pre>\n\n<p>lsuffix : str, default ''\n    Suffix to use from left frame's overlapping columns.\nrsuffix : str, default ''\n    Suffix to use from right frame's overlapping columns.\nsort : bool, default False  (Not supported in Dask)\n    Order result DataFrame lexicographically by the join key. If False,\n    the order of the join key depends on the join type (how keyword).\nvalidate : str, optional  (Not supported in Dask)\n    If specified, checks if join is of specified type.\n    * \"one_to_one\" or \"1:1\": check if join keys are unique in both left\n    and right datasets.\n    * \"one_to_many\" or \"1:m\": check if join keys are unique in left dataset.\n    * \"many_to_one\" or \"m:1\": check if join keys are unique in right dataset.\n    * \"many_to_many\" or \"m:m\": allowed, but does not result in checks.\n    .. versionadded:: 1.5.0</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    A dataframe containing columns from both the caller and <code>other</code>.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.merge : For column(s)-on-column(s) operations.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>Parameters <code>on</code>, <code>lsuffix</code>, and <code>rsuffix</code> are not supported when\npassing a list of <code>DataFrame</code> objects.</p>\n\n<p>Support for specifying index levels as the <code>on</code> parameter was added\nin version 0.23.0.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;key&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;K0&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;K1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;K2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;K3&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;K4&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;K5&#39;</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                   <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;A0&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A3&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A4&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A5&#39;</span><span class=\"p\">]})</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">  key   A</span>\n<span class=\"go\">0  K0  A0</span>\n<span class=\"go\">1  K1  A1</span>\n<span class=\"go\">2  K2  A2</span>\n<span class=\"go\">3  K3  A3</span>\n<span class=\"go\">4  K4  A4</span>\n<span class=\"go\">5  K5  A5</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;key&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;K0&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;K1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;K2&#39;</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                      <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;B0&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B2&#39;</span><span class=\"p\">]})</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">  key   B</span>\n<span class=\"go\">0  K0  B0</span>\n<span class=\"go\">1  K1  B1</span>\n<span class=\"go\">2  K2  B2</span>\n</code></pre>\n</div>\n\n<p>Join DataFrames using their indexes.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">lsuffix</span><span class=\"o\">=</span><span class=\"s1\">&#39;_caller&#39;</span><span class=\"p\">,</span> <span class=\"n\">rsuffix</span><span class=\"o\">=</span><span class=\"s1\">&#39;_other&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">  key_caller   A key_other    B</span>\n<span class=\"go\">0         K0  A0        K0   B0</span>\n<span class=\"go\">1         K1  A1        K1   B1</span>\n<span class=\"go\">2         K2  A2        K2   B2</span>\n<span class=\"go\">3         K3  A3       NaN  NaN</span>\n<span class=\"go\">4         K4  A4       NaN  NaN</span>\n<span class=\"go\">5         K5  A5       NaN  NaN</span>\n</code></pre>\n</div>\n\n<p>If we want to join using the key columns, we need to set key to be\nthe index in both <code>df</code> and <code>other</code>. The joined DataFrame will have\nkey as its index.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">(</span><span class=\"s1\">&#39;key&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">(</span><span class=\"s1\">&#39;key&#39;</span><span class=\"p\">))</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">      A    B</span>\n<span class=\"go\">key</span>\n<span class=\"go\">K0   A0   B0</span>\n<span class=\"go\">K1   A1   B1</span>\n<span class=\"go\">K2   A2   B2</span>\n<span class=\"go\">K3   A3  NaN</span>\n<span class=\"go\">K4   A4  NaN</span>\n<span class=\"go\">K5   A5  NaN</span>\n</code></pre>\n</div>\n\n<p>Another option to join using the key columns is to use the <code>on</code>\nparameter. DataFrame.join always uses <code>other</code>'s index but we can use\nany column in <code>df</code>. This method preserves the original DataFrame's\nindex in the result.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">(</span><span class=\"s1\">&#39;key&#39;</span><span class=\"p\">),</span> <span class=\"n\">on</span><span class=\"o\">=</span><span class=\"s1\">&#39;key&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">  key   A    B</span>\n<span class=\"go\">0  K0  A0   B0</span>\n<span class=\"go\">1  K1  A1   B1</span>\n<span class=\"go\">2  K2  A2   B2</span>\n<span class=\"go\">3  K3  A3  NaN</span>\n<span class=\"go\">4  K4  A4  NaN</span>\n<span class=\"go\">5  K5  A5  NaN</span>\n</code></pre>\n</div>\n\n<p>Using non-unique key values shows how they are matched.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;key&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;K0&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;K1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;K1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;K3&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;K0&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;K1&#39;</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                   <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;A0&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A3&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A4&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A5&#39;</span><span class=\"p\">]})</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">  key   A</span>\n<span class=\"go\">0  K0  A0</span>\n<span class=\"go\">1  K1  A1</span>\n<span class=\"go\">2  K1  A2</span>\n<span class=\"go\">3  K3  A3</span>\n<span class=\"go\">4  K0  A4</span>\n<span class=\"go\">5  K1  A5</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">(</span><span class=\"s1\">&#39;key&#39;</span><span class=\"p\">),</span> <span class=\"n\">on</span><span class=\"o\">=</span><span class=\"s1\">&#39;key&#39;</span><span class=\"p\">,</span> <span class=\"n\">validate</span><span class=\"o\">=</span><span class=\"s1\">&#39;m:1&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">  key   A    B</span>\n<span class=\"go\">0  K0  A0   B0</span>\n<span class=\"go\">1  K1  A1   B1</span>\n<span class=\"go\">2  K1  A2   B1</span>\n<span class=\"go\">3  K3  A3  NaN</span>\n<span class=\"go\">4  K0  A4   B0</span>\n<span class=\"go\">5  K1  A5   B1</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span>,</span><span class=\"param\">\t<span class=\"n\">on</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">how</span><span class=\"o\">=</span><span class=\"s1\">&#39;left&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">lsuffix</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">rsuffix</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">npartitions</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">shuffle</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.iterrows": {"fullname": "etl.pkg.dataframe.DataFrame.iterrows", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.iterrows", "kind": "function", "doc": "<p>Iterate over DataFrame rows as (index, Series) pairs.</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.iterrows.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<h2 id=\"yields\">Yields</h2>\n\n<p>index : label or tuple of label\n    The index of the row. A tuple for a <code>MultiIndex</code>.\ndata : Series\n    The data of the row as a Series.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.itertuples : Iterate over DataFrame rows as namedtuples of the values.\nDataFrame.items : Iterate over (column name, Series) pairs.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<ol>\n<li><p>Because <code>iterrows</code> returns a Series for each row,\nit does <strong>not</strong> preserve dtypes across the rows (dtypes are\npreserved across columns for DataFrames). For example,</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">]],</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;int&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;float&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">row</span> <span class=\"o\">=</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">iterrows</span><span class=\"p\">())[</span><span class=\"mi\">1</span><span class=\"p\">]</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">row</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">int      1.0</span>\n<span class=\"go\">float    1.5</span>\n<span class=\"go\">Name: 0, dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"s1\">&#39;int&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;int&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">int64</span>\n</code></pre>\n</div>\n\n<p>To preserve dtypes while iterating over the rows, it is better\nto use :meth:<code>itertuples</code> which returns namedtuples of the values\nand which is generally faster than <code>iterrows</code>.</p></li>\n<li><p>You should <strong>never modify</strong> something you are iterating over.\nThis is not guaranteed to work in all cases. Depending on the\ndata types, the iterator returns a copy and not a view, and writing\nto it will have no effect.</p></li>\n</ol>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.itertuples": {"fullname": "etl.pkg.dataframe.DataFrame.itertuples", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.itertuples", "kind": "function", "doc": "<p>Iterate over DataFrame rows as namedtuples.</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.itertuples.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>index : bool, default True\n    If True, return the index as the first element of the tuple.\nname : str or None, default \"Pandas\"\n    The name of the returned namedtuples or None to return regular\n    tuples.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>iterator\n    An object to iterate over namedtuples for each row in the\n    DataFrame with the first field possibly being the index and\n    following fields being the column values.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.iterrows : Iterate over DataFrame rows as (index, Series)\n    pairs.\nDataFrame.items : Iterate over (column name, Series) pairs.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>The column names will be renamed to positional names if they are\ninvalid Python identifiers, repeated, or start with an underscore.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;num_legs&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"s1\">&#39;num_wings&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]},</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;dog&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;hawk&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">      num_legs  num_wings</span>\n<span class=\"go\">dog          4          0</span>\n<span class=\"go\">hawk         2          2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">itertuples</span><span class=\"p\">():</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span>\n<span class=\"gp\">...</span>\n<span class=\"go\">Pandas(Index=&#39;dog&#39;, num_legs=4, num_wings=0)</span>\n<span class=\"go\">Pandas(Index=&#39;hawk&#39;, num_legs=2, num_wings=2)</span>\n</code></pre>\n</div>\n\n<p>By setting the <code>index</code> parameter to False we can remove the index\nas the first element of the tuple:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">itertuples</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span>\n<span class=\"gp\">...</span>\n<span class=\"go\">Pandas(num_legs=4, num_wings=0)</span>\n<span class=\"go\">Pandas(num_legs=2, num_wings=2)</span>\n</code></pre>\n</div>\n\n<p>With the <code>name</code> parameter set we set a custom name for the yielded\nnamedtuples:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">itertuples</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;Animal&#39;</span><span class=\"p\">):</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span>\n<span class=\"gp\">...</span>\n<span class=\"go\">Animal(Index=&#39;dog&#39;, num_legs=4, num_wings=0)</span>\n<span class=\"go\">Animal(Index=&#39;hawk&#39;, num_legs=2, num_wings=2)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;Pandas&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.items": {"fullname": "etl.pkg.dataframe.DataFrame.items", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.items", "kind": "function", "doc": "<p>Iterate over (column name, Series) pairs.</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.items.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Iterates over the DataFrame columns, returning a tuple with\nthe column name and the content as a Series.</p>\n\n<h2 id=\"yields\">Yields</h2>\n\n<p>label : object\n    The column names for the DataFrame being iterated over.\ncontent : Series\n    The column entries belonging to each label, as a Series.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.iterrows : Iterate over DataFrame rows as\n    (index, Series) pairs.\nDataFrame.itertuples : Iterate over DataFrame rows as namedtuples\n    of the values.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;species&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;bear&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bear&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;marsupial&#39;</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                  <span class=\"s1\">&#39;population&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1864</span><span class=\"p\">,</span> <span class=\"mi\">22000</span><span class=\"p\">,</span> <span class=\"mi\">80000</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;panda&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;polar&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;koala&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">        species   population</span>\n<span class=\"go\">panda   bear      1864</span>\n<span class=\"go\">polar   bear      22000</span>\n<span class=\"go\">koala   marsupial 80000</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">label</span><span class=\"p\">,</span> <span class=\"n\">content</span> <span class=\"ow\">in</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">&#39;label: </span><span class=\"si\">{</span><span class=\"n\">label</span><span class=\"si\">}</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">&#39;content: </span><span class=\"si\">{</span><span class=\"n\">content</span><span class=\"si\">}</span><span class=\"s1\">&#39;</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">...</span>\n<span class=\"go\">label: species</span>\n<span class=\"go\">content:</span>\n<span class=\"go\">panda         bear</span>\n<span class=\"go\">polar         bear</span>\n<span class=\"go\">koala    marsupial</span>\n<span class=\"go\">Name: species, dtype: object</span>\n<span class=\"go\">label: population</span>\n<span class=\"go\">content:</span>\n<span class=\"go\">panda     1864</span>\n<span class=\"go\">polar    22000</span>\n<span class=\"go\">koala    80000</span>\n<span class=\"go\">Name: population, dtype: int64</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.apply": {"fullname": "etl.pkg.dataframe.DataFrame.apply", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.apply", "kind": "function", "doc": "<p>Parallel version of pandas.DataFrame.apply</p>\n\n<p>This mimics the pandas version except for the following:</p>\n\n<ol>\n<li>Only <code>axis=1</code> is supported (and must be specified explicitly).</li>\n<li>The user should provide output metadata via the <code>meta</code> keyword.</li>\n</ol>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>func : function\n    Function to apply to each column/row\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    - 0 or 'index': apply function to each column (NOT SUPPORTED)\n    - 1 or 'columns': apply function to each row\nmeta : pd.DataFrame, pd.Series, dict, iterable, tuple, optional\n    An empty <code>pd.DataFrame</code> or <code>pd.Series</code> that matches the dtypes\n    and column names of the output. This metadata is necessary for\n    many algorithms in dask dataframe to work.  For ease of use, some\n    alternative inputs are also available. Instead of a <code>DataFrame</code>,\n    a <code>dict</code> of <code>{name: dtype}</code> or iterable of <code>(name, dtype)</code>\n    can be provided (note that the order of the names should match the\n    order of the columns). Instead of a series, a tuple of <code>(name,\n    dtype)</code> can be used. If not provided, dask will try to infer the\n    metadata. This may lead to unexpected results, so providing\n    <code>meta</code> is recommended. For more information, see\n    <code>dask.dataframe.utils.make_meta</code>.\nargs : tuple\n    Positional arguments to pass to function in addition to the array/series</p>\n\n<p>Additional keyword arguments will be passed as keywords to the function</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>applied : Series or DataFrame</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">dask.dataframe</span> <span class=\"k\">as</span> <span class=\"nn\">dd</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                   <span class=\"s1\">&#39;y&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"mf\">2.</span><span class=\"p\">,</span> <span class=\"mf\">3.</span><span class=\"p\">,</span> <span class=\"mf\">4.</span><span class=\"p\">,</span> <span class=\"mf\">5.</span><span class=\"p\">]})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ddf</span> <span class=\"o\">=</span> <span class=\"n\">dd</span><span class=\"o\">.</span><span class=\"n\">from_pandas</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">npartitions</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Apply a function to row-wise passing in extra arguments in <code>args</code> and\n<code>kwargs</code>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">myadd</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"k\">return</span> <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">ddf</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"n\">myadd</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,),</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mf\">1.5</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n</code></pre>\n</div>\n\n<p>By default, dask tries to infer the output metadata by running your\nprovided function on some fake data. This works well in many cases, but\ncan sometimes be expensive, or even fail. To avoid this, you can\nmanually specify the output metadata with the <code>meta</code> keyword. This\ncan be specified in many forms, for more information see\n<code>dask.dataframe.utils.make_meta</code>.</p>\n\n<p>Here we specify the output is a Series with name <code>'x'</code>, and dtype\n<code>float64</code>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">ddf</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"n\">myadd</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,),</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"n\">meta</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;f8&#39;</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p>In the case where the metadata doesn't change, you can also pass in\nthe object itself directly:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">ddf</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">row</span><span class=\"p\">:</span> <span class=\"n\">row</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">meta</span><span class=\"o\">=</span><span class=\"n\">ddf</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>dask.DataFrame.map_partitions</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">func</span>,</span><span class=\"param\">\t<span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">broadcast</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">raw</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">reduce</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">()</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span><span class=\"o\">=</span><span class=\"s1\">&#39;__no_default__&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">result_type</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwds</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.applymap": {"fullname": "etl.pkg.dataframe.DataFrame.applymap", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.applymap", "kind": "function", "doc": "<p>Apply a function to a Dataframe elementwise.</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.applymap.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>This method applies a function that accepts and returns a scalar\nto every element of a DataFrame.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>func : callable\n    Python function, returns a single value from a single value.\nna_action : {None, 'ignore'}, default None  (Not supported in Dask)\n    If \u2018ignore\u2019, propagate NaN values, without passing them to func.</p>\n\n<pre><code>.. versionadded:: 1.2\n</code></pre>\n\n<p>**kwargs\n    Additional keyword arguments to pass as keywords arguments to\n    <code>func</code>.</p>\n\n<pre><code>.. versionadded:: 1.3.0\n</code></pre>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    Transformed DataFrame.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.apply : Apply a function along input axis of DataFrame.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">2.12</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">3.356</span><span class=\"p\">,</span> <span class=\"mf\">4.567</span><span class=\"p\">]])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">       0      1</span>\n<span class=\"go\">0  1.000  2.120</span>\n<span class=\"go\">1  3.356  4.567</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">applymap</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)))</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   0  1</span>\n<span class=\"go\">0  3  4</span>\n<span class=\"go\">1  5  5</span>\n</code></pre>\n</div>\n\n<p>Like Series.map, NA values can be ignored:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_copy</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_copy</span><span class=\"o\">.</span><span class=\"n\">iloc</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">NA</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_copy</span><span class=\"o\">.</span><span class=\"n\">applymap</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)),</span> <span class=\"n\">na_action</span><span class=\"o\">=</span><span class=\"s1\">&#39;ignore&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">     0  1</span>\n<span class=\"go\">0  NaN  4</span>\n<span class=\"go\">1  5.0  5</span>\n</code></pre>\n</div>\n\n<p>Note that a vectorized version of <code>func</code> often exists, which will\nbe much faster. You could square each number elementwise.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">applymap</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           0          1</span>\n<span class=\"go\">0   1.000000   4.494400</span>\n<span class=\"go\">1  11.262736  20.857489</span>\n</code></pre>\n</div>\n\n<p>But it's better to avoid applymap in that case.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">**</span> <span class=\"mi\">2</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           0          1</span>\n<span class=\"go\">0   1.000000   4.494400</span>\n<span class=\"go\">1  11.262736  20.857489</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">func</span>, </span><span class=\"param\"><span class=\"n\">meta</span><span class=\"o\">=</span><span class=\"s1\">&#39;__no_default__&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.map": {"fullname": "etl.pkg.dataframe.DataFrame.map", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.map", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">func</span>, </span><span class=\"param\"><span class=\"n\">meta</span><span class=\"o\">=</span><span class=\"s1\">&#39;__no_default__&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.round": {"fullname": "etl.pkg.dataframe.DataFrame.round", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.round", "kind": "function", "doc": "<p>Round a DataFrame to a variable number of decimal places.</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.round.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>decimals : int, dict, Series\n    Number of decimal places to round each column to. If an int is\n    given, round each column to the same number of places.\n    Otherwise dict and Series round to variable numbers of places.\n    Column names should be in the keys if <code>decimals</code> is a\n    dict-like, or in the index if <code>decimals</code> is a Series. Any\n    columns not included in <code>decimals</code> will be left as is. Elements\n    of <code>decimals</code> which are not columns of the input will be\n    ignored.\n<em>args\n    Additional keywords have no effect but might be accepted for\n    compatibility with numpy.\n*</em>kwargs\n    Additional keywords have no effect but might be accepted for\n    compatibility with numpy.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    A DataFrame with the affected columns rounded to the specified\n    number of decimal places.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>numpy.around : Round a numpy array to the given number of decimals.\nSeries.round : Round a Series to the given number of decimals.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">([(</span><span class=\"mf\">.21</span><span class=\"p\">,</span> <span class=\"mf\">.32</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mf\">.01</span><span class=\"p\">,</span> <span class=\"mf\">.67</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mf\">.66</span><span class=\"p\">,</span> <span class=\"mf\">.03</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mf\">.21</span><span class=\"p\">,</span> <span class=\"mf\">.18</span><span class=\"p\">)],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;dogs&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;cats&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    dogs  cats</span>\n<span class=\"go\">0  0.21  0.32</span>\n<span class=\"go\">1  0.01  0.67</span>\n<span class=\"go\">2  0.66  0.03</span>\n<span class=\"go\">3  0.21  0.18</span>\n</code></pre>\n</div>\n\n<p>By providing an integer each column is rounded to the same number\nof decimal places</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">round</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    dogs  cats</span>\n<span class=\"go\">0   0.2   0.3</span>\n<span class=\"go\">1   0.0   0.7</span>\n<span class=\"go\">2   0.7   0.0</span>\n<span class=\"go\">3   0.2   0.2</span>\n</code></pre>\n</div>\n\n<p>With a dict, the number of places for specific columns can be\nspecified with the column names as key and the number of decimal\nplaces as value</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">round</span><span class=\"p\">({</span><span class=\"s1\">&#39;dogs&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;cats&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">})</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    dogs  cats</span>\n<span class=\"go\">0   0.2   0.0</span>\n<span class=\"go\">1   0.0   1.0</span>\n<span class=\"go\">2   0.7   0.0</span>\n<span class=\"go\">3   0.2   0.0</span>\n</code></pre>\n</div>\n\n<p>Using a Series, the number of places for specific columns can be\nspecified with the column names as index and the number of\ndecimal places as value</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">decimals</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;cats&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;dogs&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">round</span><span class=\"p\">(</span><span class=\"n\">decimals</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    dogs  cats</span>\n<span class=\"go\">0   0.2   0.0</span>\n<span class=\"go\">1   0.0   1.0</span>\n<span class=\"go\">2   0.7   0.0</span>\n<span class=\"go\">3   0.2   0.0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">decimals</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.nunique": {"fullname": "etl.pkg.dataframe.DataFrame.nunique", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.nunique", "kind": "function", "doc": "<p>Count number of distinct elements in specified axis.</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.nunique.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Return Series with number of distinct elements. Can ignore NaN\nvalues.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>axis : {0 or 'index', 1 or 'columns'}, default 0\n    The axis to use. 0 or 'index' for row-wise, 1 or 'columns' for\n    column-wise.\ndropna : bool, default True\n    Don't include NaN in the counts.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>Series.nunique: Method nunique for Series.\nDataFrame.count: Count non-NA cells for each column or row.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]})</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">nunique</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">A    3</span>\n<span class=\"go\">B    2</span>\n<span class=\"go\">dtype: int64</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">nunique</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">0    1</span>\n<span class=\"go\">1    2</span>\n<span class=\"go\">2    2</span>\n<span class=\"go\">dtype: int64</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">split_every</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">dropna</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.mode": {"fullname": "etl.pkg.dataframe.DataFrame.mode", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.mode", "kind": "function", "doc": "<p>Get the mode(s) of each element along the selected axis.</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.mode.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>The mode of a set of values is the value that appears most often.\nIt can be multiple values.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>axis : {0 or 'index', 1 or 'columns'}, default 0  (Not supported in Dask)\n    The axis to iterate over while searching for the mode:</p>\n\n<pre><code>* 0 or 'index' : get mode of each column\n* 1 or 'columns' : get mode of each row.\n</code></pre>\n\n<p>numeric_only : bool, default False\n    If True, only apply to numeric columns.\ndropna : bool, default True\n    Don't consider counts of NaN/NaT.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    The modes of each column or row.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>Series.mode : Return the highest frequency value in a Series.\nSeries.value_counts : Return the counts of values in a Series.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">([(</span><span class=\"s1\">&#39;bird&#39;</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                   <span class=\"p\">(</span><span class=\"s1\">&#39;mammal&#39;</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>                   <span class=\"p\">(</span><span class=\"s1\">&#39;arthropod&#39;</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>                   <span class=\"p\">(</span><span class=\"s1\">&#39;bird&#39;</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">)],</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;falcon&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;horse&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;spider&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ostrich&#39;</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;species&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;legs&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;wings&#39;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           species  legs  wings</span>\n<span class=\"go\">falcon        bird     2    2.0</span>\n<span class=\"go\">horse       mammal     4    NaN</span>\n<span class=\"go\">spider   arthropod     8    0.0</span>\n<span class=\"go\">ostrich       bird     2    NaN</span>\n</code></pre>\n</div>\n\n<p>By default, missing values are not considered, and the mode of wings\nare both 0 and 2. Because the resulting DataFrame has two rows,\nthe second row of <code>species</code> and <code>legs</code> contains <code>NaN</code>.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mode</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">  species  legs  wings</span>\n<span class=\"go\">0    bird   2.0    0.0</span>\n<span class=\"go\">1     NaN   NaN    2.0</span>\n</code></pre>\n</div>\n\n<p>Setting <code>dropna=False</code> <code>NaN</code> values are considered and they can be\nthe mode (like for wings).</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mode</span><span class=\"p\">(</span><span class=\"n\">dropna</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">  species  legs  wings</span>\n<span class=\"go\">0    bird     2    NaN</span>\n</code></pre>\n</div>\n\n<p>Setting <code>numeric_only=True</code>, only the mode of numeric columns is\ncomputed, and columns of other types are ignored.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mode</span><span class=\"p\">(</span><span class=\"n\">numeric_only</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   legs  wings</span>\n<span class=\"go\">0   2.0    0.0</span>\n<span class=\"go\">1   NaN    2.0</span>\n</code></pre>\n</div>\n\n<p>To compute the mode over columns and not rows, use the axis parameter:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mode</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span><span class=\"p\">,</span> <span class=\"n\">numeric_only</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           0    1</span>\n<span class=\"go\">falcon   2.0  NaN</span>\n<span class=\"go\">horse    4.0  NaN</span>\n<span class=\"go\">spider   0.0  8.0</span>\n<span class=\"go\">ostrich  2.0  NaN</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dropna</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">split_every</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">numeric_only</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.cov": {"fullname": "etl.pkg.dataframe.DataFrame.cov", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.cov", "kind": "function", "doc": "<p>Compute pairwise covariance of columns, excluding NA/null values.</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.cov.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Compute the pairwise covariance among the series of a DataFrame.\nThe returned data frame is the <code>covariance matrix\n&lt;https://en.wikipedia.org/wiki/Covariance_matrix&gt;</code>__ of the columns\nof the DataFrame.</p>\n\n<p>Both NA and null values are automatically excluded from the\ncalculation. (See the note below about bias from missing values.)\nA threshold can be set for the minimum number of\nobservations for each value created. Comparisons with observations\nbelow this threshold will be returned as <code>NaN</code>.</p>\n\n<p>This method is generally used for the analysis of time series data to\nunderstand the relationship between different measures\nacross time.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>min_periods : int, optional\n    Minimum number of observations required per pair of columns\n    to have a valid result.</p>\n\n<p>ddof : int, default 1  (Not supported in Dask)\n    Delta degrees of freedom.  The divisor used in calculations\n    is <code>N - ddof</code>, where <code>N</code> represents the number of elements.</p>\n\n<pre><code>.. versionadded:: 1.1.0\n</code></pre>\n\n<p>numeric_only : bool, default False\n    Include only <code>float</code>, <code>int</code> or <code>boolean</code> data.</p>\n\n<pre><code>.. versionadded:: 1.5.0\n\n.. versionchanged:: 2.0.0\n    The default value of ``numeric_only`` is now ``False``.\n</code></pre>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    The covariance matrix of the series of the DataFrame.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>Series.cov : Compute covariance with another Series.\ncore.window.ewm.ExponentialMovingWindow.cov : Exponential weighted sample\n    covariance.\ncore.window.expanding.Expanding.cov : Expanding sample covariance.\ncore.window.rolling.Rolling.cov : Rolling sample covariance.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>Returns the covariance matrix of the DataFrame's time series.\nThe covariance is normalized by N-ddof.</p>\n\n<p>For DataFrames that have Series that are missing data (assuming that\ndata is <code>missing at random\n&lt;https://en.wikipedia.org/wiki/Missing_data#Missing_at_random&gt;</code>__)\nthe returned covariance matrix will be an unbiased estimate\nof the variance and covariance between the member Series.</p>\n\n<p>However, for many applications this estimate may not be acceptable\nbecause the estimate covariance matrix is not guaranteed to be positive\nsemi-definite. This could lead to estimate correlations having\nabsolute values which are greater than one, and/or a non-invertible\ncovariance matrix. See <code>Estimation of covariance matrices\n&lt;https://en.wikipedia.org/w/index.php?title=Estimation_of_covariance_\nmatrices&gt;</code>__ for more details.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">([(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;dogs&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;cats&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">cov</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">          dogs      cats</span>\n<span class=\"go\">dogs  0.666667 -1.000000</span>\n<span class=\"go\">cats -1.000000  1.666667</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">cov</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">          a         b         c         d         e</span>\n<span class=\"go\">a  0.998438 -0.020161  0.059277 -0.008943  0.014144</span>\n<span class=\"go\">b -0.020161  1.059352 -0.008543 -0.024738  0.009826</span>\n<span class=\"go\">c  0.059277 -0.008543  1.010670 -0.001486 -0.000271</span>\n<span class=\"go\">d -0.008943 -0.024738 -0.001486  0.921297 -0.013692</span>\n<span class=\"go\">e  0.014144  0.009826 -0.000271 -0.013692  0.977795</span>\n</code></pre>\n</div>\n\n<p><strong>Minimum number of periods</strong></p>\n\n<p>This method also supports an optional <code>min_periods</code> keyword\nthat specifies the required minimum number of non-NA observations for\neach column pair in order to have a valid result:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">[:</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">:</span><span class=\"mi\">10</span><span class=\"p\">],</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">cov</span><span class=\"p\">(</span><span class=\"n\">min_periods</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">          a         b         c</span>\n<span class=\"go\">a  0.316741       NaN -0.150812</span>\n<span class=\"go\">b       NaN  1.248003  0.191417</span>\n<span class=\"go\">c -0.150812  0.191417  0.895202</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">min_periods</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">numeric_only</span><span class=\"o\">=</span><span class=\"s1\">&#39;__no_default__&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">split_every</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.corr": {"fullname": "etl.pkg.dataframe.DataFrame.corr", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.corr", "kind": "function", "doc": "<p>Compute pairwise correlation of columns, excluding NA/null values.</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.corr.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>method : {'pearson', 'kendall', 'spearman'} or callable\n    Method of correlation:</p>\n\n<pre><code>* pearson : standard correlation coefficient\n* kendall : Kendall Tau correlation coefficient\n* spearman : Spearman rank correlation\n* callable: callable with input two 1d ndarrays\n    and returning a float. Note that the returned matrix from corr\n    will have 1 along the diagonals and will be symmetric\n    regardless of the callable's behavior.\n</code></pre>\n\n<p>min_periods : int, optional\n    Minimum number of observations required per pair of columns\n    to have a valid result. Currently only available for Pearson\n    and Spearman correlation.\nnumeric_only : bool, default False\n    Include only <code>float</code>, <code>int</code> or <code>boolean</code> data.</p>\n\n<pre><code>.. versionadded:: 1.5.0\n\n.. versionchanged:: 2.0.0\n    The default value of ``numeric_only`` is now ``False``.\n</code></pre>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    Correlation matrix.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.corrwith : Compute pairwise correlation with another\n    DataFrame or Series.\nSeries.corr : Compute the correlation between two Series.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>Pearson, Kendall and Spearman correlation are currently computed using pairwise complete observations.</p>\n\n<ul>\n<li><code>Pearson correlation coefficient &lt;https://en.wikipedia.org/wiki/Pearson_correlation_coefficient&gt;</code>_</li>\n<li><code>Kendall rank correlation coefficient &lt;https://en.wikipedia.org/wiki/Kendall_rank_correlation_coefficient&gt;</code>_</li>\n<li><code>Spearman's rank correlation coefficient &lt;https://en.wikipedia.org/wiki/Spearman%27s_rank_correlation_coefficient&gt;</code>_</li>\n</ul>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">histogram_intersection</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>    <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">minimum</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">round</span><span class=\"p\">(</span><span class=\"n\">decimals</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"k\">return</span> <span class=\"n\">v</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">([(</span><span class=\"mf\">.2</span><span class=\"p\">,</span> <span class=\"mf\">.3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mf\">.0</span><span class=\"p\">,</span> <span class=\"mf\">.6</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mf\">.6</span><span class=\"p\">,</span> <span class=\"mf\">.0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mf\">.2</span><span class=\"p\">,</span> <span class=\"mf\">.1</span><span class=\"p\">)],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;dogs&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;cats&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">corr</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"n\">histogram_intersection</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">      dogs  cats</span>\n<span class=\"go\">dogs   1.0   0.3</span>\n<span class=\"go\">cats   0.3   1.0</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">([(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;dogs&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;cats&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">corr</span><span class=\"p\">(</span><span class=\"n\">min_periods</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">      dogs  cats</span>\n<span class=\"go\">dogs   1.0   NaN</span>\n<span class=\"go\">cats   NaN   1.0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;pearson&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">min_periods</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">numeric_only</span><span class=\"o\">=</span><span class=\"s1\">&#39;__no_default__&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">split_every</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.info": {"fullname": "etl.pkg.dataframe.DataFrame.info", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.info", "kind": "function", "doc": "<p>Concise summary of a Dask DataFrame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">buf</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">memory_usage</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.memory_usage": {"fullname": "etl.pkg.dataframe.DataFrame.memory_usage", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.memory_usage", "kind": "function", "doc": "<p>Return the memory usage of each column in bytes.</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.memory_usage.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>The memory usage can optionally include the contribution of\nthe index and elements of <code>object</code> dtype.</p>\n\n<p>This value is displayed in <code>DataFrame.info</code> by default. This can be\nsuppressed by setting <code>pandas.options.display.memory_usage</code> to False.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>index : bool, default True\n    Specifies whether to include the memory usage of the DataFrame's\n    index in returned Series. If <code>index=True</code>, the memory usage of\n    the index is the first item in the output.\ndeep : bool, default False\n    If True, introspect the data deeply by interrogating\n    <code>object</code> dtypes for system-level memory consumption, and include\n    it in the returned values.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series\n    A Series whose index is the original column names and whose values\n    is the memory usage of each column in bytes.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>numpy.ndarray.nbytes : Total bytes consumed by the elements of an\n    ndarray.\nSeries.memory_usage : Bytes consumed by a Series.\nCategorical : Memory-efficient array for string values with\n    many repeated values.\nDataFrame.info : Concise summary of a DataFrame.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>See the :ref:<code>Frequently Asked Questions &lt;df-memory-usage&gt;</code> for more\ndetails.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dtypes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;int64&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;float64&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;complex128&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;object&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bool&#39;</span><span class=\"p\">]</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">([(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"mi\">5000</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">))</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>             <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">dtypes</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   int64  float64            complex128  object  bool</span>\n<span class=\"go\">0      1      1.0              1.0+0.0j       1  True</span>\n<span class=\"go\">1      1      1.0              1.0+0.0j       1  True</span>\n<span class=\"go\">2      1      1.0              1.0+0.0j       1  True</span>\n<span class=\"go\">3      1      1.0              1.0+0.0j       1  True</span>\n<span class=\"go\">4      1      1.0              1.0+0.0j       1  True</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">memory_usage</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">Index           128</span>\n<span class=\"go\">int64         40000</span>\n<span class=\"go\">float64       40000</span>\n<span class=\"go\">complex128    80000</span>\n<span class=\"go\">object        40000</span>\n<span class=\"go\">bool           5000</span>\n<span class=\"go\">dtype: int64</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">memory_usage</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">int64         40000</span>\n<span class=\"go\">float64       40000</span>\n<span class=\"go\">complex128    80000</span>\n<span class=\"go\">object        40000</span>\n<span class=\"go\">bool           5000</span>\n<span class=\"go\">dtype: int64</span>\n</code></pre>\n</div>\n\n<p>The memory footprint of <code>object</code> dtype columns is ignored by default:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">memory_usage</span><span class=\"p\">(</span><span class=\"n\">deep</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">Index            128</span>\n<span class=\"go\">int64          40000</span>\n<span class=\"go\">float64        40000</span>\n<span class=\"go\">complex128     80000</span>\n<span class=\"go\">object        180000</span>\n<span class=\"go\">bool            5000</span>\n<span class=\"go\">dtype: int64</span>\n</code></pre>\n</div>\n\n<p>Use a Categorical for efficient storage of an object-dtype column with\nmany repeated values.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;object&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"s1\">&#39;category&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">memory_usage</span><span class=\"p\">(</span><span class=\"n\">deep</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">5244</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">deep</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.pivot_table": {"fullname": "etl.pkg.dataframe.DataFrame.pivot_table", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.pivot_table", "kind": "function", "doc": "<p>Create a spreadsheet-style pivot table as a DataFrame. Target <code>columns</code>\nmust have category dtype to infer result's <code>columns</code>.\n<code>index</code>, <code>columns</code>, <code>values</code> and <code>aggfunc</code> must be all scalar.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>values : scalar\n    column to aggregate\nindex : scalar\n    column to be index\ncolumns : scalar\n    column to be columns\naggfunc : {'mean', 'sum', 'count'}, default 'mean'</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>table : DataFrame</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">values</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">aggfunc</span><span class=\"o\">=</span><span class=\"s1\">&#39;mean&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.melt": {"fullname": "etl.pkg.dataframe.DataFrame.melt", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.melt", "kind": "function", "doc": "<p>Unpivots a DataFrame from wide format to long format,\noptionally leaving identifier variables set.</p>\n\n<p>This function is useful to massage a DataFrame into a format where\none or more columns are identifier variables (<code>id_vars</code>), while\nall other columns, considered measured variables (<code>value_vars</code>),\nare \"unpivoted\" to the row axis, leaving just two non-identifier\ncolumns, 'variable' and 'value'.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>frame : DataFrame\nid_vars : tuple, list, or ndarray, optional\n    Column(s) to use as identifier variables.\nvalue_vars : tuple, list, or ndarray, optional\n    Column(s) to unpivot. If not specified, uses all columns that\n    are not set as <code>id_vars</code>.\nvar_name : scalar\n    Name to use for the 'variable' column. If None it uses\n    <code>frame.columns.name</code> or 'variable'.\nvalue_name : scalar, default 'value'\n    Name to use for the 'value' column.\ncol_level : int or string, optional\n    If columns are a MultiIndex then use this level to melt.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    Unpivoted DataFrame.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>pandas.DataFrame.melt</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">id_vars</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">value_vars</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">var_name</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">value_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;value&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">col_level</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.to_records": {"fullname": "etl.pkg.dataframe.DataFrame.to_records", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.to_records", "kind": "function", "doc": "<p>Create Dask Array from a Dask Dataframe</p>\n\n<p>Warning: This creates a dask.array without precise shape information.\nOperations that depend on shape information, like slicing or reshaping,\nwill not work.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">to_records</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n</code></pre>\n</div>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>dask.dataframe._Frame.values\ndask.dataframe.from_dask_array</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">lengths</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.to_html": {"fullname": "etl.pkg.dataframe.DataFrame.to_html", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.to_html", "kind": "function", "doc": "<p>Render a DataFrame as an HTML table.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>buf : str, Path or StringIO-like, optional, default None  (Not supported in Dask)\n    Buffer to write to. If None, the output is returned as a string.\ncolumns : sequence, optional, default None  (Not supported in Dask)\n    The subset of columns to write. Writes all columns by default.\ncol_space : str or int, list or dict of int or str, optional  (Not supported in Dask)\n    The minimum width of each column in CSS length units.  An int is assumed to be px units..\nheader : bool, optional  (Not supported in Dask)\n    Whether to print column labels, default True.\nindex : bool, optional, default True  (Not supported in Dask)\n    Whether to print index (row) labels.\nna_rep : str, optional, default 'NaN'  (Not supported in Dask)\n    String representation of <code>NaN</code> to use.\nformatters : list, tuple or dict of one-param. functions, optional  (Not supported in Dask)\n    Formatter functions to apply to columns' elements by position or\n    name.\n    The result of each function must be a unicode string.\n    List/tuple must be of length equal to the number of columns.\nfloat_format : one-parameter function, optional, default None  (Not supported in Dask)\n    Formatter function to apply to columns' elements if they are\n    floats. This function must return a unicode string and will be\n    applied only to the non-<code>NaN</code> elements, with <code>NaN</code> being\n    handled by <code>na_rep</code>.</p>\n\n<pre><code>This docstring was copied from pandas.core.frame.DataFrame.to_html.\n\nSome inconsistencies with the Dask version may exist.\n\n.. versionchanged:: 1.2.0\n</code></pre>\n\n<p>sparsify : bool, optional, default True  (Not supported in Dask)\n    Set to False for a DataFrame with a hierarchical index to print\n    every multiindex key at each row.\nindex_names : bool, optional, default True  (Not supported in Dask)\n    Prints the names of the indexes.\njustify : str, default None  (Not supported in Dask)\n    How to justify the column labels. If None uses the option from\n    the print configuration (controlled by set_option), 'right' out\n    of the box. Valid values are</p>\n\n<pre><code>* left\n* right\n* center\n* justify\n* justify-all\n* start\n* end\n* inherit\n* match-parent\n* initial\n* unset.\n</code></pre>\n\n<p>max_rows : int, optional\n    Maximum number of rows to display in the console.\nmax_cols : int, optional  (Not supported in Dask)\n    Maximum number of columns to display in the console.\nshow_dimensions : bool, default False  (Not supported in Dask)\n    Display DataFrame dimensions (number of rows by number of columns).\ndecimal : str, default '.'  (Not supported in Dask)\n    Character recognized as decimal separator, e.g. ',' in Europe.</p>\n\n<p>bold_rows : bool, default True  (Not supported in Dask)\n    Make the row labels bold in the output.\nclasses : str or list or tuple, default None  (Not supported in Dask)\n    CSS class(es) to apply to the resulting html table.\nescape : bool, default True  (Not supported in Dask)\n    Convert the characters &lt;, &gt;, and &amp; to HTML-safe sequences.\nnotebook : {True, False}, default False  (Not supported in Dask)\n    Whether the generated HTML is for IPython Notebook.\nborder : int  (Not supported in Dask)\n    A <code>border=border</code> attribute is included in the opening\n    <code>&lt;table&gt;</code> tag. Default <code>pd.options.display.html.border</code>.\ntable_id : str, optional  (Not supported in Dask)\n    A css id is included in the opening <code>&lt;table&gt;</code> tag if specified.\nrender_links : bool, default False  (Not supported in Dask)\n    Convert URLs to HTML links.\nencoding : str, default \"utf-8\"  (Not supported in Dask)\n    Set character encoding.</p>\n\n<pre><code>.. versionadded:: 1.0\n</code></pre>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>str or None\n    If buf is None, returns the result as a string. Otherwise returns\n    None.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>to_string : Convert DataFrame to a string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">max_rows</span><span class=\"o\">=</span><span class=\"mi\">5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.from_dict": {"fullname": "etl.pkg.dataframe.DataFrame.from_dict", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.from_dict", "kind": "function", "doc": "<p>Construct a Dask DataFrame from a Python Dictionary</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>dask.dataframe.from_dict</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">data</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">npartitions</span>,</span><span class=\"param\">\t<span class=\"n\">orient</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.add": {"fullname": "etl.pkg.dataframe.DataFrame.add", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.add", "kind": "function", "doc": "<p>Get Addition of dataframe and other, element-wise (binary operator <code>add</code>).</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.add.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>dataframe + other</code>, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, <code>radd</code>.</p>\n\n<p>Among flexible wrappers (<code>add</code>, <code>sub</code>, <code>mul</code>, <code>div</code>, <code>mod</code>, <code>pow</code>) to\narithmetic operators: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>//</code>, <code>%</code>, <code>**</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : scalar, sequence, Series, dict or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns.\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    Result of the arithmetic operation.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>Mismatched indices will be unioned together.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                   <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      360</span>\n<span class=\"go\">triangle        3      180</span>\n<span class=\"go\">rectangle       4      360</span>\n</code></pre>\n</div>\n\n<p>Add a scalar with operator version which return the same\nresults.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          1      361</span>\n<span class=\"go\">triangle        4      181</span>\n<span class=\"go\">rectangle       5      361</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          1      361</span>\n<span class=\"go\">triangle        4      181</span>\n<span class=\"go\">rectangle       5      361</span>\n</code></pre>\n</div>\n\n<p>Divide by constant with reverse version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">div</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle        0.0     36.0</span>\n<span class=\"go\">triangle      0.3     18.0</span>\n<span class=\"go\">rectangle     0.4     36.0</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">rdiv</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles   degrees</span>\n<span class=\"go\">circle          inf  0.027778</span>\n<span class=\"go\">triangle   3.333333  0.055556</span>\n<span class=\"go\">rectangle  2.500000  0.027778</span>\n</code></pre>\n</div>\n\n<p>Subtract a list and Series by axis with operator version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">-</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      358</span>\n<span class=\"go\">triangle        2      178</span>\n<span class=\"go\">rectangle       3      358</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      358</span>\n<span class=\"go\">triangle        2      178</span>\n<span class=\"go\">rectangle       3      358</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">]),</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>       <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      359</span>\n<span class=\"go\">triangle        2      179</span>\n<span class=\"go\">rectangle       3      359</span>\n</code></pre>\n</div>\n\n<p>Multiply a dictionary by axis.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">            angles  degrees</span>\n<span class=\"go\">circle           0      720</span>\n<span class=\"go\">triangle         0      360</span>\n<span class=\"go\">rectangle        0      720</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">({</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">            angles  degrees</span>\n<span class=\"go\">circle           0        0</span>\n<span class=\"go\">triangle         6      360</span>\n<span class=\"go\">rectangle       12     1080</span>\n</code></pre>\n</div>\n\n<p>Multiply a DataFrame of different shape with operator version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]},</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles</span>\n<span class=\"go\">circle          0</span>\n<span class=\"go\">triangle        3</span>\n<span class=\"go\">rectangle       4</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">*</span> <span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      NaN</span>\n<span class=\"go\">triangle        9      NaN</span>\n<span class=\"go\">rectangle      16      NaN</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      0.0</span>\n<span class=\"go\">triangle        9      0.0</span>\n<span class=\"go\">rectangle      16      0.0</span>\n</code></pre>\n</div>\n\n<p>Divide by a MultiIndex by level.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                             <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">540</span><span class=\"p\">,</span> <span class=\"mi\">720</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                            <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                                   <span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                    <span class=\"s1\">&#39;square&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pentagon&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;hexagon&#39;</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles  degrees</span>\n<span class=\"go\">A circle          0      360</span>\n<span class=\"go\">  triangle        3      180</span>\n<span class=\"go\">  rectangle       4      360</span>\n<span class=\"go\">B square          4      360</span>\n<span class=\"go\">  pentagon        5      540</span>\n<span class=\"go\">  hexagon         6      720</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">div</span><span class=\"p\">(</span><span class=\"n\">df_multindex</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles  degrees</span>\n<span class=\"go\">A circle        NaN      1.0</span>\n<span class=\"go\">  triangle      1.0      1.0</span>\n<span class=\"go\">  rectangle     1.0      1.0</span>\n<span class=\"go\">B square        0.0      0.0</span>\n<span class=\"go\">  pentagon      0.0      0.0</span>\n<span class=\"go\">  hexagon       0.0      0.0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.sub": {"fullname": "etl.pkg.dataframe.DataFrame.sub", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.sub", "kind": "function", "doc": "<p>Get Subtraction of dataframe and other, element-wise (binary operator <code>sub</code>).</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.sub.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>dataframe - other</code>, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, <code>rsub</code>.</p>\n\n<p>Among flexible wrappers (<code>add</code>, <code>sub</code>, <code>mul</code>, <code>div</code>, <code>mod</code>, <code>pow</code>) to\narithmetic operators: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>//</code>, <code>%</code>, <code>**</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : scalar, sequence, Series, dict or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns.\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    Result of the arithmetic operation.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>Mismatched indices will be unioned together.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                   <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      360</span>\n<span class=\"go\">triangle        3      180</span>\n<span class=\"go\">rectangle       4      360</span>\n</code></pre>\n</div>\n\n<p>Add a scalar with operator version which return the same\nresults.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          1      361</span>\n<span class=\"go\">triangle        4      181</span>\n<span class=\"go\">rectangle       5      361</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          1      361</span>\n<span class=\"go\">triangle        4      181</span>\n<span class=\"go\">rectangle       5      361</span>\n</code></pre>\n</div>\n\n<p>Divide by constant with reverse version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">div</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle        0.0     36.0</span>\n<span class=\"go\">triangle      0.3     18.0</span>\n<span class=\"go\">rectangle     0.4     36.0</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">rdiv</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles   degrees</span>\n<span class=\"go\">circle          inf  0.027778</span>\n<span class=\"go\">triangle   3.333333  0.055556</span>\n<span class=\"go\">rectangle  2.500000  0.027778</span>\n</code></pre>\n</div>\n\n<p>Subtract a list and Series by axis with operator version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">-</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      358</span>\n<span class=\"go\">triangle        2      178</span>\n<span class=\"go\">rectangle       3      358</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      358</span>\n<span class=\"go\">triangle        2      178</span>\n<span class=\"go\">rectangle       3      358</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">]),</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>       <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      359</span>\n<span class=\"go\">triangle        2      179</span>\n<span class=\"go\">rectangle       3      359</span>\n</code></pre>\n</div>\n\n<p>Multiply a dictionary by axis.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">            angles  degrees</span>\n<span class=\"go\">circle           0      720</span>\n<span class=\"go\">triangle         0      360</span>\n<span class=\"go\">rectangle        0      720</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">({</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">            angles  degrees</span>\n<span class=\"go\">circle           0        0</span>\n<span class=\"go\">triangle         6      360</span>\n<span class=\"go\">rectangle       12     1080</span>\n</code></pre>\n</div>\n\n<p>Multiply a DataFrame of different shape with operator version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]},</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles</span>\n<span class=\"go\">circle          0</span>\n<span class=\"go\">triangle        3</span>\n<span class=\"go\">rectangle       4</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">*</span> <span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      NaN</span>\n<span class=\"go\">triangle        9      NaN</span>\n<span class=\"go\">rectangle      16      NaN</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      0.0</span>\n<span class=\"go\">triangle        9      0.0</span>\n<span class=\"go\">rectangle      16      0.0</span>\n</code></pre>\n</div>\n\n<p>Divide by a MultiIndex by level.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                             <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">540</span><span class=\"p\">,</span> <span class=\"mi\">720</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                            <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                                   <span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                    <span class=\"s1\">&#39;square&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pentagon&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;hexagon&#39;</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles  degrees</span>\n<span class=\"go\">A circle          0      360</span>\n<span class=\"go\">  triangle        3      180</span>\n<span class=\"go\">  rectangle       4      360</span>\n<span class=\"go\">B square          4      360</span>\n<span class=\"go\">  pentagon        5      540</span>\n<span class=\"go\">  hexagon         6      720</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">div</span><span class=\"p\">(</span><span class=\"n\">df_multindex</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles  degrees</span>\n<span class=\"go\">A circle        NaN      1.0</span>\n<span class=\"go\">  triangle      1.0      1.0</span>\n<span class=\"go\">  rectangle     1.0      1.0</span>\n<span class=\"go\">B square        0.0      0.0</span>\n<span class=\"go\">  pentagon      0.0      0.0</span>\n<span class=\"go\">  hexagon       0.0      0.0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.mul": {"fullname": "etl.pkg.dataframe.DataFrame.mul", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.mul", "kind": "function", "doc": "<p>Get Multiplication of dataframe and other, element-wise (binary operator <code>mul</code>).</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.mul.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>dataframe * other</code>, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, <code>rmul</code>.</p>\n\n<p>Among flexible wrappers (<code>add</code>, <code>sub</code>, <code>mul</code>, <code>div</code>, <code>mod</code>, <code>pow</code>) to\narithmetic operators: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>//</code>, <code>%</code>, <code>**</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : scalar, sequence, Series, dict or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns.\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    Result of the arithmetic operation.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>Mismatched indices will be unioned together.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                   <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      360</span>\n<span class=\"go\">triangle        3      180</span>\n<span class=\"go\">rectangle       4      360</span>\n</code></pre>\n</div>\n\n<p>Add a scalar with operator version which return the same\nresults.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          1      361</span>\n<span class=\"go\">triangle        4      181</span>\n<span class=\"go\">rectangle       5      361</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          1      361</span>\n<span class=\"go\">triangle        4      181</span>\n<span class=\"go\">rectangle       5      361</span>\n</code></pre>\n</div>\n\n<p>Divide by constant with reverse version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">div</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle        0.0     36.0</span>\n<span class=\"go\">triangle      0.3     18.0</span>\n<span class=\"go\">rectangle     0.4     36.0</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">rdiv</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles   degrees</span>\n<span class=\"go\">circle          inf  0.027778</span>\n<span class=\"go\">triangle   3.333333  0.055556</span>\n<span class=\"go\">rectangle  2.500000  0.027778</span>\n</code></pre>\n</div>\n\n<p>Subtract a list and Series by axis with operator version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">-</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      358</span>\n<span class=\"go\">triangle        2      178</span>\n<span class=\"go\">rectangle       3      358</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      358</span>\n<span class=\"go\">triangle        2      178</span>\n<span class=\"go\">rectangle       3      358</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">]),</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>       <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      359</span>\n<span class=\"go\">triangle        2      179</span>\n<span class=\"go\">rectangle       3      359</span>\n</code></pre>\n</div>\n\n<p>Multiply a dictionary by axis.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">            angles  degrees</span>\n<span class=\"go\">circle           0      720</span>\n<span class=\"go\">triangle         0      360</span>\n<span class=\"go\">rectangle        0      720</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">({</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">            angles  degrees</span>\n<span class=\"go\">circle           0        0</span>\n<span class=\"go\">triangle         6      360</span>\n<span class=\"go\">rectangle       12     1080</span>\n</code></pre>\n</div>\n\n<p>Multiply a DataFrame of different shape with operator version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]},</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles</span>\n<span class=\"go\">circle          0</span>\n<span class=\"go\">triangle        3</span>\n<span class=\"go\">rectangle       4</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">*</span> <span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      NaN</span>\n<span class=\"go\">triangle        9      NaN</span>\n<span class=\"go\">rectangle      16      NaN</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      0.0</span>\n<span class=\"go\">triangle        9      0.0</span>\n<span class=\"go\">rectangle      16      0.0</span>\n</code></pre>\n</div>\n\n<p>Divide by a MultiIndex by level.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                             <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">540</span><span class=\"p\">,</span> <span class=\"mi\">720</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                            <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                                   <span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                    <span class=\"s1\">&#39;square&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pentagon&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;hexagon&#39;</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles  degrees</span>\n<span class=\"go\">A circle          0      360</span>\n<span class=\"go\">  triangle        3      180</span>\n<span class=\"go\">  rectangle       4      360</span>\n<span class=\"go\">B square          4      360</span>\n<span class=\"go\">  pentagon        5      540</span>\n<span class=\"go\">  hexagon         6      720</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">div</span><span class=\"p\">(</span><span class=\"n\">df_multindex</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles  degrees</span>\n<span class=\"go\">A circle        NaN      1.0</span>\n<span class=\"go\">  triangle      1.0      1.0</span>\n<span class=\"go\">  rectangle     1.0      1.0</span>\n<span class=\"go\">B square        0.0      0.0</span>\n<span class=\"go\">  pentagon      0.0      0.0</span>\n<span class=\"go\">  hexagon       0.0      0.0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.div": {"fullname": "etl.pkg.dataframe.DataFrame.div", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.div", "kind": "function", "doc": "<p>Get Floating division of dataframe and other, element-wise (binary operator <code>truediv</code>).</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.div.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>dataframe / other</code>, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, <code>rtruediv</code>.</p>\n\n<p>Among flexible wrappers (<code>add</code>, <code>sub</code>, <code>mul</code>, <code>div</code>, <code>mod</code>, <code>pow</code>) to\narithmetic operators: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>//</code>, <code>%</code>, <code>**</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : scalar, sequence, Series, dict or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns.\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    Result of the arithmetic operation.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>Mismatched indices will be unioned together.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                   <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      360</span>\n<span class=\"go\">triangle        3      180</span>\n<span class=\"go\">rectangle       4      360</span>\n</code></pre>\n</div>\n\n<p>Add a scalar with operator version which return the same\nresults.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          1      361</span>\n<span class=\"go\">triangle        4      181</span>\n<span class=\"go\">rectangle       5      361</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          1      361</span>\n<span class=\"go\">triangle        4      181</span>\n<span class=\"go\">rectangle       5      361</span>\n</code></pre>\n</div>\n\n<p>Divide by constant with reverse version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">div</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle        0.0     36.0</span>\n<span class=\"go\">triangle      0.3     18.0</span>\n<span class=\"go\">rectangle     0.4     36.0</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">rdiv</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles   degrees</span>\n<span class=\"go\">circle          inf  0.027778</span>\n<span class=\"go\">triangle   3.333333  0.055556</span>\n<span class=\"go\">rectangle  2.500000  0.027778</span>\n</code></pre>\n</div>\n\n<p>Subtract a list and Series by axis with operator version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">-</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      358</span>\n<span class=\"go\">triangle        2      178</span>\n<span class=\"go\">rectangle       3      358</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      358</span>\n<span class=\"go\">triangle        2      178</span>\n<span class=\"go\">rectangle       3      358</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">]),</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>       <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      359</span>\n<span class=\"go\">triangle        2      179</span>\n<span class=\"go\">rectangle       3      359</span>\n</code></pre>\n</div>\n\n<p>Multiply a dictionary by axis.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">            angles  degrees</span>\n<span class=\"go\">circle           0      720</span>\n<span class=\"go\">triangle         0      360</span>\n<span class=\"go\">rectangle        0      720</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">({</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">            angles  degrees</span>\n<span class=\"go\">circle           0        0</span>\n<span class=\"go\">triangle         6      360</span>\n<span class=\"go\">rectangle       12     1080</span>\n</code></pre>\n</div>\n\n<p>Multiply a DataFrame of different shape with operator version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]},</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles</span>\n<span class=\"go\">circle          0</span>\n<span class=\"go\">triangle        3</span>\n<span class=\"go\">rectangle       4</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">*</span> <span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      NaN</span>\n<span class=\"go\">triangle        9      NaN</span>\n<span class=\"go\">rectangle      16      NaN</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      0.0</span>\n<span class=\"go\">triangle        9      0.0</span>\n<span class=\"go\">rectangle      16      0.0</span>\n</code></pre>\n</div>\n\n<p>Divide by a MultiIndex by level.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                             <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">540</span><span class=\"p\">,</span> <span class=\"mi\">720</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                            <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                                   <span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                    <span class=\"s1\">&#39;square&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pentagon&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;hexagon&#39;</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles  degrees</span>\n<span class=\"go\">A circle          0      360</span>\n<span class=\"go\">  triangle        3      180</span>\n<span class=\"go\">  rectangle       4      360</span>\n<span class=\"go\">B square          4      360</span>\n<span class=\"go\">  pentagon        5      540</span>\n<span class=\"go\">  hexagon         6      720</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">div</span><span class=\"p\">(</span><span class=\"n\">df_multindex</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles  degrees</span>\n<span class=\"go\">A circle        NaN      1.0</span>\n<span class=\"go\">  triangle      1.0      1.0</span>\n<span class=\"go\">  rectangle     1.0      1.0</span>\n<span class=\"go\">B square        0.0      0.0</span>\n<span class=\"go\">  pentagon      0.0      0.0</span>\n<span class=\"go\">  hexagon       0.0      0.0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.divide": {"fullname": "etl.pkg.dataframe.DataFrame.divide", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.divide", "kind": "function", "doc": "<p>Get Floating division of dataframe and other, element-wise (binary operator <code>truediv</code>).</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.divide.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>dataframe / other</code>, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, <code>rtruediv</code>.</p>\n\n<p>Among flexible wrappers (<code>add</code>, <code>sub</code>, <code>mul</code>, <code>div</code>, <code>mod</code>, <code>pow</code>) to\narithmetic operators: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>//</code>, <code>%</code>, <code>**</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : scalar, sequence, Series, dict or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns.\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    Result of the arithmetic operation.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>Mismatched indices will be unioned together.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                   <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      360</span>\n<span class=\"go\">triangle        3      180</span>\n<span class=\"go\">rectangle       4      360</span>\n</code></pre>\n</div>\n\n<p>Add a scalar with operator version which return the same\nresults.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          1      361</span>\n<span class=\"go\">triangle        4      181</span>\n<span class=\"go\">rectangle       5      361</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          1      361</span>\n<span class=\"go\">triangle        4      181</span>\n<span class=\"go\">rectangle       5      361</span>\n</code></pre>\n</div>\n\n<p>Divide by constant with reverse version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">div</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle        0.0     36.0</span>\n<span class=\"go\">triangle      0.3     18.0</span>\n<span class=\"go\">rectangle     0.4     36.0</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">rdiv</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles   degrees</span>\n<span class=\"go\">circle          inf  0.027778</span>\n<span class=\"go\">triangle   3.333333  0.055556</span>\n<span class=\"go\">rectangle  2.500000  0.027778</span>\n</code></pre>\n</div>\n\n<p>Subtract a list and Series by axis with operator version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">-</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      358</span>\n<span class=\"go\">triangle        2      178</span>\n<span class=\"go\">rectangle       3      358</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      358</span>\n<span class=\"go\">triangle        2      178</span>\n<span class=\"go\">rectangle       3      358</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">]),</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>       <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      359</span>\n<span class=\"go\">triangle        2      179</span>\n<span class=\"go\">rectangle       3      359</span>\n</code></pre>\n</div>\n\n<p>Multiply a dictionary by axis.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">            angles  degrees</span>\n<span class=\"go\">circle           0      720</span>\n<span class=\"go\">triangle         0      360</span>\n<span class=\"go\">rectangle        0      720</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">({</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">            angles  degrees</span>\n<span class=\"go\">circle           0        0</span>\n<span class=\"go\">triangle         6      360</span>\n<span class=\"go\">rectangle       12     1080</span>\n</code></pre>\n</div>\n\n<p>Multiply a DataFrame of different shape with operator version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]},</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles</span>\n<span class=\"go\">circle          0</span>\n<span class=\"go\">triangle        3</span>\n<span class=\"go\">rectangle       4</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">*</span> <span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      NaN</span>\n<span class=\"go\">triangle        9      NaN</span>\n<span class=\"go\">rectangle      16      NaN</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      0.0</span>\n<span class=\"go\">triangle        9      0.0</span>\n<span class=\"go\">rectangle      16      0.0</span>\n</code></pre>\n</div>\n\n<p>Divide by a MultiIndex by level.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                             <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">540</span><span class=\"p\">,</span> <span class=\"mi\">720</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                            <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                                   <span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                    <span class=\"s1\">&#39;square&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pentagon&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;hexagon&#39;</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles  degrees</span>\n<span class=\"go\">A circle          0      360</span>\n<span class=\"go\">  triangle        3      180</span>\n<span class=\"go\">  rectangle       4      360</span>\n<span class=\"go\">B square          4      360</span>\n<span class=\"go\">  pentagon        5      540</span>\n<span class=\"go\">  hexagon         6      720</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">div</span><span class=\"p\">(</span><span class=\"n\">df_multindex</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles  degrees</span>\n<span class=\"go\">A circle        NaN      1.0</span>\n<span class=\"go\">  triangle      1.0      1.0</span>\n<span class=\"go\">  rectangle     1.0      1.0</span>\n<span class=\"go\">B square        0.0      0.0</span>\n<span class=\"go\">  pentagon      0.0      0.0</span>\n<span class=\"go\">  hexagon       0.0      0.0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.truediv": {"fullname": "etl.pkg.dataframe.DataFrame.truediv", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.truediv", "kind": "function", "doc": "<p>Get Floating division of dataframe and other, element-wise (binary operator <code>truediv</code>).</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.truediv.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>dataframe / other</code>, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, <code>rtruediv</code>.</p>\n\n<p>Among flexible wrappers (<code>add</code>, <code>sub</code>, <code>mul</code>, <code>div</code>, <code>mod</code>, <code>pow</code>) to\narithmetic operators: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>//</code>, <code>%</code>, <code>**</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : scalar, sequence, Series, dict or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns.\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    Result of the arithmetic operation.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>Mismatched indices will be unioned together.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                   <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      360</span>\n<span class=\"go\">triangle        3      180</span>\n<span class=\"go\">rectangle       4      360</span>\n</code></pre>\n</div>\n\n<p>Add a scalar with operator version which return the same\nresults.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          1      361</span>\n<span class=\"go\">triangle        4      181</span>\n<span class=\"go\">rectangle       5      361</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          1      361</span>\n<span class=\"go\">triangle        4      181</span>\n<span class=\"go\">rectangle       5      361</span>\n</code></pre>\n</div>\n\n<p>Divide by constant with reverse version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">div</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle        0.0     36.0</span>\n<span class=\"go\">triangle      0.3     18.0</span>\n<span class=\"go\">rectangle     0.4     36.0</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">rdiv</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles   degrees</span>\n<span class=\"go\">circle          inf  0.027778</span>\n<span class=\"go\">triangle   3.333333  0.055556</span>\n<span class=\"go\">rectangle  2.500000  0.027778</span>\n</code></pre>\n</div>\n\n<p>Subtract a list and Series by axis with operator version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">-</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      358</span>\n<span class=\"go\">triangle        2      178</span>\n<span class=\"go\">rectangle       3      358</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      358</span>\n<span class=\"go\">triangle        2      178</span>\n<span class=\"go\">rectangle       3      358</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">]),</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>       <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      359</span>\n<span class=\"go\">triangle        2      179</span>\n<span class=\"go\">rectangle       3      359</span>\n</code></pre>\n</div>\n\n<p>Multiply a dictionary by axis.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">            angles  degrees</span>\n<span class=\"go\">circle           0      720</span>\n<span class=\"go\">triangle         0      360</span>\n<span class=\"go\">rectangle        0      720</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">({</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">            angles  degrees</span>\n<span class=\"go\">circle           0        0</span>\n<span class=\"go\">triangle         6      360</span>\n<span class=\"go\">rectangle       12     1080</span>\n</code></pre>\n</div>\n\n<p>Multiply a DataFrame of different shape with operator version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]},</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles</span>\n<span class=\"go\">circle          0</span>\n<span class=\"go\">triangle        3</span>\n<span class=\"go\">rectangle       4</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">*</span> <span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      NaN</span>\n<span class=\"go\">triangle        9      NaN</span>\n<span class=\"go\">rectangle      16      NaN</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      0.0</span>\n<span class=\"go\">triangle        9      0.0</span>\n<span class=\"go\">rectangle      16      0.0</span>\n</code></pre>\n</div>\n\n<p>Divide by a MultiIndex by level.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                             <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">540</span><span class=\"p\">,</span> <span class=\"mi\">720</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                            <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                                   <span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                    <span class=\"s1\">&#39;square&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pentagon&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;hexagon&#39;</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles  degrees</span>\n<span class=\"go\">A circle          0      360</span>\n<span class=\"go\">  triangle        3      180</span>\n<span class=\"go\">  rectangle       4      360</span>\n<span class=\"go\">B square          4      360</span>\n<span class=\"go\">  pentagon        5      540</span>\n<span class=\"go\">  hexagon         6      720</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">div</span><span class=\"p\">(</span><span class=\"n\">df_multindex</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles  degrees</span>\n<span class=\"go\">A circle        NaN      1.0</span>\n<span class=\"go\">  triangle      1.0      1.0</span>\n<span class=\"go\">  rectangle     1.0      1.0</span>\n<span class=\"go\">B square        0.0      0.0</span>\n<span class=\"go\">  pentagon      0.0      0.0</span>\n<span class=\"go\">  hexagon       0.0      0.0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.floordiv": {"fullname": "etl.pkg.dataframe.DataFrame.floordiv", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.floordiv", "kind": "function", "doc": "<p>Get Integer division of dataframe and other, element-wise (binary operator <code>floordiv</code>).</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.floordiv.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>dataframe // other</code>, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, <code>rfloordiv</code>.</p>\n\n<p>Among flexible wrappers (<code>add</code>, <code>sub</code>, <code>mul</code>, <code>div</code>, <code>mod</code>, <code>pow</code>) to\narithmetic operators: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>//</code>, <code>%</code>, <code>**</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : scalar, sequence, Series, dict or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns.\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    Result of the arithmetic operation.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>Mismatched indices will be unioned together.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                   <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      360</span>\n<span class=\"go\">triangle        3      180</span>\n<span class=\"go\">rectangle       4      360</span>\n</code></pre>\n</div>\n\n<p>Add a scalar with operator version which return the same\nresults.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          1      361</span>\n<span class=\"go\">triangle        4      181</span>\n<span class=\"go\">rectangle       5      361</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          1      361</span>\n<span class=\"go\">triangle        4      181</span>\n<span class=\"go\">rectangle       5      361</span>\n</code></pre>\n</div>\n\n<p>Divide by constant with reverse version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">div</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle        0.0     36.0</span>\n<span class=\"go\">triangle      0.3     18.0</span>\n<span class=\"go\">rectangle     0.4     36.0</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">rdiv</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles   degrees</span>\n<span class=\"go\">circle          inf  0.027778</span>\n<span class=\"go\">triangle   3.333333  0.055556</span>\n<span class=\"go\">rectangle  2.500000  0.027778</span>\n</code></pre>\n</div>\n\n<p>Subtract a list and Series by axis with operator version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">-</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      358</span>\n<span class=\"go\">triangle        2      178</span>\n<span class=\"go\">rectangle       3      358</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      358</span>\n<span class=\"go\">triangle        2      178</span>\n<span class=\"go\">rectangle       3      358</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">]),</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>       <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      359</span>\n<span class=\"go\">triangle        2      179</span>\n<span class=\"go\">rectangle       3      359</span>\n</code></pre>\n</div>\n\n<p>Multiply a dictionary by axis.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">            angles  degrees</span>\n<span class=\"go\">circle           0      720</span>\n<span class=\"go\">triangle         0      360</span>\n<span class=\"go\">rectangle        0      720</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">({</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">            angles  degrees</span>\n<span class=\"go\">circle           0        0</span>\n<span class=\"go\">triangle         6      360</span>\n<span class=\"go\">rectangle       12     1080</span>\n</code></pre>\n</div>\n\n<p>Multiply a DataFrame of different shape with operator version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]},</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles</span>\n<span class=\"go\">circle          0</span>\n<span class=\"go\">triangle        3</span>\n<span class=\"go\">rectangle       4</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">*</span> <span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      NaN</span>\n<span class=\"go\">triangle        9      NaN</span>\n<span class=\"go\">rectangle      16      NaN</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      0.0</span>\n<span class=\"go\">triangle        9      0.0</span>\n<span class=\"go\">rectangle      16      0.0</span>\n</code></pre>\n</div>\n\n<p>Divide by a MultiIndex by level.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                             <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">540</span><span class=\"p\">,</span> <span class=\"mi\">720</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                            <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                                   <span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                    <span class=\"s1\">&#39;square&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pentagon&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;hexagon&#39;</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles  degrees</span>\n<span class=\"go\">A circle          0      360</span>\n<span class=\"go\">  triangle        3      180</span>\n<span class=\"go\">  rectangle       4      360</span>\n<span class=\"go\">B square          4      360</span>\n<span class=\"go\">  pentagon        5      540</span>\n<span class=\"go\">  hexagon         6      720</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">div</span><span class=\"p\">(</span><span class=\"n\">df_multindex</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles  degrees</span>\n<span class=\"go\">A circle        NaN      1.0</span>\n<span class=\"go\">  triangle      1.0      1.0</span>\n<span class=\"go\">  rectangle     1.0      1.0</span>\n<span class=\"go\">B square        0.0      0.0</span>\n<span class=\"go\">  pentagon      0.0      0.0</span>\n<span class=\"go\">  hexagon       0.0      0.0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.mod": {"fullname": "etl.pkg.dataframe.DataFrame.mod", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.mod", "kind": "function", "doc": "<p>Get Modulo of dataframe and other, element-wise (binary operator <code>mod</code>).</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.mod.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>dataframe % other</code>, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, <code>rmod</code>.</p>\n\n<p>Among flexible wrappers (<code>add</code>, <code>sub</code>, <code>mul</code>, <code>div</code>, <code>mod</code>, <code>pow</code>) to\narithmetic operators: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>//</code>, <code>%</code>, <code>**</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : scalar, sequence, Series, dict or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns.\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    Result of the arithmetic operation.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>Mismatched indices will be unioned together.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                   <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      360</span>\n<span class=\"go\">triangle        3      180</span>\n<span class=\"go\">rectangle       4      360</span>\n</code></pre>\n</div>\n\n<p>Add a scalar with operator version which return the same\nresults.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          1      361</span>\n<span class=\"go\">triangle        4      181</span>\n<span class=\"go\">rectangle       5      361</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          1      361</span>\n<span class=\"go\">triangle        4      181</span>\n<span class=\"go\">rectangle       5      361</span>\n</code></pre>\n</div>\n\n<p>Divide by constant with reverse version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">div</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle        0.0     36.0</span>\n<span class=\"go\">triangle      0.3     18.0</span>\n<span class=\"go\">rectangle     0.4     36.0</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">rdiv</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles   degrees</span>\n<span class=\"go\">circle          inf  0.027778</span>\n<span class=\"go\">triangle   3.333333  0.055556</span>\n<span class=\"go\">rectangle  2.500000  0.027778</span>\n</code></pre>\n</div>\n\n<p>Subtract a list and Series by axis with operator version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">-</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      358</span>\n<span class=\"go\">triangle        2      178</span>\n<span class=\"go\">rectangle       3      358</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      358</span>\n<span class=\"go\">triangle        2      178</span>\n<span class=\"go\">rectangle       3      358</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">]),</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>       <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      359</span>\n<span class=\"go\">triangle        2      179</span>\n<span class=\"go\">rectangle       3      359</span>\n</code></pre>\n</div>\n\n<p>Multiply a dictionary by axis.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">            angles  degrees</span>\n<span class=\"go\">circle           0      720</span>\n<span class=\"go\">triangle         0      360</span>\n<span class=\"go\">rectangle        0      720</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">({</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">            angles  degrees</span>\n<span class=\"go\">circle           0        0</span>\n<span class=\"go\">triangle         6      360</span>\n<span class=\"go\">rectangle       12     1080</span>\n</code></pre>\n</div>\n\n<p>Multiply a DataFrame of different shape with operator version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]},</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles</span>\n<span class=\"go\">circle          0</span>\n<span class=\"go\">triangle        3</span>\n<span class=\"go\">rectangle       4</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">*</span> <span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      NaN</span>\n<span class=\"go\">triangle        9      NaN</span>\n<span class=\"go\">rectangle      16      NaN</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      0.0</span>\n<span class=\"go\">triangle        9      0.0</span>\n<span class=\"go\">rectangle      16      0.0</span>\n</code></pre>\n</div>\n\n<p>Divide by a MultiIndex by level.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                             <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">540</span><span class=\"p\">,</span> <span class=\"mi\">720</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                            <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                                   <span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                    <span class=\"s1\">&#39;square&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pentagon&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;hexagon&#39;</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles  degrees</span>\n<span class=\"go\">A circle          0      360</span>\n<span class=\"go\">  triangle        3      180</span>\n<span class=\"go\">  rectangle       4      360</span>\n<span class=\"go\">B square          4      360</span>\n<span class=\"go\">  pentagon        5      540</span>\n<span class=\"go\">  hexagon         6      720</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">div</span><span class=\"p\">(</span><span class=\"n\">df_multindex</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles  degrees</span>\n<span class=\"go\">A circle        NaN      1.0</span>\n<span class=\"go\">  triangle      1.0      1.0</span>\n<span class=\"go\">  rectangle     1.0      1.0</span>\n<span class=\"go\">B square        0.0      0.0</span>\n<span class=\"go\">  pentagon      0.0      0.0</span>\n<span class=\"go\">  hexagon       0.0      0.0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.pow": {"fullname": "etl.pkg.dataframe.DataFrame.pow", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.pow", "kind": "function", "doc": "<p>Get Exponential power of dataframe and other, element-wise (binary operator <code>pow</code>).</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.pow.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>dataframe ** other</code>, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, <code>rpow</code>.</p>\n\n<p>Among flexible wrappers (<code>add</code>, <code>sub</code>, <code>mul</code>, <code>div</code>, <code>mod</code>, <code>pow</code>) to\narithmetic operators: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>//</code>, <code>%</code>, <code>**</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : scalar, sequence, Series, dict or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns.\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    Result of the arithmetic operation.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>Mismatched indices will be unioned together.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                   <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      360</span>\n<span class=\"go\">triangle        3      180</span>\n<span class=\"go\">rectangle       4      360</span>\n</code></pre>\n</div>\n\n<p>Add a scalar with operator version which return the same\nresults.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          1      361</span>\n<span class=\"go\">triangle        4      181</span>\n<span class=\"go\">rectangle       5      361</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          1      361</span>\n<span class=\"go\">triangle        4      181</span>\n<span class=\"go\">rectangle       5      361</span>\n</code></pre>\n</div>\n\n<p>Divide by constant with reverse version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">div</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle        0.0     36.0</span>\n<span class=\"go\">triangle      0.3     18.0</span>\n<span class=\"go\">rectangle     0.4     36.0</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">rdiv</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles   degrees</span>\n<span class=\"go\">circle          inf  0.027778</span>\n<span class=\"go\">triangle   3.333333  0.055556</span>\n<span class=\"go\">rectangle  2.500000  0.027778</span>\n</code></pre>\n</div>\n\n<p>Subtract a list and Series by axis with operator version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">-</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      358</span>\n<span class=\"go\">triangle        2      178</span>\n<span class=\"go\">rectangle       3      358</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      358</span>\n<span class=\"go\">triangle        2      178</span>\n<span class=\"go\">rectangle       3      358</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">]),</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>       <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      359</span>\n<span class=\"go\">triangle        2      179</span>\n<span class=\"go\">rectangle       3      359</span>\n</code></pre>\n</div>\n\n<p>Multiply a dictionary by axis.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">            angles  degrees</span>\n<span class=\"go\">circle           0      720</span>\n<span class=\"go\">triangle         0      360</span>\n<span class=\"go\">rectangle        0      720</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">({</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">            angles  degrees</span>\n<span class=\"go\">circle           0        0</span>\n<span class=\"go\">triangle         6      360</span>\n<span class=\"go\">rectangle       12     1080</span>\n</code></pre>\n</div>\n\n<p>Multiply a DataFrame of different shape with operator version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]},</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles</span>\n<span class=\"go\">circle          0</span>\n<span class=\"go\">triangle        3</span>\n<span class=\"go\">rectangle       4</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">*</span> <span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      NaN</span>\n<span class=\"go\">triangle        9      NaN</span>\n<span class=\"go\">rectangle      16      NaN</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      0.0</span>\n<span class=\"go\">triangle        9      0.0</span>\n<span class=\"go\">rectangle      16      0.0</span>\n</code></pre>\n</div>\n\n<p>Divide by a MultiIndex by level.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                             <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">540</span><span class=\"p\">,</span> <span class=\"mi\">720</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                            <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                                   <span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                    <span class=\"s1\">&#39;square&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pentagon&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;hexagon&#39;</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles  degrees</span>\n<span class=\"go\">A circle          0      360</span>\n<span class=\"go\">  triangle        3      180</span>\n<span class=\"go\">  rectangle       4      360</span>\n<span class=\"go\">B square          4      360</span>\n<span class=\"go\">  pentagon        5      540</span>\n<span class=\"go\">  hexagon         6      720</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">div</span><span class=\"p\">(</span><span class=\"n\">df_multindex</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles  degrees</span>\n<span class=\"go\">A circle        NaN      1.0</span>\n<span class=\"go\">  triangle      1.0      1.0</span>\n<span class=\"go\">  rectangle     1.0      1.0</span>\n<span class=\"go\">B square        0.0      0.0</span>\n<span class=\"go\">  pentagon      0.0      0.0</span>\n<span class=\"go\">  hexagon       0.0      0.0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.radd": {"fullname": "etl.pkg.dataframe.DataFrame.radd", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.radd", "kind": "function", "doc": "<p>Get Addition of dataframe and other, element-wise (binary operator <code>radd</code>).</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.radd.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>other + dataframe</code>, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, <code>add</code>.</p>\n\n<p>Among flexible wrappers (<code>add</code>, <code>sub</code>, <code>mul</code>, <code>div</code>, <code>mod</code>, <code>pow</code>) to\narithmetic operators: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>//</code>, <code>%</code>, <code>**</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : scalar, sequence, Series, dict or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns.\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    Result of the arithmetic operation.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>Mismatched indices will be unioned together.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                   <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      360</span>\n<span class=\"go\">triangle        3      180</span>\n<span class=\"go\">rectangle       4      360</span>\n</code></pre>\n</div>\n\n<p>Add a scalar with operator version which return the same\nresults.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          1      361</span>\n<span class=\"go\">triangle        4      181</span>\n<span class=\"go\">rectangle       5      361</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          1      361</span>\n<span class=\"go\">triangle        4      181</span>\n<span class=\"go\">rectangle       5      361</span>\n</code></pre>\n</div>\n\n<p>Divide by constant with reverse version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">div</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle        0.0     36.0</span>\n<span class=\"go\">triangle      0.3     18.0</span>\n<span class=\"go\">rectangle     0.4     36.0</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">rdiv</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles   degrees</span>\n<span class=\"go\">circle          inf  0.027778</span>\n<span class=\"go\">triangle   3.333333  0.055556</span>\n<span class=\"go\">rectangle  2.500000  0.027778</span>\n</code></pre>\n</div>\n\n<p>Subtract a list and Series by axis with operator version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">-</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      358</span>\n<span class=\"go\">triangle        2      178</span>\n<span class=\"go\">rectangle       3      358</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      358</span>\n<span class=\"go\">triangle        2      178</span>\n<span class=\"go\">rectangle       3      358</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">]),</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>       <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      359</span>\n<span class=\"go\">triangle        2      179</span>\n<span class=\"go\">rectangle       3      359</span>\n</code></pre>\n</div>\n\n<p>Multiply a dictionary by axis.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">            angles  degrees</span>\n<span class=\"go\">circle           0      720</span>\n<span class=\"go\">triangle         0      360</span>\n<span class=\"go\">rectangle        0      720</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">({</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">            angles  degrees</span>\n<span class=\"go\">circle           0        0</span>\n<span class=\"go\">triangle         6      360</span>\n<span class=\"go\">rectangle       12     1080</span>\n</code></pre>\n</div>\n\n<p>Multiply a DataFrame of different shape with operator version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]},</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles</span>\n<span class=\"go\">circle          0</span>\n<span class=\"go\">triangle        3</span>\n<span class=\"go\">rectangle       4</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">*</span> <span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      NaN</span>\n<span class=\"go\">triangle        9      NaN</span>\n<span class=\"go\">rectangle      16      NaN</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      0.0</span>\n<span class=\"go\">triangle        9      0.0</span>\n<span class=\"go\">rectangle      16      0.0</span>\n</code></pre>\n</div>\n\n<p>Divide by a MultiIndex by level.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                             <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">540</span><span class=\"p\">,</span> <span class=\"mi\">720</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                            <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                                   <span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                    <span class=\"s1\">&#39;square&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pentagon&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;hexagon&#39;</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles  degrees</span>\n<span class=\"go\">A circle          0      360</span>\n<span class=\"go\">  triangle        3      180</span>\n<span class=\"go\">  rectangle       4      360</span>\n<span class=\"go\">B square          4      360</span>\n<span class=\"go\">  pentagon        5      540</span>\n<span class=\"go\">  hexagon         6      720</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">div</span><span class=\"p\">(</span><span class=\"n\">df_multindex</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles  degrees</span>\n<span class=\"go\">A circle        NaN      1.0</span>\n<span class=\"go\">  triangle      1.0      1.0</span>\n<span class=\"go\">  rectangle     1.0      1.0</span>\n<span class=\"go\">B square        0.0      0.0</span>\n<span class=\"go\">  pentagon      0.0      0.0</span>\n<span class=\"go\">  hexagon       0.0      0.0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.rsub": {"fullname": "etl.pkg.dataframe.DataFrame.rsub", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.rsub", "kind": "function", "doc": "<p>Get Subtraction of dataframe and other, element-wise (binary operator <code>rsub</code>).</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.rsub.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>other - dataframe</code>, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, <code>sub</code>.</p>\n\n<p>Among flexible wrappers (<code>add</code>, <code>sub</code>, <code>mul</code>, <code>div</code>, <code>mod</code>, <code>pow</code>) to\narithmetic operators: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>//</code>, <code>%</code>, <code>**</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : scalar, sequence, Series, dict or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns.\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    Result of the arithmetic operation.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>Mismatched indices will be unioned together.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                   <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      360</span>\n<span class=\"go\">triangle        3      180</span>\n<span class=\"go\">rectangle       4      360</span>\n</code></pre>\n</div>\n\n<p>Add a scalar with operator version which return the same\nresults.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          1      361</span>\n<span class=\"go\">triangle        4      181</span>\n<span class=\"go\">rectangle       5      361</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          1      361</span>\n<span class=\"go\">triangle        4      181</span>\n<span class=\"go\">rectangle       5      361</span>\n</code></pre>\n</div>\n\n<p>Divide by constant with reverse version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">div</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle        0.0     36.0</span>\n<span class=\"go\">triangle      0.3     18.0</span>\n<span class=\"go\">rectangle     0.4     36.0</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">rdiv</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles   degrees</span>\n<span class=\"go\">circle          inf  0.027778</span>\n<span class=\"go\">triangle   3.333333  0.055556</span>\n<span class=\"go\">rectangle  2.500000  0.027778</span>\n</code></pre>\n</div>\n\n<p>Subtract a list and Series by axis with operator version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">-</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      358</span>\n<span class=\"go\">triangle        2      178</span>\n<span class=\"go\">rectangle       3      358</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      358</span>\n<span class=\"go\">triangle        2      178</span>\n<span class=\"go\">rectangle       3      358</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">]),</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>       <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      359</span>\n<span class=\"go\">triangle        2      179</span>\n<span class=\"go\">rectangle       3      359</span>\n</code></pre>\n</div>\n\n<p>Multiply a dictionary by axis.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">            angles  degrees</span>\n<span class=\"go\">circle           0      720</span>\n<span class=\"go\">triangle         0      360</span>\n<span class=\"go\">rectangle        0      720</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">({</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">            angles  degrees</span>\n<span class=\"go\">circle           0        0</span>\n<span class=\"go\">triangle         6      360</span>\n<span class=\"go\">rectangle       12     1080</span>\n</code></pre>\n</div>\n\n<p>Multiply a DataFrame of different shape with operator version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]},</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles</span>\n<span class=\"go\">circle          0</span>\n<span class=\"go\">triangle        3</span>\n<span class=\"go\">rectangle       4</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">*</span> <span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      NaN</span>\n<span class=\"go\">triangle        9      NaN</span>\n<span class=\"go\">rectangle      16      NaN</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      0.0</span>\n<span class=\"go\">triangle        9      0.0</span>\n<span class=\"go\">rectangle      16      0.0</span>\n</code></pre>\n</div>\n\n<p>Divide by a MultiIndex by level.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                             <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">540</span><span class=\"p\">,</span> <span class=\"mi\">720</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                            <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                                   <span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                    <span class=\"s1\">&#39;square&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pentagon&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;hexagon&#39;</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles  degrees</span>\n<span class=\"go\">A circle          0      360</span>\n<span class=\"go\">  triangle        3      180</span>\n<span class=\"go\">  rectangle       4      360</span>\n<span class=\"go\">B square          4      360</span>\n<span class=\"go\">  pentagon        5      540</span>\n<span class=\"go\">  hexagon         6      720</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">div</span><span class=\"p\">(</span><span class=\"n\">df_multindex</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles  degrees</span>\n<span class=\"go\">A circle        NaN      1.0</span>\n<span class=\"go\">  triangle      1.0      1.0</span>\n<span class=\"go\">  rectangle     1.0      1.0</span>\n<span class=\"go\">B square        0.0      0.0</span>\n<span class=\"go\">  pentagon      0.0      0.0</span>\n<span class=\"go\">  hexagon       0.0      0.0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.rmul": {"fullname": "etl.pkg.dataframe.DataFrame.rmul", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.rmul", "kind": "function", "doc": "<p>Get Multiplication of dataframe and other, element-wise (binary operator <code>rmul</code>).</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.rmul.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>other * dataframe</code>, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, <code>mul</code>.</p>\n\n<p>Among flexible wrappers (<code>add</code>, <code>sub</code>, <code>mul</code>, <code>div</code>, <code>mod</code>, <code>pow</code>) to\narithmetic operators: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>//</code>, <code>%</code>, <code>**</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : scalar, sequence, Series, dict or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns.\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    Result of the arithmetic operation.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>Mismatched indices will be unioned together.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                   <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      360</span>\n<span class=\"go\">triangle        3      180</span>\n<span class=\"go\">rectangle       4      360</span>\n</code></pre>\n</div>\n\n<p>Add a scalar with operator version which return the same\nresults.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          1      361</span>\n<span class=\"go\">triangle        4      181</span>\n<span class=\"go\">rectangle       5      361</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          1      361</span>\n<span class=\"go\">triangle        4      181</span>\n<span class=\"go\">rectangle       5      361</span>\n</code></pre>\n</div>\n\n<p>Divide by constant with reverse version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">div</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle        0.0     36.0</span>\n<span class=\"go\">triangle      0.3     18.0</span>\n<span class=\"go\">rectangle     0.4     36.0</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">rdiv</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles   degrees</span>\n<span class=\"go\">circle          inf  0.027778</span>\n<span class=\"go\">triangle   3.333333  0.055556</span>\n<span class=\"go\">rectangle  2.500000  0.027778</span>\n</code></pre>\n</div>\n\n<p>Subtract a list and Series by axis with operator version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">-</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      358</span>\n<span class=\"go\">triangle        2      178</span>\n<span class=\"go\">rectangle       3      358</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      358</span>\n<span class=\"go\">triangle        2      178</span>\n<span class=\"go\">rectangle       3      358</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">]),</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>       <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      359</span>\n<span class=\"go\">triangle        2      179</span>\n<span class=\"go\">rectangle       3      359</span>\n</code></pre>\n</div>\n\n<p>Multiply a dictionary by axis.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">            angles  degrees</span>\n<span class=\"go\">circle           0      720</span>\n<span class=\"go\">triangle         0      360</span>\n<span class=\"go\">rectangle        0      720</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">({</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">            angles  degrees</span>\n<span class=\"go\">circle           0        0</span>\n<span class=\"go\">triangle         6      360</span>\n<span class=\"go\">rectangle       12     1080</span>\n</code></pre>\n</div>\n\n<p>Multiply a DataFrame of different shape with operator version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]},</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles</span>\n<span class=\"go\">circle          0</span>\n<span class=\"go\">triangle        3</span>\n<span class=\"go\">rectangle       4</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">*</span> <span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      NaN</span>\n<span class=\"go\">triangle        9      NaN</span>\n<span class=\"go\">rectangle      16      NaN</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      0.0</span>\n<span class=\"go\">triangle        9      0.0</span>\n<span class=\"go\">rectangle      16      0.0</span>\n</code></pre>\n</div>\n\n<p>Divide by a MultiIndex by level.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                             <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">540</span><span class=\"p\">,</span> <span class=\"mi\">720</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                            <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                                   <span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                    <span class=\"s1\">&#39;square&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pentagon&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;hexagon&#39;</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles  degrees</span>\n<span class=\"go\">A circle          0      360</span>\n<span class=\"go\">  triangle        3      180</span>\n<span class=\"go\">  rectangle       4      360</span>\n<span class=\"go\">B square          4      360</span>\n<span class=\"go\">  pentagon        5      540</span>\n<span class=\"go\">  hexagon         6      720</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">div</span><span class=\"p\">(</span><span class=\"n\">df_multindex</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles  degrees</span>\n<span class=\"go\">A circle        NaN      1.0</span>\n<span class=\"go\">  triangle      1.0      1.0</span>\n<span class=\"go\">  rectangle     1.0      1.0</span>\n<span class=\"go\">B square        0.0      0.0</span>\n<span class=\"go\">  pentagon      0.0      0.0</span>\n<span class=\"go\">  hexagon       0.0      0.0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.rdiv": {"fullname": "etl.pkg.dataframe.DataFrame.rdiv", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.rdiv", "kind": "function", "doc": "<p>Get Floating division of dataframe and other, element-wise (binary operator <code>rtruediv</code>).</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.rdiv.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>other / dataframe</code>, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, <code>truediv</code>.</p>\n\n<p>Among flexible wrappers (<code>add</code>, <code>sub</code>, <code>mul</code>, <code>div</code>, <code>mod</code>, <code>pow</code>) to\narithmetic operators: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>//</code>, <code>%</code>, <code>**</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : scalar, sequence, Series, dict or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns.\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    Result of the arithmetic operation.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>Mismatched indices will be unioned together.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                   <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      360</span>\n<span class=\"go\">triangle        3      180</span>\n<span class=\"go\">rectangle       4      360</span>\n</code></pre>\n</div>\n\n<p>Add a scalar with operator version which return the same\nresults.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          1      361</span>\n<span class=\"go\">triangle        4      181</span>\n<span class=\"go\">rectangle       5      361</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          1      361</span>\n<span class=\"go\">triangle        4      181</span>\n<span class=\"go\">rectangle       5      361</span>\n</code></pre>\n</div>\n\n<p>Divide by constant with reverse version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">div</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle        0.0     36.0</span>\n<span class=\"go\">triangle      0.3     18.0</span>\n<span class=\"go\">rectangle     0.4     36.0</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">rdiv</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles   degrees</span>\n<span class=\"go\">circle          inf  0.027778</span>\n<span class=\"go\">triangle   3.333333  0.055556</span>\n<span class=\"go\">rectangle  2.500000  0.027778</span>\n</code></pre>\n</div>\n\n<p>Subtract a list and Series by axis with operator version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">-</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      358</span>\n<span class=\"go\">triangle        2      178</span>\n<span class=\"go\">rectangle       3      358</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      358</span>\n<span class=\"go\">triangle        2      178</span>\n<span class=\"go\">rectangle       3      358</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">]),</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>       <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      359</span>\n<span class=\"go\">triangle        2      179</span>\n<span class=\"go\">rectangle       3      359</span>\n</code></pre>\n</div>\n\n<p>Multiply a dictionary by axis.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">            angles  degrees</span>\n<span class=\"go\">circle           0      720</span>\n<span class=\"go\">triangle         0      360</span>\n<span class=\"go\">rectangle        0      720</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">({</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">            angles  degrees</span>\n<span class=\"go\">circle           0        0</span>\n<span class=\"go\">triangle         6      360</span>\n<span class=\"go\">rectangle       12     1080</span>\n</code></pre>\n</div>\n\n<p>Multiply a DataFrame of different shape with operator version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]},</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles</span>\n<span class=\"go\">circle          0</span>\n<span class=\"go\">triangle        3</span>\n<span class=\"go\">rectangle       4</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">*</span> <span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      NaN</span>\n<span class=\"go\">triangle        9      NaN</span>\n<span class=\"go\">rectangle      16      NaN</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      0.0</span>\n<span class=\"go\">triangle        9      0.0</span>\n<span class=\"go\">rectangle      16      0.0</span>\n</code></pre>\n</div>\n\n<p>Divide by a MultiIndex by level.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                             <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">540</span><span class=\"p\">,</span> <span class=\"mi\">720</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                            <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                                   <span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                    <span class=\"s1\">&#39;square&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pentagon&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;hexagon&#39;</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles  degrees</span>\n<span class=\"go\">A circle          0      360</span>\n<span class=\"go\">  triangle        3      180</span>\n<span class=\"go\">  rectangle       4      360</span>\n<span class=\"go\">B square          4      360</span>\n<span class=\"go\">  pentagon        5      540</span>\n<span class=\"go\">  hexagon         6      720</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">div</span><span class=\"p\">(</span><span class=\"n\">df_multindex</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles  degrees</span>\n<span class=\"go\">A circle        NaN      1.0</span>\n<span class=\"go\">  triangle      1.0      1.0</span>\n<span class=\"go\">  rectangle     1.0      1.0</span>\n<span class=\"go\">B square        0.0      0.0</span>\n<span class=\"go\">  pentagon      0.0      0.0</span>\n<span class=\"go\">  hexagon       0.0      0.0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.rtruediv": {"fullname": "etl.pkg.dataframe.DataFrame.rtruediv", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.rtruediv", "kind": "function", "doc": "<p>Get Floating division of dataframe and other, element-wise (binary operator <code>rtruediv</code>).</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.rtruediv.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>other / dataframe</code>, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, <code>truediv</code>.</p>\n\n<p>Among flexible wrappers (<code>add</code>, <code>sub</code>, <code>mul</code>, <code>div</code>, <code>mod</code>, <code>pow</code>) to\narithmetic operators: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>//</code>, <code>%</code>, <code>**</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : scalar, sequence, Series, dict or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns.\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    Result of the arithmetic operation.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>Mismatched indices will be unioned together.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                   <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      360</span>\n<span class=\"go\">triangle        3      180</span>\n<span class=\"go\">rectangle       4      360</span>\n</code></pre>\n</div>\n\n<p>Add a scalar with operator version which return the same\nresults.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          1      361</span>\n<span class=\"go\">triangle        4      181</span>\n<span class=\"go\">rectangle       5      361</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          1      361</span>\n<span class=\"go\">triangle        4      181</span>\n<span class=\"go\">rectangle       5      361</span>\n</code></pre>\n</div>\n\n<p>Divide by constant with reverse version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">div</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle        0.0     36.0</span>\n<span class=\"go\">triangle      0.3     18.0</span>\n<span class=\"go\">rectangle     0.4     36.0</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">rdiv</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles   degrees</span>\n<span class=\"go\">circle          inf  0.027778</span>\n<span class=\"go\">triangle   3.333333  0.055556</span>\n<span class=\"go\">rectangle  2.500000  0.027778</span>\n</code></pre>\n</div>\n\n<p>Subtract a list and Series by axis with operator version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">-</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      358</span>\n<span class=\"go\">triangle        2      178</span>\n<span class=\"go\">rectangle       3      358</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      358</span>\n<span class=\"go\">triangle        2      178</span>\n<span class=\"go\">rectangle       3      358</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">]),</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>       <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      359</span>\n<span class=\"go\">triangle        2      179</span>\n<span class=\"go\">rectangle       3      359</span>\n</code></pre>\n</div>\n\n<p>Multiply a dictionary by axis.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">            angles  degrees</span>\n<span class=\"go\">circle           0      720</span>\n<span class=\"go\">triangle         0      360</span>\n<span class=\"go\">rectangle        0      720</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">({</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">            angles  degrees</span>\n<span class=\"go\">circle           0        0</span>\n<span class=\"go\">triangle         6      360</span>\n<span class=\"go\">rectangle       12     1080</span>\n</code></pre>\n</div>\n\n<p>Multiply a DataFrame of different shape with operator version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]},</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles</span>\n<span class=\"go\">circle          0</span>\n<span class=\"go\">triangle        3</span>\n<span class=\"go\">rectangle       4</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">*</span> <span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      NaN</span>\n<span class=\"go\">triangle        9      NaN</span>\n<span class=\"go\">rectangle      16      NaN</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      0.0</span>\n<span class=\"go\">triangle        9      0.0</span>\n<span class=\"go\">rectangle      16      0.0</span>\n</code></pre>\n</div>\n\n<p>Divide by a MultiIndex by level.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                             <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">540</span><span class=\"p\">,</span> <span class=\"mi\">720</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                            <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                                   <span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                    <span class=\"s1\">&#39;square&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pentagon&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;hexagon&#39;</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles  degrees</span>\n<span class=\"go\">A circle          0      360</span>\n<span class=\"go\">  triangle        3      180</span>\n<span class=\"go\">  rectangle       4      360</span>\n<span class=\"go\">B square          4      360</span>\n<span class=\"go\">  pentagon        5      540</span>\n<span class=\"go\">  hexagon         6      720</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">div</span><span class=\"p\">(</span><span class=\"n\">df_multindex</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles  degrees</span>\n<span class=\"go\">A circle        NaN      1.0</span>\n<span class=\"go\">  triangle      1.0      1.0</span>\n<span class=\"go\">  rectangle     1.0      1.0</span>\n<span class=\"go\">B square        0.0      0.0</span>\n<span class=\"go\">  pentagon      0.0      0.0</span>\n<span class=\"go\">  hexagon       0.0      0.0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"fullname": "etl.pkg.dataframe.DataFrame.rfloordiv", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.rfloordiv", "kind": "function", "doc": "<p>Get Integer division of dataframe and other, element-wise (binary operator <code>rfloordiv</code>).</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.rfloordiv.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>other // dataframe</code>, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, <code>floordiv</code>.</p>\n\n<p>Among flexible wrappers (<code>add</code>, <code>sub</code>, <code>mul</code>, <code>div</code>, <code>mod</code>, <code>pow</code>) to\narithmetic operators: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>//</code>, <code>%</code>, <code>**</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : scalar, sequence, Series, dict or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns.\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    Result of the arithmetic operation.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>Mismatched indices will be unioned together.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                   <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      360</span>\n<span class=\"go\">triangle        3      180</span>\n<span class=\"go\">rectangle       4      360</span>\n</code></pre>\n</div>\n\n<p>Add a scalar with operator version which return the same\nresults.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          1      361</span>\n<span class=\"go\">triangle        4      181</span>\n<span class=\"go\">rectangle       5      361</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          1      361</span>\n<span class=\"go\">triangle        4      181</span>\n<span class=\"go\">rectangle       5      361</span>\n</code></pre>\n</div>\n\n<p>Divide by constant with reverse version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">div</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle        0.0     36.0</span>\n<span class=\"go\">triangle      0.3     18.0</span>\n<span class=\"go\">rectangle     0.4     36.0</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">rdiv</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles   degrees</span>\n<span class=\"go\">circle          inf  0.027778</span>\n<span class=\"go\">triangle   3.333333  0.055556</span>\n<span class=\"go\">rectangle  2.500000  0.027778</span>\n</code></pre>\n</div>\n\n<p>Subtract a list and Series by axis with operator version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">-</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      358</span>\n<span class=\"go\">triangle        2      178</span>\n<span class=\"go\">rectangle       3      358</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      358</span>\n<span class=\"go\">triangle        2      178</span>\n<span class=\"go\">rectangle       3      358</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">]),</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>       <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      359</span>\n<span class=\"go\">triangle        2      179</span>\n<span class=\"go\">rectangle       3      359</span>\n</code></pre>\n</div>\n\n<p>Multiply a dictionary by axis.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">            angles  degrees</span>\n<span class=\"go\">circle           0      720</span>\n<span class=\"go\">triangle         0      360</span>\n<span class=\"go\">rectangle        0      720</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">({</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">            angles  degrees</span>\n<span class=\"go\">circle           0        0</span>\n<span class=\"go\">triangle         6      360</span>\n<span class=\"go\">rectangle       12     1080</span>\n</code></pre>\n</div>\n\n<p>Multiply a DataFrame of different shape with operator version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]},</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles</span>\n<span class=\"go\">circle          0</span>\n<span class=\"go\">triangle        3</span>\n<span class=\"go\">rectangle       4</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">*</span> <span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      NaN</span>\n<span class=\"go\">triangle        9      NaN</span>\n<span class=\"go\">rectangle      16      NaN</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      0.0</span>\n<span class=\"go\">triangle        9      0.0</span>\n<span class=\"go\">rectangle      16      0.0</span>\n</code></pre>\n</div>\n\n<p>Divide by a MultiIndex by level.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                             <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">540</span><span class=\"p\">,</span> <span class=\"mi\">720</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                            <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                                   <span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                    <span class=\"s1\">&#39;square&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pentagon&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;hexagon&#39;</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles  degrees</span>\n<span class=\"go\">A circle          0      360</span>\n<span class=\"go\">  triangle        3      180</span>\n<span class=\"go\">  rectangle       4      360</span>\n<span class=\"go\">B square          4      360</span>\n<span class=\"go\">  pentagon        5      540</span>\n<span class=\"go\">  hexagon         6      720</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">div</span><span class=\"p\">(</span><span class=\"n\">df_multindex</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles  degrees</span>\n<span class=\"go\">A circle        NaN      1.0</span>\n<span class=\"go\">  triangle      1.0      1.0</span>\n<span class=\"go\">  rectangle     1.0      1.0</span>\n<span class=\"go\">B square        0.0      0.0</span>\n<span class=\"go\">  pentagon      0.0      0.0</span>\n<span class=\"go\">  hexagon       0.0      0.0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.rmod": {"fullname": "etl.pkg.dataframe.DataFrame.rmod", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.rmod", "kind": "function", "doc": "<p>Get Modulo of dataframe and other, element-wise (binary operator <code>rmod</code>).</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.rmod.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>other % dataframe</code>, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, <code>mod</code>.</p>\n\n<p>Among flexible wrappers (<code>add</code>, <code>sub</code>, <code>mul</code>, <code>div</code>, <code>mod</code>, <code>pow</code>) to\narithmetic operators: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>//</code>, <code>%</code>, <code>**</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : scalar, sequence, Series, dict or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns.\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    Result of the arithmetic operation.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>Mismatched indices will be unioned together.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                   <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      360</span>\n<span class=\"go\">triangle        3      180</span>\n<span class=\"go\">rectangle       4      360</span>\n</code></pre>\n</div>\n\n<p>Add a scalar with operator version which return the same\nresults.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          1      361</span>\n<span class=\"go\">triangle        4      181</span>\n<span class=\"go\">rectangle       5      361</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          1      361</span>\n<span class=\"go\">triangle        4      181</span>\n<span class=\"go\">rectangle       5      361</span>\n</code></pre>\n</div>\n\n<p>Divide by constant with reverse version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">div</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle        0.0     36.0</span>\n<span class=\"go\">triangle      0.3     18.0</span>\n<span class=\"go\">rectangle     0.4     36.0</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">rdiv</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles   degrees</span>\n<span class=\"go\">circle          inf  0.027778</span>\n<span class=\"go\">triangle   3.333333  0.055556</span>\n<span class=\"go\">rectangle  2.500000  0.027778</span>\n</code></pre>\n</div>\n\n<p>Subtract a list and Series by axis with operator version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">-</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      358</span>\n<span class=\"go\">triangle        2      178</span>\n<span class=\"go\">rectangle       3      358</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      358</span>\n<span class=\"go\">triangle        2      178</span>\n<span class=\"go\">rectangle       3      358</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">]),</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>       <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      359</span>\n<span class=\"go\">triangle        2      179</span>\n<span class=\"go\">rectangle       3      359</span>\n</code></pre>\n</div>\n\n<p>Multiply a dictionary by axis.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">            angles  degrees</span>\n<span class=\"go\">circle           0      720</span>\n<span class=\"go\">triangle         0      360</span>\n<span class=\"go\">rectangle        0      720</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">({</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">            angles  degrees</span>\n<span class=\"go\">circle           0        0</span>\n<span class=\"go\">triangle         6      360</span>\n<span class=\"go\">rectangle       12     1080</span>\n</code></pre>\n</div>\n\n<p>Multiply a DataFrame of different shape with operator version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]},</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles</span>\n<span class=\"go\">circle          0</span>\n<span class=\"go\">triangle        3</span>\n<span class=\"go\">rectangle       4</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">*</span> <span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      NaN</span>\n<span class=\"go\">triangle        9      NaN</span>\n<span class=\"go\">rectangle      16      NaN</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      0.0</span>\n<span class=\"go\">triangle        9      0.0</span>\n<span class=\"go\">rectangle      16      0.0</span>\n</code></pre>\n</div>\n\n<p>Divide by a MultiIndex by level.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                             <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">540</span><span class=\"p\">,</span> <span class=\"mi\">720</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                            <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                                   <span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                    <span class=\"s1\">&#39;square&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pentagon&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;hexagon&#39;</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles  degrees</span>\n<span class=\"go\">A circle          0      360</span>\n<span class=\"go\">  triangle        3      180</span>\n<span class=\"go\">  rectangle       4      360</span>\n<span class=\"go\">B square          4      360</span>\n<span class=\"go\">  pentagon        5      540</span>\n<span class=\"go\">  hexagon         6      720</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">div</span><span class=\"p\">(</span><span class=\"n\">df_multindex</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles  degrees</span>\n<span class=\"go\">A circle        NaN      1.0</span>\n<span class=\"go\">  triangle      1.0      1.0</span>\n<span class=\"go\">  rectangle     1.0      1.0</span>\n<span class=\"go\">B square        0.0      0.0</span>\n<span class=\"go\">  pentagon      0.0      0.0</span>\n<span class=\"go\">  hexagon       0.0      0.0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.rpow": {"fullname": "etl.pkg.dataframe.DataFrame.rpow", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.rpow", "kind": "function", "doc": "<p>Get Exponential power of dataframe and other, element-wise (binary operator <code>rpow</code>).</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.rpow.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>other ** dataframe</code>, but with support to substitute a fill_value\nfor missing data in one of the inputs. With reverse version, <code>pow</code>.</p>\n\n<p>Among flexible wrappers (<code>add</code>, <code>sub</code>, <code>mul</code>, <code>div</code>, <code>mod</code>, <code>pow</code>) to\narithmetic operators: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>//</code>, <code>%</code>, <code>**</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : scalar, sequence, Series, dict or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}\n    Whether to compare by the index (0 or 'index') or columns.\n    (1 or 'columns'). For Series input, axis to match Series index on.\nlevel : int or label\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : float or None, default None\n    Fill existing missing (NaN) values, and any new element needed for\n    successful DataFrame alignment, with this value before computation.\n    If data in both corresponding DataFrame locations is missing\n    the result will be missing.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    Result of the arithmetic operation.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.add : Add DataFrames.\nDataFrame.sub : Subtract DataFrames.\nDataFrame.mul : Multiply DataFrames.\nDataFrame.div : Divide DataFrames (float division).\nDataFrame.truediv : Divide DataFrames (float division).\nDataFrame.floordiv : Divide DataFrames (integer division).\nDataFrame.mod : Calculate modulo (remainder after division).\nDataFrame.pow : Calculate exponential power.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>Mismatched indices will be unioned together.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                   <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      360</span>\n<span class=\"go\">triangle        3      180</span>\n<span class=\"go\">rectangle       4      360</span>\n</code></pre>\n</div>\n\n<p>Add a scalar with operator version which return the same\nresults.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          1      361</span>\n<span class=\"go\">triangle        4      181</span>\n<span class=\"go\">rectangle       5      361</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          1      361</span>\n<span class=\"go\">triangle        4      181</span>\n<span class=\"go\">rectangle       5      361</span>\n</code></pre>\n</div>\n\n<p>Divide by constant with reverse version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">div</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle        0.0     36.0</span>\n<span class=\"go\">triangle      0.3     18.0</span>\n<span class=\"go\">rectangle     0.4     36.0</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">rdiv</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles   degrees</span>\n<span class=\"go\">circle          inf  0.027778</span>\n<span class=\"go\">triangle   3.333333  0.055556</span>\n<span class=\"go\">rectangle  2.500000  0.027778</span>\n</code></pre>\n</div>\n\n<p>Subtract a list and Series by axis with operator version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">-</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      358</span>\n<span class=\"go\">triangle        2      178</span>\n<span class=\"go\">rectangle       3      358</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      358</span>\n<span class=\"go\">triangle        2      178</span>\n<span class=\"go\">rectangle       3      358</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">]),</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>       <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle         -1      359</span>\n<span class=\"go\">triangle        2      179</span>\n<span class=\"go\">rectangle       3      359</span>\n</code></pre>\n</div>\n\n<p>Multiply a dictionary by axis.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">            angles  degrees</span>\n<span class=\"go\">circle           0      720</span>\n<span class=\"go\">triangle         0      360</span>\n<span class=\"go\">rectangle        0      720</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">({</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">            angles  degrees</span>\n<span class=\"go\">circle           0        0</span>\n<span class=\"go\">triangle         6      360</span>\n<span class=\"go\">rectangle       12     1080</span>\n</code></pre>\n</div>\n\n<p>Multiply a DataFrame of different shape with operator version.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]},</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles</span>\n<span class=\"go\">circle          0</span>\n<span class=\"go\">triangle        3</span>\n<span class=\"go\">rectangle       4</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">*</span> <span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      NaN</span>\n<span class=\"go\">triangle        9      NaN</span>\n<span class=\"go\">rectangle      16      NaN</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">           angles  degrees</span>\n<span class=\"go\">circle          0      0.0</span>\n<span class=\"go\">triangle        9      0.0</span>\n<span class=\"go\">rectangle      16      0.0</span>\n</code></pre>\n</div>\n\n<p>Divide by a MultiIndex by level.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;angles&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                             <span class=\"s1\">&#39;degrees&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"mi\">540</span><span class=\"p\">,</span> <span class=\"mi\">720</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                            <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                                   <span class=\"p\">[</span><span class=\"s1\">&#39;circle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;triangle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rectangle&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                    <span class=\"s1\">&#39;square&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pentagon&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;hexagon&#39;</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles  degrees</span>\n<span class=\"go\">A circle          0      360</span>\n<span class=\"go\">  triangle        3      180</span>\n<span class=\"go\">  rectangle       4      360</span>\n<span class=\"go\">B square          4      360</span>\n<span class=\"go\">  pentagon        5      540</span>\n<span class=\"go\">  hexagon         6      720</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">div</span><span class=\"p\">(</span><span class=\"n\">df_multindex</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">             angles  degrees</span>\n<span class=\"go\">A circle        NaN      1.0</span>\n<span class=\"go\">  triangle      1.0      1.0</span>\n<span class=\"go\">  rectangle     1.0      1.0</span>\n<span class=\"go\">B square        0.0      0.0</span>\n<span class=\"go\">  pentagon      0.0      0.0</span>\n<span class=\"go\">  hexagon       0.0      0.0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.lt": {"fullname": "etl.pkg.dataframe.DataFrame.lt", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.lt", "kind": "function", "doc": "<p>Get Less than of dataframe and other, element-wise (binary operator <code>lt</code>).</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.lt.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Among flexible wrappers (<code>eq</code>, <code>ne</code>, <code>le</code>, <code>lt</code>, <code>ge</code>, <code>gt</code>) to comparison\noperators.</p>\n\n<p>Equivalent to <code>==</code>, <code>!=</code>, <code>&lt;=</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&gt;</code> with support to choose axis\n(rows or columns) and level for comparison.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : scalar, sequence, Series, or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}, default 'columns'\n    Whether to compare by the index (0 or 'index') or columns\n    (1 or 'columns').\nlevel : int or label\n    Broadcast across a level, matching Index values on the passed\n    MultiIndex level.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame of bool\n    Result of the comparison.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.eq : Compare DataFrames for equality elementwise.\nDataFrame.ne : Compare DataFrames for inequality elementwise.\nDataFrame.le : Compare DataFrames for less than inequality\n    or equality elementwise.\nDataFrame.lt : Compare DataFrames for strictly less than\n    inequality elementwise.\nDataFrame.ge : Compare DataFrames for greater than inequality\n    or equality elementwise.\nDataFrame.gt : Compare DataFrames for strictly greater than\n    inequality elementwise.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>Mismatched indices will be unioned together.\n<code>NaN</code> values are considered different (i.e. <code>NaN</code> != <code>NaN</code>).</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;cost&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                   <span class=\"s1\">&#39;revenue&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   cost  revenue</span>\n<span class=\"go\">A   250      100</span>\n<span class=\"go\">B   150      250</span>\n<span class=\"go\">C   100      300</span>\n</code></pre>\n</div>\n\n<p>Comparison with a scalar, using either the operator or method:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">==</span> <span class=\"mi\">100</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    cost  revenue</span>\n<span class=\"go\">A  False     True</span>\n<span class=\"go\">B  False    False</span>\n<span class=\"go\">C   True    False</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    cost  revenue</span>\n<span class=\"go\">A  False     True</span>\n<span class=\"go\">B  False    False</span>\n<span class=\"go\">C   True    False</span>\n</code></pre>\n</div>\n\n<p>When <code>other</code> is a :class:<code>Series</code>, the columns of a DataFrame are aligned\nwith the index of <code>other</code> and broadcast:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">!=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;cost&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;revenue&quot;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    cost  revenue</span>\n<span class=\"go\">A   True     True</span>\n<span class=\"go\">B   True    False</span>\n<span class=\"go\">C  False     True</span>\n</code></pre>\n</div>\n\n<p>Use the method to control the broadcast axis:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">ne</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;A&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;D&quot;</span><span class=\"p\">]),</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   cost  revenue</span>\n<span class=\"go\">A  True    False</span>\n<span class=\"go\">B  True     True</span>\n<span class=\"go\">C  True     True</span>\n<span class=\"go\">D  True     True</span>\n</code></pre>\n</div>\n\n<p>When comparing to an arbitrary sequence, the number of columns must\nmatch the number elements in <code>other</code>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">]</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    cost  revenue</span>\n<span class=\"go\">A   True     True</span>\n<span class=\"go\">B  False    False</span>\n<span class=\"go\">C  False    False</span>\n</code></pre>\n</div>\n\n<p>Use the method to control the axis:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">eq</span><span class=\"p\">([</span><span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    cost  revenue</span>\n<span class=\"go\">A   True    False</span>\n<span class=\"go\">B  False     True</span>\n<span class=\"go\">C   True    False</span>\n</code></pre>\n</div>\n\n<p>Compare to a DataFrame of different shape.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;revenue&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">]},</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;D&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   revenue</span>\n<span class=\"go\">A      300</span>\n<span class=\"go\">B      250</span>\n<span class=\"go\">C      100</span>\n<span class=\"go\">D      150</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">gt</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    cost  revenue</span>\n<span class=\"go\">A  False    False</span>\n<span class=\"go\">B  False    False</span>\n<span class=\"go\">C  False     True</span>\n<span class=\"go\">D  False    False</span>\n</code></pre>\n</div>\n\n<p>Compare to a MultiIndex by level.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;cost&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">220</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                             <span class=\"s1\">&#39;revenue&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">175</span><span class=\"p\">,</span> <span class=\"mi\">225</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                            <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s1\">&#39;Q1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Q1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Q1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Q2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Q2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Q2&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                                   <span class=\"p\">[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">      cost  revenue</span>\n<span class=\"go\">Q1 A   250      100</span>\n<span class=\"go\">   B   150      250</span>\n<span class=\"go\">   C   100      300</span>\n<span class=\"go\">Q2 A   150      200</span>\n<span class=\"go\">   B   300      175</span>\n<span class=\"go\">   C   220      225</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">le</span><span class=\"p\">(</span><span class=\"n\">df_multindex</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">       cost  revenue</span>\n<span class=\"go\">Q1 A   True     True</span>\n<span class=\"go\">   B   True     True</span>\n<span class=\"go\">   C   True     True</span>\n<span class=\"go\">Q2 A  False     True</span>\n<span class=\"go\">   B   True    False</span>\n<span class=\"go\">   C   True    False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.gt": {"fullname": "etl.pkg.dataframe.DataFrame.gt", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.gt", "kind": "function", "doc": "<p>Get Greater than of dataframe and other, element-wise (binary operator <code>gt</code>).</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.gt.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Among flexible wrappers (<code>eq</code>, <code>ne</code>, <code>le</code>, <code>lt</code>, <code>ge</code>, <code>gt</code>) to comparison\noperators.</p>\n\n<p>Equivalent to <code>==</code>, <code>!=</code>, <code>&lt;=</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&gt;</code> with support to choose axis\n(rows or columns) and level for comparison.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : scalar, sequence, Series, or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}, default 'columns'\n    Whether to compare by the index (0 or 'index') or columns\n    (1 or 'columns').\nlevel : int or label\n    Broadcast across a level, matching Index values on the passed\n    MultiIndex level.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame of bool\n    Result of the comparison.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.eq : Compare DataFrames for equality elementwise.\nDataFrame.ne : Compare DataFrames for inequality elementwise.\nDataFrame.le : Compare DataFrames for less than inequality\n    or equality elementwise.\nDataFrame.lt : Compare DataFrames for strictly less than\n    inequality elementwise.\nDataFrame.ge : Compare DataFrames for greater than inequality\n    or equality elementwise.\nDataFrame.gt : Compare DataFrames for strictly greater than\n    inequality elementwise.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>Mismatched indices will be unioned together.\n<code>NaN</code> values are considered different (i.e. <code>NaN</code> != <code>NaN</code>).</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;cost&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                   <span class=\"s1\">&#39;revenue&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   cost  revenue</span>\n<span class=\"go\">A   250      100</span>\n<span class=\"go\">B   150      250</span>\n<span class=\"go\">C   100      300</span>\n</code></pre>\n</div>\n\n<p>Comparison with a scalar, using either the operator or method:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">==</span> <span class=\"mi\">100</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    cost  revenue</span>\n<span class=\"go\">A  False     True</span>\n<span class=\"go\">B  False    False</span>\n<span class=\"go\">C   True    False</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    cost  revenue</span>\n<span class=\"go\">A  False     True</span>\n<span class=\"go\">B  False    False</span>\n<span class=\"go\">C   True    False</span>\n</code></pre>\n</div>\n\n<p>When <code>other</code> is a :class:<code>Series</code>, the columns of a DataFrame are aligned\nwith the index of <code>other</code> and broadcast:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">!=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;cost&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;revenue&quot;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    cost  revenue</span>\n<span class=\"go\">A   True     True</span>\n<span class=\"go\">B   True    False</span>\n<span class=\"go\">C  False     True</span>\n</code></pre>\n</div>\n\n<p>Use the method to control the broadcast axis:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">ne</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;A&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;D&quot;</span><span class=\"p\">]),</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   cost  revenue</span>\n<span class=\"go\">A  True    False</span>\n<span class=\"go\">B  True     True</span>\n<span class=\"go\">C  True     True</span>\n<span class=\"go\">D  True     True</span>\n</code></pre>\n</div>\n\n<p>When comparing to an arbitrary sequence, the number of columns must\nmatch the number elements in <code>other</code>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">]</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    cost  revenue</span>\n<span class=\"go\">A   True     True</span>\n<span class=\"go\">B  False    False</span>\n<span class=\"go\">C  False    False</span>\n</code></pre>\n</div>\n\n<p>Use the method to control the axis:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">eq</span><span class=\"p\">([</span><span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    cost  revenue</span>\n<span class=\"go\">A   True    False</span>\n<span class=\"go\">B  False     True</span>\n<span class=\"go\">C   True    False</span>\n</code></pre>\n</div>\n\n<p>Compare to a DataFrame of different shape.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;revenue&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">]},</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;D&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   revenue</span>\n<span class=\"go\">A      300</span>\n<span class=\"go\">B      250</span>\n<span class=\"go\">C      100</span>\n<span class=\"go\">D      150</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">gt</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    cost  revenue</span>\n<span class=\"go\">A  False    False</span>\n<span class=\"go\">B  False    False</span>\n<span class=\"go\">C  False     True</span>\n<span class=\"go\">D  False    False</span>\n</code></pre>\n</div>\n\n<p>Compare to a MultiIndex by level.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;cost&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">220</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                             <span class=\"s1\">&#39;revenue&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">175</span><span class=\"p\">,</span> <span class=\"mi\">225</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                            <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s1\">&#39;Q1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Q1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Q1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Q2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Q2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Q2&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                                   <span class=\"p\">[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">      cost  revenue</span>\n<span class=\"go\">Q1 A   250      100</span>\n<span class=\"go\">   B   150      250</span>\n<span class=\"go\">   C   100      300</span>\n<span class=\"go\">Q2 A   150      200</span>\n<span class=\"go\">   B   300      175</span>\n<span class=\"go\">   C   220      225</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">le</span><span class=\"p\">(</span><span class=\"n\">df_multindex</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">       cost  revenue</span>\n<span class=\"go\">Q1 A   True     True</span>\n<span class=\"go\">   B   True     True</span>\n<span class=\"go\">   C   True     True</span>\n<span class=\"go\">Q2 A  False     True</span>\n<span class=\"go\">   B   True    False</span>\n<span class=\"go\">   C   True    False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.le": {"fullname": "etl.pkg.dataframe.DataFrame.le", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.le", "kind": "function", "doc": "<p>Get Less than or equal to of dataframe and other, element-wise (binary operator <code>le</code>).</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.le.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Among flexible wrappers (<code>eq</code>, <code>ne</code>, <code>le</code>, <code>lt</code>, <code>ge</code>, <code>gt</code>) to comparison\noperators.</p>\n\n<p>Equivalent to <code>==</code>, <code>!=</code>, <code>&lt;=</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&gt;</code> with support to choose axis\n(rows or columns) and level for comparison.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : scalar, sequence, Series, or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}, default 'columns'\n    Whether to compare by the index (0 or 'index') or columns\n    (1 or 'columns').\nlevel : int or label\n    Broadcast across a level, matching Index values on the passed\n    MultiIndex level.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame of bool\n    Result of the comparison.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.eq : Compare DataFrames for equality elementwise.\nDataFrame.ne : Compare DataFrames for inequality elementwise.\nDataFrame.le : Compare DataFrames for less than inequality\n    or equality elementwise.\nDataFrame.lt : Compare DataFrames for strictly less than\n    inequality elementwise.\nDataFrame.ge : Compare DataFrames for greater than inequality\n    or equality elementwise.\nDataFrame.gt : Compare DataFrames for strictly greater than\n    inequality elementwise.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>Mismatched indices will be unioned together.\n<code>NaN</code> values are considered different (i.e. <code>NaN</code> != <code>NaN</code>).</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;cost&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                   <span class=\"s1\">&#39;revenue&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   cost  revenue</span>\n<span class=\"go\">A   250      100</span>\n<span class=\"go\">B   150      250</span>\n<span class=\"go\">C   100      300</span>\n</code></pre>\n</div>\n\n<p>Comparison with a scalar, using either the operator or method:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">==</span> <span class=\"mi\">100</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    cost  revenue</span>\n<span class=\"go\">A  False     True</span>\n<span class=\"go\">B  False    False</span>\n<span class=\"go\">C   True    False</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    cost  revenue</span>\n<span class=\"go\">A  False     True</span>\n<span class=\"go\">B  False    False</span>\n<span class=\"go\">C   True    False</span>\n</code></pre>\n</div>\n\n<p>When <code>other</code> is a :class:<code>Series</code>, the columns of a DataFrame are aligned\nwith the index of <code>other</code> and broadcast:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">!=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;cost&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;revenue&quot;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    cost  revenue</span>\n<span class=\"go\">A   True     True</span>\n<span class=\"go\">B   True    False</span>\n<span class=\"go\">C  False     True</span>\n</code></pre>\n</div>\n\n<p>Use the method to control the broadcast axis:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">ne</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;A&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;D&quot;</span><span class=\"p\">]),</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   cost  revenue</span>\n<span class=\"go\">A  True    False</span>\n<span class=\"go\">B  True     True</span>\n<span class=\"go\">C  True     True</span>\n<span class=\"go\">D  True     True</span>\n</code></pre>\n</div>\n\n<p>When comparing to an arbitrary sequence, the number of columns must\nmatch the number elements in <code>other</code>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">]</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    cost  revenue</span>\n<span class=\"go\">A   True     True</span>\n<span class=\"go\">B  False    False</span>\n<span class=\"go\">C  False    False</span>\n</code></pre>\n</div>\n\n<p>Use the method to control the axis:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">eq</span><span class=\"p\">([</span><span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    cost  revenue</span>\n<span class=\"go\">A   True    False</span>\n<span class=\"go\">B  False     True</span>\n<span class=\"go\">C   True    False</span>\n</code></pre>\n</div>\n\n<p>Compare to a DataFrame of different shape.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;revenue&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">]},</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;D&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   revenue</span>\n<span class=\"go\">A      300</span>\n<span class=\"go\">B      250</span>\n<span class=\"go\">C      100</span>\n<span class=\"go\">D      150</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">gt</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    cost  revenue</span>\n<span class=\"go\">A  False    False</span>\n<span class=\"go\">B  False    False</span>\n<span class=\"go\">C  False     True</span>\n<span class=\"go\">D  False    False</span>\n</code></pre>\n</div>\n\n<p>Compare to a MultiIndex by level.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;cost&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">220</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                             <span class=\"s1\">&#39;revenue&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">175</span><span class=\"p\">,</span> <span class=\"mi\">225</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                            <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s1\">&#39;Q1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Q1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Q1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Q2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Q2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Q2&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                                   <span class=\"p\">[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">      cost  revenue</span>\n<span class=\"go\">Q1 A   250      100</span>\n<span class=\"go\">   B   150      250</span>\n<span class=\"go\">   C   100      300</span>\n<span class=\"go\">Q2 A   150      200</span>\n<span class=\"go\">   B   300      175</span>\n<span class=\"go\">   C   220      225</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">le</span><span class=\"p\">(</span><span class=\"n\">df_multindex</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">       cost  revenue</span>\n<span class=\"go\">Q1 A   True     True</span>\n<span class=\"go\">   B   True     True</span>\n<span class=\"go\">   C   True     True</span>\n<span class=\"go\">Q2 A  False     True</span>\n<span class=\"go\">   B   True    False</span>\n<span class=\"go\">   C   True    False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.ge": {"fullname": "etl.pkg.dataframe.DataFrame.ge", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.ge", "kind": "function", "doc": "<p>Get Greater than or equal to of dataframe and other, element-wise (binary operator <code>ge</code>).</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.ge.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Among flexible wrappers (<code>eq</code>, <code>ne</code>, <code>le</code>, <code>lt</code>, <code>ge</code>, <code>gt</code>) to comparison\noperators.</p>\n\n<p>Equivalent to <code>==</code>, <code>!=</code>, <code>&lt;=</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&gt;</code> with support to choose axis\n(rows or columns) and level for comparison.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : scalar, sequence, Series, or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}, default 'columns'\n    Whether to compare by the index (0 or 'index') or columns\n    (1 or 'columns').\nlevel : int or label\n    Broadcast across a level, matching Index values on the passed\n    MultiIndex level.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame of bool\n    Result of the comparison.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.eq : Compare DataFrames for equality elementwise.\nDataFrame.ne : Compare DataFrames for inequality elementwise.\nDataFrame.le : Compare DataFrames for less than inequality\n    or equality elementwise.\nDataFrame.lt : Compare DataFrames for strictly less than\n    inequality elementwise.\nDataFrame.ge : Compare DataFrames for greater than inequality\n    or equality elementwise.\nDataFrame.gt : Compare DataFrames for strictly greater than\n    inequality elementwise.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>Mismatched indices will be unioned together.\n<code>NaN</code> values are considered different (i.e. <code>NaN</code> != <code>NaN</code>).</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;cost&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                   <span class=\"s1\">&#39;revenue&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   cost  revenue</span>\n<span class=\"go\">A   250      100</span>\n<span class=\"go\">B   150      250</span>\n<span class=\"go\">C   100      300</span>\n</code></pre>\n</div>\n\n<p>Comparison with a scalar, using either the operator or method:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">==</span> <span class=\"mi\">100</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    cost  revenue</span>\n<span class=\"go\">A  False     True</span>\n<span class=\"go\">B  False    False</span>\n<span class=\"go\">C   True    False</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    cost  revenue</span>\n<span class=\"go\">A  False     True</span>\n<span class=\"go\">B  False    False</span>\n<span class=\"go\">C   True    False</span>\n</code></pre>\n</div>\n\n<p>When <code>other</code> is a :class:<code>Series</code>, the columns of a DataFrame are aligned\nwith the index of <code>other</code> and broadcast:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">!=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;cost&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;revenue&quot;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    cost  revenue</span>\n<span class=\"go\">A   True     True</span>\n<span class=\"go\">B   True    False</span>\n<span class=\"go\">C  False     True</span>\n</code></pre>\n</div>\n\n<p>Use the method to control the broadcast axis:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">ne</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;A&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;D&quot;</span><span class=\"p\">]),</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   cost  revenue</span>\n<span class=\"go\">A  True    False</span>\n<span class=\"go\">B  True     True</span>\n<span class=\"go\">C  True     True</span>\n<span class=\"go\">D  True     True</span>\n</code></pre>\n</div>\n\n<p>When comparing to an arbitrary sequence, the number of columns must\nmatch the number elements in <code>other</code>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">]</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    cost  revenue</span>\n<span class=\"go\">A   True     True</span>\n<span class=\"go\">B  False    False</span>\n<span class=\"go\">C  False    False</span>\n</code></pre>\n</div>\n\n<p>Use the method to control the axis:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">eq</span><span class=\"p\">([</span><span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    cost  revenue</span>\n<span class=\"go\">A   True    False</span>\n<span class=\"go\">B  False     True</span>\n<span class=\"go\">C   True    False</span>\n</code></pre>\n</div>\n\n<p>Compare to a DataFrame of different shape.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;revenue&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">]},</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;D&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   revenue</span>\n<span class=\"go\">A      300</span>\n<span class=\"go\">B      250</span>\n<span class=\"go\">C      100</span>\n<span class=\"go\">D      150</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">gt</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    cost  revenue</span>\n<span class=\"go\">A  False    False</span>\n<span class=\"go\">B  False    False</span>\n<span class=\"go\">C  False     True</span>\n<span class=\"go\">D  False    False</span>\n</code></pre>\n</div>\n\n<p>Compare to a MultiIndex by level.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;cost&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">220</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                             <span class=\"s1\">&#39;revenue&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">175</span><span class=\"p\">,</span> <span class=\"mi\">225</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                            <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s1\">&#39;Q1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Q1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Q1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Q2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Q2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Q2&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                                   <span class=\"p\">[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">      cost  revenue</span>\n<span class=\"go\">Q1 A   250      100</span>\n<span class=\"go\">   B   150      250</span>\n<span class=\"go\">   C   100      300</span>\n<span class=\"go\">Q2 A   150      200</span>\n<span class=\"go\">   B   300      175</span>\n<span class=\"go\">   C   220      225</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">le</span><span class=\"p\">(</span><span class=\"n\">df_multindex</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">       cost  revenue</span>\n<span class=\"go\">Q1 A   True     True</span>\n<span class=\"go\">   B   True     True</span>\n<span class=\"go\">   C   True     True</span>\n<span class=\"go\">Q2 A  False     True</span>\n<span class=\"go\">   B   True    False</span>\n<span class=\"go\">   C   True    False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.ne": {"fullname": "etl.pkg.dataframe.DataFrame.ne", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.ne", "kind": "function", "doc": "<p>Get Not equal to of dataframe and other, element-wise (binary operator <code>ne</code>).</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.ne.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Among flexible wrappers (<code>eq</code>, <code>ne</code>, <code>le</code>, <code>lt</code>, <code>ge</code>, <code>gt</code>) to comparison\noperators.</p>\n\n<p>Equivalent to <code>==</code>, <code>!=</code>, <code>&lt;=</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&gt;</code> with support to choose axis\n(rows or columns) and level for comparison.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : scalar, sequence, Series, or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}, default 'columns'\n    Whether to compare by the index (0 or 'index') or columns\n    (1 or 'columns').\nlevel : int or label\n    Broadcast across a level, matching Index values on the passed\n    MultiIndex level.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame of bool\n    Result of the comparison.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.eq : Compare DataFrames for equality elementwise.\nDataFrame.ne : Compare DataFrames for inequality elementwise.\nDataFrame.le : Compare DataFrames for less than inequality\n    or equality elementwise.\nDataFrame.lt : Compare DataFrames for strictly less than\n    inequality elementwise.\nDataFrame.ge : Compare DataFrames for greater than inequality\n    or equality elementwise.\nDataFrame.gt : Compare DataFrames for strictly greater than\n    inequality elementwise.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>Mismatched indices will be unioned together.\n<code>NaN</code> values are considered different (i.e. <code>NaN</code> != <code>NaN</code>).</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;cost&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                   <span class=\"s1\">&#39;revenue&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   cost  revenue</span>\n<span class=\"go\">A   250      100</span>\n<span class=\"go\">B   150      250</span>\n<span class=\"go\">C   100      300</span>\n</code></pre>\n</div>\n\n<p>Comparison with a scalar, using either the operator or method:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">==</span> <span class=\"mi\">100</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    cost  revenue</span>\n<span class=\"go\">A  False     True</span>\n<span class=\"go\">B  False    False</span>\n<span class=\"go\">C   True    False</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    cost  revenue</span>\n<span class=\"go\">A  False     True</span>\n<span class=\"go\">B  False    False</span>\n<span class=\"go\">C   True    False</span>\n</code></pre>\n</div>\n\n<p>When <code>other</code> is a :class:<code>Series</code>, the columns of a DataFrame are aligned\nwith the index of <code>other</code> and broadcast:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">!=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;cost&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;revenue&quot;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    cost  revenue</span>\n<span class=\"go\">A   True     True</span>\n<span class=\"go\">B   True    False</span>\n<span class=\"go\">C  False     True</span>\n</code></pre>\n</div>\n\n<p>Use the method to control the broadcast axis:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">ne</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;A&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;D&quot;</span><span class=\"p\">]),</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   cost  revenue</span>\n<span class=\"go\">A  True    False</span>\n<span class=\"go\">B  True     True</span>\n<span class=\"go\">C  True     True</span>\n<span class=\"go\">D  True     True</span>\n</code></pre>\n</div>\n\n<p>When comparing to an arbitrary sequence, the number of columns must\nmatch the number elements in <code>other</code>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">]</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    cost  revenue</span>\n<span class=\"go\">A   True     True</span>\n<span class=\"go\">B  False    False</span>\n<span class=\"go\">C  False    False</span>\n</code></pre>\n</div>\n\n<p>Use the method to control the axis:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">eq</span><span class=\"p\">([</span><span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    cost  revenue</span>\n<span class=\"go\">A   True    False</span>\n<span class=\"go\">B  False     True</span>\n<span class=\"go\">C   True    False</span>\n</code></pre>\n</div>\n\n<p>Compare to a DataFrame of different shape.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;revenue&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">]},</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;D&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   revenue</span>\n<span class=\"go\">A      300</span>\n<span class=\"go\">B      250</span>\n<span class=\"go\">C      100</span>\n<span class=\"go\">D      150</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">gt</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    cost  revenue</span>\n<span class=\"go\">A  False    False</span>\n<span class=\"go\">B  False    False</span>\n<span class=\"go\">C  False     True</span>\n<span class=\"go\">D  False    False</span>\n</code></pre>\n</div>\n\n<p>Compare to a MultiIndex by level.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;cost&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">220</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                             <span class=\"s1\">&#39;revenue&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">175</span><span class=\"p\">,</span> <span class=\"mi\">225</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                            <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s1\">&#39;Q1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Q1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Q1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Q2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Q2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Q2&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                                   <span class=\"p\">[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">      cost  revenue</span>\n<span class=\"go\">Q1 A   250      100</span>\n<span class=\"go\">   B   150      250</span>\n<span class=\"go\">   C   100      300</span>\n<span class=\"go\">Q2 A   150      200</span>\n<span class=\"go\">   B   300      175</span>\n<span class=\"go\">   C   220      225</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">le</span><span class=\"p\">(</span><span class=\"n\">df_multindex</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">       cost  revenue</span>\n<span class=\"go\">Q1 A   True     True</span>\n<span class=\"go\">   B   True     True</span>\n<span class=\"go\">   C   True     True</span>\n<span class=\"go\">Q2 A  False     True</span>\n<span class=\"go\">   B   True    False</span>\n<span class=\"go\">   C   True    False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.DataFrame.eq": {"fullname": "etl.pkg.dataframe.DataFrame.eq", "modulename": "etl.pkg.dataframe", "qualname": "DataFrame.eq", "kind": "function", "doc": "<p>Get Equal to of dataframe and other, element-wise (binary operator <code>eq</code>).</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.eq.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Among flexible wrappers (<code>eq</code>, <code>ne</code>, <code>le</code>, <code>lt</code>, <code>ge</code>, <code>gt</code>) to comparison\noperators.</p>\n\n<p>Equivalent to <code>==</code>, <code>!=</code>, <code>&lt;=</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&gt;</code> with support to choose axis\n(rows or columns) and level for comparison.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : scalar, sequence, Series, or DataFrame\n    Any single or multiple element data structure, or list-like object.\naxis : {0 or 'index', 1 or 'columns'}, default 'columns'\n    Whether to compare by the index (0 or 'index') or columns\n    (1 or 'columns').\nlevel : int or label\n    Broadcast across a level, matching Index values on the passed\n    MultiIndex level.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame of bool\n    Result of the comparison.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.eq : Compare DataFrames for equality elementwise.\nDataFrame.ne : Compare DataFrames for inequality elementwise.\nDataFrame.le : Compare DataFrames for less than inequality\n    or equality elementwise.\nDataFrame.lt : Compare DataFrames for strictly less than\n    inequality elementwise.\nDataFrame.ge : Compare DataFrames for greater than inequality\n    or equality elementwise.\nDataFrame.gt : Compare DataFrames for strictly greater than\n    inequality elementwise.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>Mismatched indices will be unioned together.\n<code>NaN</code> values are considered different (i.e. <code>NaN</code> != <code>NaN</code>).</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;cost&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                   <span class=\"s1\">&#39;revenue&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                  <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   cost  revenue</span>\n<span class=\"go\">A   250      100</span>\n<span class=\"go\">B   150      250</span>\n<span class=\"go\">C   100      300</span>\n</code></pre>\n</div>\n\n<p>Comparison with a scalar, using either the operator or method:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">==</span> <span class=\"mi\">100</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    cost  revenue</span>\n<span class=\"go\">A  False     True</span>\n<span class=\"go\">B  False    False</span>\n<span class=\"go\">C   True    False</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    cost  revenue</span>\n<span class=\"go\">A  False     True</span>\n<span class=\"go\">B  False    False</span>\n<span class=\"go\">C   True    False</span>\n</code></pre>\n</div>\n\n<p>When <code>other</code> is a :class:<code>Series</code>, the columns of a DataFrame are aligned\nwith the index of <code>other</code> and broadcast:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">!=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;cost&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;revenue&quot;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    cost  revenue</span>\n<span class=\"go\">A   True     True</span>\n<span class=\"go\">B   True    False</span>\n<span class=\"go\">C  False     True</span>\n</code></pre>\n</div>\n\n<p>Use the method to control the broadcast axis:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">ne</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;A&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;D&quot;</span><span class=\"p\">]),</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   cost  revenue</span>\n<span class=\"go\">A  True    False</span>\n<span class=\"go\">B  True     True</span>\n<span class=\"go\">C  True     True</span>\n<span class=\"go\">D  True     True</span>\n</code></pre>\n</div>\n\n<p>When comparing to an arbitrary sequence, the number of columns must\nmatch the number elements in <code>other</code>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">]</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    cost  revenue</span>\n<span class=\"go\">A   True     True</span>\n<span class=\"go\">B  False    False</span>\n<span class=\"go\">C  False    False</span>\n</code></pre>\n</div>\n\n<p>Use the method to control the axis:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">eq</span><span class=\"p\">([</span><span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    cost  revenue</span>\n<span class=\"go\">A   True    False</span>\n<span class=\"go\">B  False     True</span>\n<span class=\"go\">C   True    False</span>\n</code></pre>\n</div>\n\n<p>Compare to a DataFrame of different shape.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;revenue&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">]},</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;D&#39;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   revenue</span>\n<span class=\"go\">A      300</span>\n<span class=\"go\">B      250</span>\n<span class=\"go\">C      100</span>\n<span class=\"go\">D      150</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">gt</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    cost  revenue</span>\n<span class=\"go\">A  False    False</span>\n<span class=\"go\">B  False    False</span>\n<span class=\"go\">C  False     True</span>\n<span class=\"go\">D  False    False</span>\n</code></pre>\n</div>\n\n<p>Compare to a MultiIndex by level.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s1\">&#39;cost&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">220</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                             <span class=\"s1\">&#39;revenue&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">175</span><span class=\"p\">,</span> <span class=\"mi\">225</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>                            <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s1\">&#39;Q1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Q1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Q1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Q2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Q2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Q2&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                                   <span class=\"p\">[</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_multindex</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">      cost  revenue</span>\n<span class=\"go\">Q1 A   250      100</span>\n<span class=\"go\">   B   150      250</span>\n<span class=\"go\">   C   100      300</span>\n<span class=\"go\">Q2 A   150      200</span>\n<span class=\"go\">   B   300      175</span>\n<span class=\"go\">   C   220      225</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">le</span><span class=\"p\">(</span><span class=\"n\">df_multindex</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">       cost  revenue</span>\n<span class=\"go\">Q1 A   True     True</span>\n<span class=\"go\">   B   True     True</span>\n<span class=\"go\">   C   True     True</span>\n<span class=\"go\">Q2 A  False     True</span>\n<span class=\"go\">   B   True    False</span>\n<span class=\"go\">   C   True    False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;columns&#39;</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series": {"fullname": "etl.pkg.dataframe.Series", "modulename": "etl.pkg.dataframe", "qualname": "Series", "kind": "class", "doc": "<p>Parallel Pandas Series</p>\n\n<p>Do not use this class directly.  Instead use functions like\n<code>dd.read_csv</code>, <code>dd.read_parquet</code>, or <code>dd.from_pandas</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>dsk: dict\n    The dask graph to compute this Series\n_name: str\n    The key prefix that specifies which keys in the dask comprise this\n    particular Series\nmeta: pandas.Series\n    An empty <code>pandas.Series</code> with names, dtypes, and index matching the\n    expected output.\ndivisions: tuple of index values\n    Values along which we partition our blocks on the index</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>dask.dataframe.DataFrame</p>\n", "bases": "dask.dataframe.core._Frame"}, "etl.pkg.dataframe.Series.axes": {"fullname": "etl.pkg.dataframe.Series.axes", "modulename": "etl.pkg.dataframe", "qualname": "Series.axes", "kind": "variable", "doc": "<p></p>\n"}, "etl.pkg.dataframe.Series.name": {"fullname": "etl.pkg.dataframe.Series.name", "modulename": "etl.pkg.dataframe", "qualname": "Series.name", "kind": "variable", "doc": "<p></p>\n"}, "etl.pkg.dataframe.Series.ndim": {"fullname": "etl.pkg.dataframe.Series.ndim", "modulename": "etl.pkg.dataframe", "qualname": "Series.ndim", "kind": "variable", "doc": "<p>Return dimensionality</p>\n"}, "etl.pkg.dataframe.Series.shape": {"fullname": "etl.pkg.dataframe.Series.shape", "modulename": "etl.pkg.dataframe", "qualname": "Series.shape", "kind": "variable", "doc": "<p>Return a tuple representing the dimensionality of a Series.</p>\n\n<p>The single element of the tuple is a Delayed result.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">shape</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">(dd.Scalar&lt;size-ag..., dtype=int64&gt;,)</span>\n</code></pre>\n</div>\n"}, "etl.pkg.dataframe.Series.dtype": {"fullname": "etl.pkg.dataframe.Series.dtype", "modulename": "etl.pkg.dataframe", "qualname": "Series.dtype", "kind": "variable", "doc": "<p>Return data type</p>\n"}, "etl.pkg.dataframe.Series.dt": {"fullname": "etl.pkg.dataframe.Series.dt", "modulename": "etl.pkg.dataframe", "qualname": "Series.dt", "kind": "function", "doc": "<p>Custom property-like object (descriptor) for caching accessors.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The namespace this will be accessed under, e.g. <code>df.foo</code>\naccessor : cls\n    The class with the extension methods. The class' __init__ method\n    should expect one of a <code>Series</code>, <code>DataFrame</code> or <code>Index</code> as\n    the single argument <code>data</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.cat": {"fullname": "etl.pkg.dataframe.Series.cat", "modulename": "etl.pkg.dataframe", "qualname": "Series.cat", "kind": "function", "doc": "<p>Custom property-like object (descriptor) for caching accessors.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The namespace this will be accessed under, e.g. <code>df.foo</code>\naccessor : cls\n    The class with the extension methods. The class' __init__ method\n    should expect one of a <code>Series</code>, <code>DataFrame</code> or <code>Index</code> as\n    the single argument <code>data</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.str": {"fullname": "etl.pkg.dataframe.Series.str", "modulename": "etl.pkg.dataframe", "qualname": "Series.str", "kind": "function", "doc": "<p>Custom property-like object (descriptor) for caching accessors.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The namespace this will be accessed under, e.g. <code>df.foo</code>\naccessor : cls\n    The class with the extension methods. The class' __init__ method\n    should expect one of a <code>Series</code>, <code>DataFrame</code> or <code>Index</code> as\n    the single argument <code>data</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.nbytes": {"fullname": "etl.pkg.dataframe.Series.nbytes", "modulename": "etl.pkg.dataframe", "qualname": "Series.nbytes", "kind": "variable", "doc": "<p>Number of bytes</p>\n"}, "etl.pkg.dataframe.Series.rename": {"fullname": "etl.pkg.dataframe.Series.rename", "modulename": "etl.pkg.dataframe", "qualname": "Series.rename", "kind": "function", "doc": "<p>Alter Series index labels or name</p>\n\n<p>Function / dict values must be unique (1-to-1). Labels not contained in\na dict / Series will be left as-is. Extra labels listed don't throw an\nerror.</p>\n\n<p>Alternatively, change <code>Series.name</code> with a scalar value.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>index : scalar, hashable sequence, dict-like or callable, optional\n    If dict-like or callable, the transformation is applied to the\n    index. Scalar or hashable sequence-like will alter the\n    <code>Series.name</code> attribute.\ninplace : boolean, default False\n    Whether to return a new Series or modify this one inplace.\nsorted_index : bool, default False\n    If true, the output <code>Series</code> will have known divisions inferred\n    from the input series and the transformation. Ignored for\n    non-callable/dict-like <code>index</code> or when the input series has\n    unknown divisions. Note that this may only be set to <code>True</code> if\n    you know that the transformed index is monotonically increasing. Dask\n    will check that transformed divisions are monotonic, but cannot\n    check all the values between divisions, so incorrectly setting this\n    can result in bugs.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>renamed : Series</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>pandas.Series.rename</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">sorted_index</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.round": {"fullname": "etl.pkg.dataframe.Series.round", "modulename": "etl.pkg.dataframe", "qualname": "Series.round", "kind": "function", "doc": "<p>Round each value in a Series to the given number of decimals.</p>\n\n<p>This docstring was copied from pandas.core.series.Series.round.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>decimals : int, default 0\n    Number of decimal places to round to. If decimals is negative,\n    it specifies the number of positions to the left of the decimal point.\n<em>args, *</em>kwargs\n    Additional arguments and keywords have no effect but might be\n    accepted for compatibility with NumPy.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series\n    Rounded values of the Series.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>numpy.around : Round values of an np.array.\nDataFrame.round : Round values of a DataFrame.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">1.3</span><span class=\"p\">,</span> <span class=\"mf\">2.7</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">round</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">0    0.0</span>\n<span class=\"go\">1    1.0</span>\n<span class=\"go\">2    3.0</span>\n<span class=\"go\">dtype: float64</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">decimals</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.to_timestamp": {"fullname": "etl.pkg.dataframe.Series.to_timestamp", "modulename": "etl.pkg.dataframe", "qualname": "Series.to_timestamp", "kind": "function", "doc": "<p>Cast to DatetimeIndex of timestamps, at <em>beginning</em> of period.</p>\n\n<p>This docstring was copied from pandas.core.frame.DataFrame.to_timestamp.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>freq : str, default frequency of PeriodIndex\n    Desired frequency.\nhow : {'s', 'e', 'start', 'end'}\n    Convention for converting period to timestamp; start of period\n    vs. end.\naxis : {0 or 'index', 1 or 'columns'}, default 0\n    The axis to convert (the index by default).\ncopy : bool, default True  (Not supported in Dask)\n    If False then underlying input data is not copied.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    The DataFrame has a DatetimeIndex.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">PeriodIndex</span><span class=\"p\">([</span><span class=\"s1\">&#39;2023&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2024&#39;</span><span class=\"p\">],</span> <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"s1\">&#39;Y&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;col1&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"s1\">&#39;col2&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]}</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df1</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">idx</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df1</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">      col1   col2</span>\n<span class=\"go\">2023     1      3</span>\n<span class=\"go\">2024     2      4</span>\n</code></pre>\n</div>\n\n<p>The resulting timestamps will be at the beginning of the year in this case</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df1</span> <span class=\"o\">=</span> <span class=\"n\">df1</span><span class=\"o\">.</span><span class=\"n\">to_timestamp</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df1</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">            col1   col2</span>\n<span class=\"go\">2023-01-01     1      3</span>\n<span class=\"go\">2024-01-01     2      4</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df1</span><span class=\"o\">.</span><span class=\"n\">index</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">DatetimeIndex([&#39;2023-01-01&#39;, &#39;2024-01-01&#39;], dtype=&#39;datetime64[ns]&#39;, freq=None)</span>\n</code></pre>\n</div>\n\n<p>Using <code>freq</code> which is the offset that the Timestamps will have</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df2</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">idx</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df2</span> <span class=\"o\">=</span> <span class=\"n\">df2</span><span class=\"o\">.</span><span class=\"n\">to_timestamp</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"s1\">&#39;M&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df2</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">            col1   col2</span>\n<span class=\"go\">2023-01-31     1      3</span>\n<span class=\"go\">2024-01-31     2      4</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df2</span><span class=\"o\">.</span><span class=\"n\">index</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">DatetimeIndex([&#39;2023-01-31&#39;, &#39;2024-01-31&#39;], dtype=&#39;datetime64[ns]&#39;, freq=None)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">how</span><span class=\"o\">=</span><span class=\"s1\">&#39;start&#39;</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.quantile": {"fullname": "etl.pkg.dataframe.Series.quantile", "modulename": "etl.pkg.dataframe", "qualname": "Series.quantile", "kind": "function", "doc": "<p>Approximate quantiles of Series</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>q : list/array of floats, default 0.5 (50%)\n    Iterable of numbers ranging from 0 to 1 for the desired quantiles\nmethod : {'default', 'tdigest', 'dask'}, optional\n    What method to use. By default will use dask's internal custom\n    algorithm (<code>'dask'</code>).  If set to <code>'tdigest'</code> will use tdigest\n    for floats and ints and fallback to the <code>'dask'</code> otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">q</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;default&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.median_approximate": {"fullname": "etl.pkg.dataframe.Series.median_approximate", "modulename": "etl.pkg.dataframe", "qualname": "Series.median_approximate", "kind": "function", "doc": "<p>Return the approximate median of the values over the requested axis.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>method : {'default', 'tdigest', 'dask'}, optional\n    What method to use. By default will use Dask's internal custom\n    algorithm (<code>\"dask\"</code>).  If set to <code>\"tdigest\"</code> will use tdigest\n    for floats and ints and fallback to the <code>\"dask\"</code> otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;default&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.median": {"fullname": "etl.pkg.dataframe.Series.median", "modulename": "etl.pkg.dataframe", "qualname": "Series.median", "kind": "function", "doc": "<p>Return the median of the values over the requested axis.</p>\n\n<p>This docstring was copied from pandas.core.series.Series.median.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>axis : {index (0)}  (Not supported in Dask)\n    Axis for the function to be applied on.\n    For <code>Series</code> this parameter is unused and defaults to 0.</p>\n\n<pre><code>For DataFrames, specifying ``axis=None`` will apply the aggregation\nacross both axes.\n\n.. versionadded:: 2.0.0\n</code></pre>\n\n<p>skipna : bool, default True  (Not supported in Dask)\n    Exclude NA/null values when computing the result.\nnumeric_only : bool, default False  (Not supported in Dask)\n    Include only float, int, boolean columns. Not implemented for Series.</p>\n\n<p>**kwargs\n    Additional keyword arguments to be passed to the function.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>scalar or scalar</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;default&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.groupby": {"fullname": "etl.pkg.dataframe.Series.groupby", "modulename": "etl.pkg.dataframe", "qualname": "Series.groupby", "kind": "function", "doc": "<p>Group Series using a mapper or by a Series of columns.</p>\n\n<p>This docstring was copied from pandas.core.series.Series.groupby.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>A groupby operation involves some combination of splitting the\nobject, applying a function, and combining the results. This can be\nused to group large amounts of data and compute operations on these\ngroups.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>by : mapping, function, label, pd.Grouper or list of such\n    Used to determine the groups for the groupby.\n    If <code>by</code> is a function, it's called on each value of the object's\n    index. If a dict or Series is passed, the Series or dict VALUES\n    will be used to determine the groups (the Series' values are first\n    aligned; see <code>.align()</code> method). If a list or ndarray of length\n    equal to the selected axis is passed (see the <code>groupby user guide\n    &lt;https://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html#splitting-an-object-into-groups&gt;</code>_),\n    the values are used as-is to determine the groups. A label or list\n    of labels may be passed to group by the columns in <code>self</code>.\n    Notice that a tuple is interpreted as a (single) key.\naxis : {0 or 'index', 1 or 'columns'}, default 0  (Not supported in Dask)\n    Split along rows (0) or columns (1). For <code>Series</code> this parameter\n    is unused and defaults to 0.\nlevel : int, level name, or sequence of such, default None  (Not supported in Dask)\n    If the axis is a MultiIndex (hierarchical), group by a particular\n    level or levels. Do not specify both <code>by</code> and <code>level</code>.\nas_index : bool, default True  (Not supported in Dask)\n    For aggregated output, return object with group labels as the\n    index. Only relevant for DataFrame input. as_index=False is\n    effectively \"SQL-style\" grouped output.\nsort : bool, default True\n    Sort group keys. Get better performance by turning this off.\n    Note this does not influence the order of observations within each\n    group. Groupby preserves the order of rows within each group.</p>\n\n<pre><code>.. versionchanged:: 2.0.0\n\n    Specifying ``sort=False`` with an ordered categorical grouper will no\n    longer sort the values.\n</code></pre>\n\n<p>group_keys : bool, default True\n    When calling apply and the <code>by</code> argument produces a like-indexed\n    (i.e. :ref:<code>a transform &lt;groupby.transform&gt;</code>) result, add group keys to\n    index to identify pieces. By default group keys are not included\n    when the result's index (and column) labels match the inputs, and\n    are included otherwise.</p>\n\n<pre><code>.. versionchanged:: 1.5.0\n\n   Warns that ``group_keys`` will no longer be ignored when the\n   result from ``apply`` is a like-indexed Series or DataFrame.\n   Specify ``group_keys`` explicitly to include the group keys or\n   not.\n\n.. versionchanged:: 2.0.0\n\n   ``group_keys`` now defaults to ``True``.\n</code></pre>\n\n<p>observed : bool, default False\n    This only applies if any of the groupers are Categoricals.\n    If True: only show observed values for categorical groupers.\n    If False: show all values for categorical groupers.\ndropna : bool, default True\n    If True, and if group keys contain NA values, NA values together\n    with row/column will be dropped.\n    If False, NA values will also be treated as the key in groups.</p>\n\n<pre><code>.. versionadded:: 1.1.0\n</code></pre>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>SeriesGroupBy\n    Returns a groupby object that contains information about the groups.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>resample : Convenience method for frequency conversion and resampling\n    of time series.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>See the <code>user guide\n&lt;https://pandas.pydata.org/pandas-docs/stable/groupby.html&gt;</code>__ for more\ndetailed usage and examples, including splitting an object into groups,\niterating through groups, selecting a group, aggregation, and more.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ser</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mf\">390.</span><span class=\"p\">,</span> <span class=\"mf\">350.</span><span class=\"p\">,</span> <span class=\"mf\">30.</span><span class=\"p\">,</span> <span class=\"mf\">20.</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;Falcon&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Falcon&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Parrot&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Parrot&#39;</span><span class=\"p\">],</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Max Speed&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ser</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">Falcon    390.0</span>\n<span class=\"go\">Falcon    350.0</span>\n<span class=\"go\">Parrot     30.0</span>\n<span class=\"go\">Parrot     20.0</span>\n<span class=\"go\">Name: Max Speed, dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ser</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">([</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;b&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;b&quot;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    210.0</span>\n<span class=\"go\">b    185.0</span>\n<span class=\"go\">Name: Max Speed, dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ser</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">Falcon    370.0</span>\n<span class=\"go\">Parrot     25.0</span>\n<span class=\"go\">Name: Max Speed, dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ser</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"n\">ser</span> <span class=\"o\">&gt;</span> <span class=\"mi\">100</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">Max Speed</span>\n<span class=\"go\">False     25.0</span>\n<span class=\"go\">True     370.0</span>\n<span class=\"go\">Name: Max Speed, dtype: float64</span>\n</code></pre>\n</div>\n\n<p><strong>Grouping by Indexes</strong></p>\n\n<p>We can groupby different levels of a hierarchical index\nusing the <code>level</code> parameter:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">arrays</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"s1\">&#39;Falcon&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Falcon&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Parrot&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Parrot&#39;</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>          <span class=\"p\">[</span><span class=\"s1\">&#39;Captive&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Wild&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Captive&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Wild&#39;</span><span class=\"p\">]]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">MultiIndex</span><span class=\"o\">.</span><span class=\"n\">from_arrays</span><span class=\"p\">(</span><span class=\"n\">arrays</span><span class=\"p\">,</span> <span class=\"n\">names</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;Animal&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Type&#39;</span><span class=\"p\">))</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ser</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mf\">390.</span><span class=\"p\">,</span> <span class=\"mf\">350.</span><span class=\"p\">,</span> <span class=\"mf\">30.</span><span class=\"p\">,</span> <span class=\"mf\">20.</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Max Speed&quot;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ser</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">Animal  Type</span>\n<span class=\"go\">Falcon  Captive    390.0</span>\n<span class=\"go\">        Wild       350.0</span>\n<span class=\"go\">Parrot  Captive     30.0</span>\n<span class=\"go\">        Wild        20.0</span>\n<span class=\"go\">Name: Max Speed, dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ser</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">Animal</span>\n<span class=\"go\">Falcon    370.0</span>\n<span class=\"go\">Parrot     25.0</span>\n<span class=\"go\">Name: Max Speed, dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ser</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"s2\">&quot;Type&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">Type</span>\n<span class=\"go\">Captive    210.0</span>\n<span class=\"go\">Wild       185.0</span>\n<span class=\"go\">Name: Max Speed, dtype: float64</span>\n</code></pre>\n</div>\n\n<p>We can also choose to include <code>NA</code> in group keys or not by defining\n<code>dropna</code> parameter, the default setting is <code>True</code>.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ser</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ser</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    3</span>\n<span class=\"go\">b    3</span>\n<span class=\"go\">dtype: int64</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ser</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">dropna</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    3</span>\n<span class=\"go\">b    3</span>\n<span class=\"go\">NaN  3</span>\n<span class=\"go\">dtype: int64</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">arrays</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;Falcon&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Falcon&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Parrot&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Parrot&#39;</span><span class=\"p\">]</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ser</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mf\">390.</span><span class=\"p\">,</span> <span class=\"mf\">350.</span><span class=\"p\">,</span> <span class=\"mf\">30.</span><span class=\"p\">,</span> <span class=\"mf\">20.</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">arrays</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Max Speed&quot;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ser</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">([</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;b&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    210.0</span>\n<span class=\"go\">b    350.0</span>\n<span class=\"go\">Name: Max Speed, dtype: float64</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ser</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">([</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;b&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"n\">dropna</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    210.0</span>\n<span class=\"go\">b    350.0</span>\n<span class=\"go\">NaN   20.0</span>\n<span class=\"go\">Name: Max Speed, dtype: float64</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">by</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">group_keys</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">observed</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dropna</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.count": {"fullname": "etl.pkg.dataframe.Series.count", "modulename": "etl.pkg.dataframe", "qualname": "Series.count", "kind": "function", "doc": "<p>Return number of non-NA/null observations in the Series.</p>\n\n<p>This docstring was copied from pandas.core.series.Series.count.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>int or Series (if level specified)\n    Number of non-null values in the Series.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.count : Count non-NA cells for each column or row.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">2</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">split_every</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.mode": {"fullname": "etl.pkg.dataframe.Series.mode", "modulename": "etl.pkg.dataframe", "qualname": "Series.mode", "kind": "function", "doc": "<p>Return the mode(s) of the Series.</p>\n\n<p>This docstring was copied from pandas.core.series.Series.mode.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>The mode is the value that appears most often. There can be multiple modes.</p>\n\n<p>Always returns Series even if only one value is returned.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>dropna : bool, default True\n    Don't consider counts of NaN/NaT.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series\n    Modes of the Series in sorted order.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dropna</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">split_every</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.explode": {"fullname": "etl.pkg.dataframe.Series.explode", "modulename": "etl.pkg.dataframe", "qualname": "Series.explode", "kind": "function", "doc": "<p>Transform each element of a list-like to a row.</p>\n\n<p>This docstring was copied from pandas.core.series.Series.explode.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>ignore_index : bool, default False  (Not supported in Dask)\n    If True, the resulting index will be labeled 0, 1, \u2026, n - 1.</p>\n\n<pre><code>.. versionadded:: 1.1.0\n</code></pre>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series\n    Exploded lists to rows; index will be duplicated for these rows.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>Series.str.split : Split string values on specified separator.\nSeries.unstack : Unstack, a.k.a. pivot, Series with MultiIndex\n    to produce DataFrame.\nDataFrame.melt : Unpivot a DataFrame from wide format to long format.\nDataFrame.explode : Explode a DataFrame from list-like\n    columns to long format.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This routine will explode list-likes including lists, tuples, sets,\nSeries, and np.ndarray. The result dtype of the subset rows will\nbe object. Scalars will be returned unchanged, and empty list-likes will\nresult in a np.nan for that row. In addition, the ordering of elements in\nthe output will be non-deterministic when exploding sets.</p>\n\n<p>Reference :ref:<code>the user guide &lt;reshaping.explode&gt;</code> for more examples.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">,</span> <span class=\"p\">[],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">0    [1, 2, 3]</span>\n<span class=\"go\">1          foo</span>\n<span class=\"go\">2           []</span>\n<span class=\"go\">3       [3, 4]</span>\n<span class=\"go\">dtype: object</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">explode</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">0      1</span>\n<span class=\"go\">0      2</span>\n<span class=\"go\">0      3</span>\n<span class=\"go\">1    foo</span>\n<span class=\"go\">2    NaN</span>\n<span class=\"go\">3      3</span>\n<span class=\"go\">3      4</span>\n<span class=\"go\">dtype: object</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.unique": {"fullname": "etl.pkg.dataframe.Series.unique", "modulename": "etl.pkg.dataframe", "qualname": "Series.unique", "kind": "function", "doc": "<p>Return Series of unique values in the object. Includes NA values.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>uniques : Series</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">split_every</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">split_out</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.nunique": {"fullname": "etl.pkg.dataframe.Series.nunique", "modulename": "etl.pkg.dataframe", "qualname": "Series.nunique", "kind": "function", "doc": "<p>Return number of unique elements in the object.</p>\n\n<p>This docstring was copied from pandas.core.series.Series.nunique.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Excludes NA values by default.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>dropna : bool, default True\n    Don't include NaN in the count.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>int</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.nunique: Method nunique for DataFrame.\nSeries.count: Count non-NA/null observations in the Series.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">0    1</span>\n<span class=\"go\">1    3</span>\n<span class=\"go\">2    5</span>\n<span class=\"go\">3    7</span>\n<span class=\"go\">4    7</span>\n<span class=\"go\">dtype: int64</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">nunique</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">4</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">split_every</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">dropna</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.value_counts": {"fullname": "etl.pkg.dataframe.Series.value_counts", "modulename": "etl.pkg.dataframe", "qualname": "Series.value_counts", "kind": "function", "doc": "<p>Return a Series containing counts of unique values.</p>\n\n<p>This docstring was copied from pandas.core.series.Series.value_counts.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Note: dropna is only supported in pandas &gt;= 1.1.0, in which case it defaults to\nTrue.</p>\n\n<p>The resulting object will be in descending order so that the\nfirst element is the most frequently-occurring element.\nExcludes NA values by default.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>normalize : bool, default False\n    If True then the object returned will contain the relative\n    frequencies of the unique values.\nsort : bool, default True\n    Sort by frequencies.\nascending : bool, default False\n    Sort in ascending order.\nbins : int, optional  (Not supported in Dask)\n    Rather than count values, group them into half-open bins,\n    a convenience for <code>pd.cut</code>, only works with numeric data.\ndropna : bool, default True\n    Don't include counts of NaN.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>Series.count: Number of non-NA elements in a Series.\nDataFrame.count: Number of non-NA elements in a DataFrame.\nDataFrame.value_counts: Equivalent method on DataFrames.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Index</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">value_counts</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">3.0    2</span>\n<span class=\"go\">1.0    1</span>\n<span class=\"go\">2.0    1</span>\n<span class=\"go\">4.0    1</span>\n<span class=\"go\">Name: count, dtype: int64</span>\n</code></pre>\n</div>\n\n<p>With <code>normalize</code> set to <code>True</code>, returns the relative frequency by\ndividing all values by the sum of values.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">value_counts</span><span class=\"p\">(</span><span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">3.0    0.4</span>\n<span class=\"go\">1.0    0.2</span>\n<span class=\"go\">2.0    0.2</span>\n<span class=\"go\">4.0    0.2</span>\n<span class=\"go\">Name: proportion, dtype: float64</span>\n</code></pre>\n</div>\n\n<p><strong>bins</strong></p>\n\n<p>Bins can be useful for going from a continuous variable to a\ncategorical variable; instead of counting unique\napparitions of values, divide the index in the specified\nnumber of half-open bins.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">value_counts</span><span class=\"p\">(</span><span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">(0.996, 2.0]    2</span>\n<span class=\"go\">(2.0, 3.0]      2</span>\n<span class=\"go\">(3.0, 4.0]      1</span>\n<span class=\"go\">Name: count, dtype: int64</span>\n</code></pre>\n</div>\n\n<p><strong>dropna</strong></p>\n\n<p>With <code>dropna</code> set to <code>False</code> we can also see NaN index values.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">value_counts</span><span class=\"p\">(</span><span class=\"n\">dropna</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">3.0    2</span>\n<span class=\"go\">1.0    1</span>\n<span class=\"go\">2.0    1</span>\n<span class=\"go\">4.0    1</span>\n<span class=\"go\">NaN    1</span>\n<span class=\"go\">Name: count, dtype: int64</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ascending</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">dropna</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">split_every</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">split_out</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.nlargest": {"fullname": "etl.pkg.dataframe.Series.nlargest", "modulename": "etl.pkg.dataframe", "qualname": "Series.nlargest", "kind": "function", "doc": "<p>Return the largest <code>n</code> elements.</p>\n\n<p>This docstring was copied from pandas.core.series.Series.nlargest.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>n : int, default 5\n    Return this many descending sorted values.\nkeep : {'first', 'last', 'all'}, default 'first'  (Not supported in Dask)\n    When there are duplicate values that cannot all fit in a\n    Series of <code>n</code> elements:</p>\n\n<pre><code>- ``first`` : return the first `n` occurrences in order\n  of appearance.\n- ``last`` : return the last `n` occurrences in reverse\n  order of appearance.\n- ``all`` : keep all occurrences. This can result in a Series of\n  size larger than `n`.\n</code></pre>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series\n    The <code>n</code> largest values in the Series, sorted in decreasing order.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>Series.nsmallest: Get the <code>n</code> smallest elements.\nSeries.sort_values: Sort Series by values.\nSeries.head: Return the first <code>n</code> rows.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>Faster than <code>.sort_values(ascending=False).head(n)</code> for small <code>n</code>\nrelative to the size of the <code>Series</code> object.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">countries_population</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;Italy&quot;</span><span class=\"p\">:</span> <span class=\"mi\">59000000</span><span class=\"p\">,</span> <span class=\"s2\">&quot;France&quot;</span><span class=\"p\">:</span> <span class=\"mi\">65000000</span><span class=\"p\">,</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                        <span class=\"s2\">&quot;Malta&quot;</span><span class=\"p\">:</span> <span class=\"mi\">434000</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Maldives&quot;</span><span class=\"p\">:</span> <span class=\"mi\">434000</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                        <span class=\"s2\">&quot;Brunei&quot;</span><span class=\"p\">:</span> <span class=\"mi\">434000</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Iceland&quot;</span><span class=\"p\">:</span> <span class=\"mi\">337000</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                        <span class=\"s2\">&quot;Nauru&quot;</span><span class=\"p\">:</span> <span class=\"mi\">11300</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Tuvalu&quot;</span><span class=\"p\">:</span> <span class=\"mi\">11300</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                        <span class=\"s2\">&quot;Anguilla&quot;</span><span class=\"p\">:</span> <span class=\"mi\">11300</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Montserrat&quot;</span><span class=\"p\">:</span> <span class=\"mi\">5200</span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">(</span><span class=\"n\">countries_population</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">Italy       59000000</span>\n<span class=\"go\">France      65000000</span>\n<span class=\"go\">Malta         434000</span>\n<span class=\"go\">Maldives      434000</span>\n<span class=\"go\">Brunei        434000</span>\n<span class=\"go\">Iceland       337000</span>\n<span class=\"go\">Nauru          11300</span>\n<span class=\"go\">Tuvalu         11300</span>\n<span class=\"go\">Anguilla       11300</span>\n<span class=\"go\">Montserrat      5200</span>\n<span class=\"go\">dtype: int64</span>\n</code></pre>\n</div>\n\n<p>The <code>n</code> largest elements where <code>n=5</code> by default.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">nlargest</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">France      65000000</span>\n<span class=\"go\">Italy       59000000</span>\n<span class=\"go\">Malta         434000</span>\n<span class=\"go\">Maldives      434000</span>\n<span class=\"go\">Brunei        434000</span>\n<span class=\"go\">dtype: int64</span>\n</code></pre>\n</div>\n\n<p>The <code>n</code> largest elements where <code>n=3</code>. Default <code>keep</code> value is 'first'\nso Malta will be kept.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">nlargest</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">France    65000000</span>\n<span class=\"go\">Italy     59000000</span>\n<span class=\"go\">Malta       434000</span>\n<span class=\"go\">dtype: int64</span>\n</code></pre>\n</div>\n\n<p>The <code>n</code> largest elements where <code>n=3</code> and keeping the last duplicates.\nBrunei will be kept since it is the last with value 434000 based on\nthe index order.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">nlargest</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">keep</span><span class=\"o\">=</span><span class=\"s1\">&#39;last&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">France      65000000</span>\n<span class=\"go\">Italy       59000000</span>\n<span class=\"go\">Brunei        434000</span>\n<span class=\"go\">dtype: int64</span>\n</code></pre>\n</div>\n\n<p>The <code>n</code> largest elements where <code>n=3</code> with all duplicates kept. Note\nthat the returned Series has five elements due to the three duplicates.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">nlargest</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">keep</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">France      65000000</span>\n<span class=\"go\">Italy       59000000</span>\n<span class=\"go\">Malta         434000</span>\n<span class=\"go\">Maldives      434000</span>\n<span class=\"go\">Brunei        434000</span>\n<span class=\"go\">dtype: int64</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">5</span>, </span><span class=\"param\"><span class=\"n\">split_every</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.nsmallest": {"fullname": "etl.pkg.dataframe.Series.nsmallest", "modulename": "etl.pkg.dataframe", "qualname": "Series.nsmallest", "kind": "function", "doc": "<p>Return the smallest <code>n</code> elements.</p>\n\n<p>This docstring was copied from pandas.core.series.Series.nsmallest.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>n : int, default 5\n    Return this many ascending sorted values.\nkeep : {'first', 'last', 'all'}, default 'first'  (Not supported in Dask)\n    When there are duplicate values that cannot all fit in a\n    Series of <code>n</code> elements:</p>\n\n<pre><code>- ``first`` : return the first `n` occurrences in order\n  of appearance.\n- ``last`` : return the last `n` occurrences in reverse\n  order of appearance.\n- ``all`` : keep all occurrences. This can result in a Series of\n  size larger than `n`.\n</code></pre>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series\n    The <code>n</code> smallest values in the Series, sorted in increasing order.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>Series.nlargest: Get the <code>n</code> largest elements.\nSeries.sort_values: Sort Series by values.\nSeries.head: Return the first <code>n</code> rows.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>Faster than <code>.sort_values().head(n)</code> for small <code>n</code> relative to\nthe size of the <code>Series</code> object.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">countries_population</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;Italy&quot;</span><span class=\"p\">:</span> <span class=\"mi\">59000000</span><span class=\"p\">,</span> <span class=\"s2\">&quot;France&quot;</span><span class=\"p\">:</span> <span class=\"mi\">65000000</span><span class=\"p\">,</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>                        <span class=\"s2\">&quot;Brunei&quot;</span><span class=\"p\">:</span> <span class=\"mi\">434000</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Malta&quot;</span><span class=\"p\">:</span> <span class=\"mi\">434000</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                        <span class=\"s2\">&quot;Maldives&quot;</span><span class=\"p\">:</span> <span class=\"mi\">434000</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Iceland&quot;</span><span class=\"p\">:</span> <span class=\"mi\">337000</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                        <span class=\"s2\">&quot;Nauru&quot;</span><span class=\"p\">:</span> <span class=\"mi\">11300</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Tuvalu&quot;</span><span class=\"p\">:</span> <span class=\"mi\">11300</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                        <span class=\"s2\">&quot;Anguilla&quot;</span><span class=\"p\">:</span> <span class=\"mi\">11300</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Montserrat&quot;</span><span class=\"p\">:</span> <span class=\"mi\">5200</span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">(</span><span class=\"n\">countries_population</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">Italy       59000000</span>\n<span class=\"go\">France      65000000</span>\n<span class=\"go\">Brunei        434000</span>\n<span class=\"go\">Malta         434000</span>\n<span class=\"go\">Maldives      434000</span>\n<span class=\"go\">Iceland       337000</span>\n<span class=\"go\">Nauru          11300</span>\n<span class=\"go\">Tuvalu         11300</span>\n<span class=\"go\">Anguilla       11300</span>\n<span class=\"go\">Montserrat      5200</span>\n<span class=\"go\">dtype: int64</span>\n</code></pre>\n</div>\n\n<p>The <code>n</code> smallest elements where <code>n=5</code> by default.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">nsmallest</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">Montserrat    5200</span>\n<span class=\"go\">Nauru        11300</span>\n<span class=\"go\">Tuvalu       11300</span>\n<span class=\"go\">Anguilla     11300</span>\n<span class=\"go\">Iceland     337000</span>\n<span class=\"go\">dtype: int64</span>\n</code></pre>\n</div>\n\n<p>The <code>n</code> smallest elements where <code>n=3</code>. Default <code>keep</code> value is\n'first' so Nauru and Tuvalu will be kept.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">nsmallest</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">Montserrat   5200</span>\n<span class=\"go\">Nauru       11300</span>\n<span class=\"go\">Tuvalu      11300</span>\n<span class=\"go\">dtype: int64</span>\n</code></pre>\n</div>\n\n<p>The <code>n</code> smallest elements where <code>n=3</code> and keeping the last\nduplicates. Anguilla and Tuvalu will be kept since they are the last\nwith value 11300 based on the index order.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">nsmallest</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">keep</span><span class=\"o\">=</span><span class=\"s1\">&#39;last&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">Montserrat   5200</span>\n<span class=\"go\">Anguilla    11300</span>\n<span class=\"go\">Tuvalu      11300</span>\n<span class=\"go\">dtype: int64</span>\n</code></pre>\n</div>\n\n<p>The <code>n</code> smallest elements where <code>n=3</code> with all duplicates kept. Note\nthat the returned Series has four elements due to the three duplicates.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">nsmallest</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">keep</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">Montserrat   5200</span>\n<span class=\"go\">Nauru       11300</span>\n<span class=\"go\">Tuvalu      11300</span>\n<span class=\"go\">Anguilla    11300</span>\n<span class=\"go\">dtype: int64</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">5</span>, </span><span class=\"param\"><span class=\"n\">split_every</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.isin": {"fullname": "etl.pkg.dataframe.Series.isin", "modulename": "etl.pkg.dataframe", "qualname": "Series.isin", "kind": "function", "doc": "<p>Whether elements in Series are contained in <code>values</code>.</p>\n\n<p>This docstring was copied from pandas.core.series.Series.isin.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Return a boolean Series showing whether each element in the Series\nmatches an element in the passed sequence of <code>values</code> exactly.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>values : set or list-like\n    The sequence of values to test. Passing in a single string will\n    raise a <code>TypeError</code>. Instead, turn a single string into a\n    list of one element.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series\n    Series of booleans indicating if each element is in values.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>TypeError</p>\n\n<ul>\n<li>If <code>values</code> is a string</li>\n</ul>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.isin : Equivalent method on DataFrame.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"s1\">&#39;lama&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;cow&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;lama&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;beetle&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;lama&#39;</span><span class=\"p\">,</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>               <span class=\"s1\">&#39;hippo&#39;</span><span class=\"p\">],</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;animal&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">isin</span><span class=\"p\">([</span><span class=\"s1\">&#39;cow&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;lama&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">0     True</span>\n<span class=\"go\">1     True</span>\n<span class=\"go\">2     True</span>\n<span class=\"go\">3    False</span>\n<span class=\"go\">4     True</span>\n<span class=\"go\">5    False</span>\n<span class=\"go\">Name: animal, dtype: bool</span>\n</code></pre>\n</div>\n\n<p>To invert the boolean values, use the <code>~</code> operator:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"o\">~</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">isin</span><span class=\"p\">([</span><span class=\"s1\">&#39;cow&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;lama&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">0    False</span>\n<span class=\"go\">1    False</span>\n<span class=\"go\">2    False</span>\n<span class=\"go\">3     True</span>\n<span class=\"go\">4    False</span>\n<span class=\"go\">5     True</span>\n<span class=\"go\">Name: animal, dtype: bool</span>\n</code></pre>\n</div>\n\n<p>Passing a single string as <code>s.isin('lama')</code> will raise an error. Use\na list of one element instead:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">isin</span><span class=\"p\">([</span><span class=\"s1\">&#39;lama&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">0     True</span>\n<span class=\"go\">1    False</span>\n<span class=\"go\">2     True</span>\n<span class=\"go\">3    False</span>\n<span class=\"go\">4     True</span>\n<span class=\"go\">5    False</span>\n<span class=\"go\">Name: animal, dtype: bool</span>\n</code></pre>\n</div>\n\n<p>Strings and integers are distinct and are therefore not comparable:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">isin</span><span class=\"p\">([</span><span class=\"s1\">&#39;1&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">0    False</span>\n<span class=\"go\">dtype: bool</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mf\">1.1</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">isin</span><span class=\"p\">([</span><span class=\"s1\">&#39;1.1&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">0    False</span>\n<span class=\"go\">dtype: bool</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">values</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.map": {"fullname": "etl.pkg.dataframe.Series.map", "modulename": "etl.pkg.dataframe", "qualname": "Series.map", "kind": "function", "doc": "<p>Map values of Series according to an input mapping or function.</p>\n\n<p>This docstring was copied from pandas.core.series.Series.map.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Used for substituting each value in a Series with another value,\nthat may be derived from a function, a <code>dict</code> or\na :class:<code>Series</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>arg : function, collections.abc.Mapping subclass or Series\n    Mapping correspondence.\nna_action : {None, 'ignore'}, default None\n    If 'ignore', propagate NaN values, without passing them to the\n    mapping correspondence.\nmeta : pd.DataFrame, pd.Series, dict, iterable, tuple, optional\n    An empty <code>pd.DataFrame</code> or <code>pd.Series</code> that matches the dtypes\n    and column names of the output. This metadata is necessary for\n    many algorithms in dask dataframe to work.  For ease of use, some\n    alternative inputs are also available. Instead of a <code>DataFrame</code>,\n    a <code>dict</code> of <code>{name: dtype}</code> or iterable of <code>(name, dtype)</code>\n    can be provided (note that the order of the names should match the\n    order of the columns). Instead of a series, a tuple of <code>(name,\n    dtype)</code> can be used. If not provided, dask will try to infer the\n    metadata. This may lead to unexpected results, so providing\n    <code>meta</code> is recommended. For more information, see\n    <code>dask.dataframe.utils.make_meta</code>.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series\n    Same index as caller.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>Series.apply : For applying more complex functions on a Series.\nDataFrame.apply : Apply a function row-/column-wise.\nDataFrame.applymap : Apply a function elementwise on a whole DataFrame.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>When <code>arg</code> is a dictionary, values in Series that are not in the\ndictionary (as keys) are converted to <code>NaN</code>. However, if the\ndictionary is a <code>dict</code> subclass that defines <code>__missing__</code> (i.e.\nprovides a method for default values), then this default is used\nrather than <code>NaN</code>.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"s1\">&#39;cat&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;dog&#39;</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rabbit&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">0      cat</span>\n<span class=\"go\">1      dog</span>\n<span class=\"go\">2      NaN</span>\n<span class=\"go\">3   rabbit</span>\n<span class=\"go\">dtype: object</span>\n</code></pre>\n</div>\n\n<p><code>map</code> accepts a <code>dict</code> or a <code>Series</code>. Values that are not found\nin the <code>dict</code> are converted to <code>NaN</code>, unless the dict has a default\nvalue (e.g. <code>defaultdict</code>):</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">({</span><span class=\"s1\">&#39;cat&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;kitten&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;dog&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;puppy&#39;</span><span class=\"p\">})</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">0   kitten</span>\n<span class=\"go\">1    puppy</span>\n<span class=\"go\">2      NaN</span>\n<span class=\"go\">3      NaN</span>\n<span class=\"go\">dtype: object</span>\n</code></pre>\n</div>\n\n<p>It also accepts a function:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"s1\">&#39;I am a </span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">0       I am a cat</span>\n<span class=\"go\">1       I am a dog</span>\n<span class=\"go\">2       I am a nan</span>\n<span class=\"go\">3    I am a rabbit</span>\n<span class=\"go\">dtype: object</span>\n</code></pre>\n</div>\n\n<p>To avoid applying the function to missing values (and keep them as\n<code>NaN</code>) <code>na_action='ignore'</code> can be used:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"s1\">&#39;I am a </span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">,</span> <span class=\"n\">na_action</span><span class=\"o\">=</span><span class=\"s1\">&#39;ignore&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">0     I am a cat</span>\n<span class=\"go\">1     I am a dog</span>\n<span class=\"go\">2            NaN</span>\n<span class=\"go\">3  I am a rabbit</span>\n<span class=\"go\">dtype: object</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">arg</span>, </span><span class=\"param\"><span class=\"n\">na_action</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">meta</span><span class=\"o\">=</span><span class=\"s1\">&#39;__no_default__&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.dropna": {"fullname": "etl.pkg.dataframe.Series.dropna", "modulename": "etl.pkg.dataframe", "qualname": "Series.dropna", "kind": "function", "doc": "<p>Return a new Series with missing values removed.</p>\n\n<p>This docstring was copied from pandas.core.series.Series.dropna.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>See the :ref:<code>User Guide &lt;missing_data&gt;</code> for more on which values are\nconsidered missing, and how to work with missing data.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>axis : {0 or 'index'}  (Not supported in Dask)\n    Unused. Parameter needed for compatibility with DataFrame.\ninplace : bool, default False  (Not supported in Dask)\n    If True, do operation inplace and return None.\nhow : str, optional  (Not supported in Dask)\n    Not in use. Kept for compatibility.\nignore_index : bool, default <code>False</code>  (Not supported in Dask)\n    If <code>True</code>, the resulting axis will be labeled 0, 1, \u2026, n - 1.</p>\n\n<pre><code>.. versionadded:: 2.0.0\n</code></pre>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series or None\n    Series with NA entries dropped from it or None if <code>inplace=True</code>.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>Series.isna: Indicate missing values.\nSeries.notna : Indicate existing (non-missing) values.\nSeries.fillna : Replace missing values.\nDataFrame.dropna : Drop rows or columns which contain NA values.\nIndex.dropna : Drop missing indices.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ser</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"mf\">2.</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ser</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">0    1.0</span>\n<span class=\"go\">1    2.0</span>\n<span class=\"go\">2    NaN</span>\n<span class=\"go\">dtype: float64</span>\n</code></pre>\n</div>\n\n<p>Drop NA values from a Series.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ser</span><span class=\"o\">.</span><span class=\"n\">dropna</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">0    1.0</span>\n<span class=\"go\">1    2.0</span>\n<span class=\"go\">dtype: float64</span>\n</code></pre>\n</div>\n\n<p>Empty strings are not considered NA values. <code>None</code> is considered an\nNA value.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ser</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">NaN</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">NaT</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;I stay&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ser</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">0       NaN</span>\n<span class=\"go\">1         2</span>\n<span class=\"go\">2       NaT</span>\n<span class=\"go\">3</span>\n<span class=\"go\">4      None</span>\n<span class=\"go\">5    I stay</span>\n<span class=\"go\">dtype: object</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ser</span><span class=\"o\">.</span><span class=\"n\">dropna</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">1         2</span>\n<span class=\"go\">3</span>\n<span class=\"go\">5    I stay</span>\n<span class=\"go\">dtype: object</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.between": {"fullname": "etl.pkg.dataframe.Series.between", "modulename": "etl.pkg.dataframe", "qualname": "Series.between", "kind": "function", "doc": "<p>Return boolean Series equivalent to left &lt;= series &lt;= right.</p>\n\n<p>This docstring was copied from pandas.core.series.Series.between.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>This function returns a boolean vector containing <code>True</code> wherever the\ncorresponding Series element is between the boundary values <code>left</code> and\n<code>right</code>. NA values are treated as <code>False</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>left : scalar or list-like\n    Left boundary.\nright : scalar or list-like\n    Right boundary.\ninclusive : {\"both\", \"neither\", \"left\", \"right\"}\n    Include boundaries. Whether to set each bound as closed or open.</p>\n\n<pre><code>.. versionchanged:: 1.3.0\n</code></pre>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series\n    Series representing whether each element is between left and\n    right (inclusive).</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>Series.gt : Greater than of series and other.\nSeries.lt : Less than of series and other.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This function is equivalent to <code>(left &lt;= ser) &amp; (ser &lt;= right)</code></p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n</code></pre>\n</div>\n\n<p>Boundary values are included by default:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">between</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">0     True</span>\n<span class=\"go\">1    False</span>\n<span class=\"go\">2     True</span>\n<span class=\"go\">3    False</span>\n<span class=\"go\">4    False</span>\n<span class=\"go\">dtype: bool</span>\n</code></pre>\n</div>\n\n<p>With <code>inclusive</code> set to <code>\"neither\"</code> boundary values are excluded:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">between</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">inclusive</span><span class=\"o\">=</span><span class=\"s2\">&quot;neither&quot;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">0     True</span>\n<span class=\"go\">1    False</span>\n<span class=\"go\">2    False</span>\n<span class=\"go\">3    False</span>\n<span class=\"go\">4    False</span>\n<span class=\"go\">dtype: bool</span>\n</code></pre>\n</div>\n\n<p><code>left</code> and <code>right</code> can be any scalar value:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"s1\">&#39;Alice&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Bob&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Carol&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Eve&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">between</span><span class=\"p\">(</span><span class=\"s1\">&#39;Anna&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Daniel&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">0    False</span>\n<span class=\"go\">1     True</span>\n<span class=\"go\">2     True</span>\n<span class=\"go\">3    False</span>\n<span class=\"go\">dtype: bool</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">left</span>, </span><span class=\"param\"><span class=\"n\">right</span>, </span><span class=\"param\"><span class=\"n\">inclusive</span><span class=\"o\">=</span><span class=\"s1\">&#39;both&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.clip": {"fullname": "etl.pkg.dataframe.Series.clip", "modulename": "etl.pkg.dataframe", "qualname": "Series.clip", "kind": "function", "doc": "<p>Trim values at input threshold(s).</p>\n\n<p>This docstring was copied from pandas.core.series.Series.clip.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Assigns values outside boundary to boundary values. Thresholds\ncan be singular values or array like, and in the latter case\nthe clipping is performed element-wise in the specified axis.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>lower : float or array-like, default None\n    Minimum threshold value. All values below this\n    threshold will be set to it. A missing\n    threshold (e.g <code>NA</code>) will not clip the value.\nupper : float or array-like, default None\n    Maximum threshold value. All values above this\n    threshold will be set to it. A missing\n    threshold (e.g <code>NA</code>) will not clip the value.\naxis : {{0 or 'index', 1 or 'columns', None}}, default None  (Not supported in Dask)\n    Align object with lower and upper along the given axis.\n    For <code>Series</code> this parameter is unused and defaults to <code>None</code>.\ninplace : bool, default False  (Not supported in Dask)\n    Whether to perform the operation in place on the data.\n<em>args, *</em>kwargs\n    Additional keywords have no effect but might be accepted\n    for compatibility with numpy.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series or DataFrame or None\n    Same type as calling object with the values outside the\n    clip boundaries replaced or None if <code>inplace=True</code>.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>Series.clip : Trim values at input threshold in series.\nDataFrame.clip : Trim values at input threshold in dataframe.\nnumpy.clip : Clip (limit) the values in an array.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;col_0&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"s1\">&#39;col_1&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">]}</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   col_0  col_1</span>\n<span class=\"go\">0      9     -2</span>\n<span class=\"go\">1     -3     -7</span>\n<span class=\"go\">2      0      6</span>\n<span class=\"go\">3     -1      8</span>\n<span class=\"go\">4      5     -5</span>\n</code></pre>\n</div>\n\n<p>Clips per column using lower and upper thresholds:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">clip</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   col_0  col_1</span>\n<span class=\"go\">0      6     -2</span>\n<span class=\"go\">1     -3     -4</span>\n<span class=\"go\">2      0      6</span>\n<span class=\"go\">3     -1      6</span>\n<span class=\"go\">4      5     -4</span>\n</code></pre>\n</div>\n\n<p>Clips using specific lower and upper thresholds per column element:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">0    2</span>\n<span class=\"go\">1   -4</span>\n<span class=\"go\">2   -1</span>\n<span class=\"go\">3    6</span>\n<span class=\"go\">4    3</span>\n<span class=\"go\">dtype: int64</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">clip</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">t</span> <span class=\"o\">+</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   col_0  col_1</span>\n<span class=\"go\">0      6      2</span>\n<span class=\"go\">1     -3     -4</span>\n<span class=\"go\">2      0      3</span>\n<span class=\"go\">3      6      8</span>\n<span class=\"go\">4      5      3</span>\n</code></pre>\n</div>\n\n<p>Clips using specific lower threshold per column element, with missing values:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">NaN</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">0    2.0</span>\n<span class=\"go\">1   -4.0</span>\n<span class=\"go\">2    NaN</span>\n<span class=\"go\">3    6.0</span>\n<span class=\"go\">4    3.0</span>\n<span class=\"go\">dtype: float64</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">clip</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">col_0  col_1</span>\n<span class=\"go\">0      9      2</span>\n<span class=\"go\">1     -3     -4</span>\n<span class=\"go\">2      0      6</span>\n<span class=\"go\">3      6      8</span>\n<span class=\"go\">4      5      3</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lower</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">upper</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">out</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.clip_lower": {"fullname": "etl.pkg.dataframe.Series.clip_lower", "modulename": "etl.pkg.dataframe", "qualname": "Series.clip_lower", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">threshold</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.clip_upper": {"fullname": "etl.pkg.dataframe.Series.clip_upper", "modulename": "etl.pkg.dataframe", "qualname": "Series.clip_upper", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">threshold</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.align": {"fullname": "etl.pkg.dataframe.Series.align", "modulename": "etl.pkg.dataframe", "qualname": "Series.align", "kind": "function", "doc": "<p>Align two objects on their axes with the specified join method.</p>\n\n<p>This docstring was copied from pandas.core.series.Series.align.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Join method is specified for each axis Index.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : DataFrame or Series\njoin : {'outer', 'inner', 'left', 'right'}, default 'outer'\naxis : allowed axis of the other object, default None\n    Align on index (0), columns (1), or both (None).\nlevel : int or level name, default None  (Not supported in Dask)\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\ncopy : bool, default True  (Not supported in Dask)\n    Always returns new objects. If copy=False and no reindexing is\n    required then original objects are returned.\nfill_value : scalar, default np.NaN\n    Value to use for missing values. Defaults to NaN, but can be any\n    \"compatible\" value.\nmethod : {'backfill', 'bfill', 'pad', 'ffill', None}, default None  (Not supported in Dask)\n    Method to use for filling holes in reindexed Series:</p>\n\n<pre><code>- pad / ffill: propagate last valid observation forward to next valid.\n- backfill / bfill: use NEXT valid observation to fill gap.\n</code></pre>\n\n<p>limit : int, default None  (Not supported in Dask)\n    If method is specified, this is the maximum number of consecutive\n    NaN values to forward/backward fill. In other words, if there is\n    a gap with more than this number of consecutive NaNs, it will only\n    be partially filled. If method is not specified, this is the\n    maximum number of entries along the entire axis where NaNs will be\n    filled. Must be greater than 0 if not None.\nfill_axis : {0 or 'index'}, default 0  (Not supported in Dask)\n    Filling axis, method and limit.\nbroadcast_axis : {0 or 'index'}, default None  (Not supported in Dask)\n    Broadcast values along this axis, if aligning two objects of\n    different dimensions.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tuple of (Series, type of other)\n    Aligned objects.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>    <span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]],</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;D&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;B&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;E&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;A&quot;</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>    <span class=\"p\">[[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">600</span><span class=\"p\">,</span> <span class=\"mi\">700</span><span class=\"p\">,</span> <span class=\"mi\">800</span><span class=\"p\">,</span> <span class=\"mi\">900</span><span class=\"p\">]],</span>\n<span class=\"gp\">... </span>    <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;A&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;B&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;C&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;D&quot;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>    <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   D  B  E  A</span>\n<span class=\"go\">1  1  2  3  4</span>\n<span class=\"go\">2  6  7  8  9</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">other</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    A    B    C    D</span>\n<span class=\"go\">2   10   20   30   40</span>\n<span class=\"go\">3   60   70   80   90</span>\n<span class=\"go\">4  600  700  800  900</span>\n</code></pre>\n</div>\n\n<p>Align on columns:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">align</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">join</span><span class=\"o\">=</span><span class=\"s2\">&quot;outer&quot;</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">left</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   A  B   C  D  E</span>\n<span class=\"go\">1  4  2 NaN  1  3</span>\n<span class=\"go\">2  9  7 NaN  6  8</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">right</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    A    B    C    D   E</span>\n<span class=\"go\">2   10   20   30   40 NaN</span>\n<span class=\"go\">3   60   70   80   90 NaN</span>\n<span class=\"go\">4  600  700  800  900 NaN</span>\n</code></pre>\n</div>\n\n<p>We can also align on the index:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">align</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">join</span><span class=\"o\">=</span><span class=\"s2\">&quot;outer&quot;</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">left</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    D    B    E    A</span>\n<span class=\"go\">1  1.0  2.0  3.0  4.0</span>\n<span class=\"go\">2  6.0  7.0  8.0  9.0</span>\n<span class=\"go\">3  NaN  NaN  NaN  NaN</span>\n<span class=\"go\">4  NaN  NaN  NaN  NaN</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">right</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">    A      B      C      D</span>\n<span class=\"go\">1    NaN    NaN    NaN    NaN</span>\n<span class=\"go\">2   10.0   20.0   30.0   40.0</span>\n<span class=\"go\">3   60.0   70.0   80.0   90.0</span>\n<span class=\"go\">4  600.0  700.0  800.0  900.0</span>\n</code></pre>\n</div>\n\n<p>Finally, the default <code>axis=None</code> will align on both index and columns:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">align</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">join</span><span class=\"o\">=</span><span class=\"s2\">&quot;outer&quot;</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">left</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">     A    B   C    D    E</span>\n<span class=\"go\">1  4.0  2.0 NaN  1.0  3.0</span>\n<span class=\"go\">2  9.0  7.0 NaN  6.0  8.0</span>\n<span class=\"go\">3  NaN  NaN NaN  NaN  NaN</span>\n<span class=\"go\">4  NaN  NaN NaN  NaN  NaN</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">right</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">       A      B      C      D   E</span>\n<span class=\"go\">1    NaN    NaN    NaN    NaN NaN</span>\n<span class=\"go\">2   10.0   20.0   30.0   40.0 NaN</span>\n<span class=\"go\">3   60.0   70.0   80.0   90.0 NaN</span>\n<span class=\"go\">4  600.0  700.0  800.0  900.0 NaN</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">join</span><span class=\"o\">=</span><span class=\"s1\">&#39;outer&#39;</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.combine": {"fullname": "etl.pkg.dataframe.Series.combine", "modulename": "etl.pkg.dataframe", "qualname": "Series.combine", "kind": "function", "doc": "<p>Combine the Series with a Series or scalar according to <code>func</code>.</p>\n\n<p>This docstring was copied from pandas.core.series.Series.combine.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Combine the Series and <code>other</code> using <code>func</code> to perform elementwise\nselection for combined Series.\n<code>fill_value</code> is assumed when value is missing at some index\nfrom one of the two objects being combined.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : Series or scalar\n    The value(s) to be combined with the <code>Series</code>.\nfunc : function\n    Function that takes two scalars as inputs and returns an element.\nfill_value : scalar, optional\n    The value to assume when an index is missing from\n    one Series or the other. The default specifies to use the\n    appropriate NaN value for the underlying dtype of the Series.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series\n    The result of combining the Series with the other object.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>Series.combine_first : Combine Series values, choosing the calling\n    Series' values first.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<p>Consider 2 Datasets <code>s1</code> and <code>s2</code> containing\nhighest clocked speeds of different birds.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">({</span><span class=\"s1\">&#39;falcon&#39;</span><span class=\"p\">:</span> <span class=\"mf\">330.0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;eagle&#39;</span><span class=\"p\">:</span> <span class=\"mf\">160.0</span><span class=\"p\">})</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s1</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">falcon    330.0</span>\n<span class=\"go\">eagle     160.0</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s2</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">({</span><span class=\"s1\">&#39;falcon&#39;</span><span class=\"p\">:</span> <span class=\"mf\">345.0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;eagle&#39;</span><span class=\"p\">:</span> <span class=\"mf\">200.0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;duck&#39;</span><span class=\"p\">:</span> <span class=\"mf\">30.0</span><span class=\"p\">})</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s2</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">falcon    345.0</span>\n<span class=\"go\">eagle     200.0</span>\n<span class=\"go\">duck       30.0</span>\n<span class=\"go\">dtype: float64</span>\n</code></pre>\n</div>\n\n<p>Now, to combine the two datasets and view the highest speeds\nof the birds across the two datasets</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"p\">(</span><span class=\"n\">s2</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">duck        NaN</span>\n<span class=\"go\">eagle     200.0</span>\n<span class=\"go\">falcon    345.0</span>\n<span class=\"go\">dtype: float64</span>\n</code></pre>\n</div>\n\n<p>In the previous example, the resulting value for duck is missing,\nbecause the maximum of a NaN and a float is a NaN.\nSo, in the example, we set <code>fill_value=0</code>,\nso the maximum value returned will be the value from some dataset.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"p\">(</span><span class=\"n\">s2</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">duck       30.0</span>\n<span class=\"go\">eagle     200.0</span>\n<span class=\"go\">falcon    345.0</span>\n<span class=\"go\">dtype: float64</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">func</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.squeeze": {"fullname": "etl.pkg.dataframe.Series.squeeze", "modulename": "etl.pkg.dataframe", "qualname": "Series.squeeze", "kind": "function", "doc": "<p>Squeeze 1 dimensional axis objects into scalars.</p>\n\n<p>This docstring was copied from pandas.core.series.Series.squeeze.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Series or DataFrames with a single element are squeezed to a scalar.\nDataFrames with a single column or a single row are squeezed to a\nSeries. Otherwise the object is unchanged.</p>\n\n<p>This method is most useful when you don't know if your\nobject is a Series or DataFrame, but you do know it has just a single\ncolumn. In that case you can safely call <code>squeeze</code> to ensure you have a\nSeries.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>axis : {0 or 'index', 1 or 'columns', None}, default None  (Not supported in Dask)\n    A specific axis to squeeze. By default, all length-1 axes are\n    squeezed. For <code>Series</code> this parameter is unused and defaults to <code>None</code>.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame, Series, or scalar\n    The projection after squeezing <code>axis</code> or all the axes.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>Series.iloc : Integer-location based indexing for selecting scalars.\nDataFrame.iloc : Integer-location based indexing for selecting Series.\nSeries.to_frame : Inverse of DataFrame.squeeze for a\n    single-column DataFrame.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">primes</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n</code></pre>\n</div>\n\n<p>Slicing might produce a Series with a single value:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">even_primes</span> <span class=\"o\">=</span> <span class=\"n\">primes</span><span class=\"p\">[</span><span class=\"n\">primes</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">]</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">even_primes</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">0    2</span>\n<span class=\"go\">dtype: int64</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">even_primes</span><span class=\"o\">.</span><span class=\"n\">squeeze</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">2</span>\n</code></pre>\n</div>\n\n<p>Squeezing objects with more than one value in every axis does nothing:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">odd_primes</span> <span class=\"o\">=</span> <span class=\"n\">primes</span><span class=\"p\">[</span><span class=\"n\">primes</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">]</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">odd_primes</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">1    3</span>\n<span class=\"go\">2    5</span>\n<span class=\"go\">3    7</span>\n<span class=\"go\">dtype: int64</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">odd_primes</span><span class=\"o\">.</span><span class=\"n\">squeeze</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">1    3</span>\n<span class=\"go\">2    5</span>\n<span class=\"go\">3    7</span>\n<span class=\"go\">dtype: int64</span>\n</code></pre>\n</div>\n\n<p>Squeezing is even more effective when used with DataFrames.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]],</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   a  b</span>\n<span class=\"go\">0  1  2</span>\n<span class=\"go\">1  3  4</span>\n</code></pre>\n</div>\n\n<p>Slicing a single column will produce a DataFrame with the columns\nhaving only one value:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_a</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"p\">[[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">]]</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_a</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   a</span>\n<span class=\"go\">0  1</span>\n<span class=\"go\">1  3</span>\n</code></pre>\n</div>\n\n<p>So the columns can be squeezed down, resulting in a Series:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_a</span><span class=\"o\">.</span><span class=\"n\">squeeze</span><span class=\"p\">(</span><span class=\"s1\">&#39;columns&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">0    1</span>\n<span class=\"go\">1    3</span>\n<span class=\"go\">Name: a, dtype: int64</span>\n</code></pre>\n</div>\n\n<p>Slicing a single row from a single column will produce a single\nscalar DataFrame:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_0a</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">index</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">]]</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_0a</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">   a</span>\n<span class=\"go\">0  1</span>\n</code></pre>\n</div>\n\n<p>Squeezing the rows produces a single scalar Series:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_0a</span><span class=\"o\">.</span><span class=\"n\">squeeze</span><span class=\"p\">(</span><span class=\"s1\">&#39;rows&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1</span>\n<span class=\"go\">Name: 0, dtype: int64</span>\n</code></pre>\n</div>\n\n<p>Squeezing all axes will project directly into a scalar:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">df_0a</span><span class=\"o\">.</span><span class=\"n\">squeeze</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">1</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.combine_first": {"fullname": "etl.pkg.dataframe.Series.combine_first", "modulename": "etl.pkg.dataframe", "qualname": "Series.combine_first", "kind": "function", "doc": "<p>Update null elements with value in the same location in 'other'.</p>\n\n<p>This docstring was copied from pandas.core.series.Series.combine_first.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Combine two Series objects by filling null values in one Series with\nnon-null values from the other Series. Result index will be the union\nof the two indexes.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : Series\n    The value(s) to be used for filling null values.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series\n    The result of combining the provided Series with the other object.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>Series.combine : Perform element-wise operation on two Series\n    using a given function.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s2</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"n\">combine_first</span><span class=\"p\">(</span><span class=\"n\">s2</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">0    1.0</span>\n<span class=\"go\">1    4.0</span>\n<span class=\"go\">2    5.0</span>\n<span class=\"go\">dtype: float64</span>\n</code></pre>\n</div>\n\n<p>Null values still persist if the location of that null value\ndoes not exist in <code>other</code></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">({</span><span class=\"s1\">&#39;falcon&#39;</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"s1\">&#39;eagle&#39;</span><span class=\"p\">:</span> <span class=\"mf\">160.0</span><span class=\"p\">})</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s2</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">({</span><span class=\"s1\">&#39;eagle&#39;</span><span class=\"p\">:</span> <span class=\"mf\">200.0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;duck&#39;</span><span class=\"p\">:</span> <span class=\"mf\">30.0</span><span class=\"p\">})</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"n\">combine_first</span><span class=\"p\">(</span><span class=\"n\">s2</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">duck       30.0</span>\n<span class=\"go\">eagle     160.0</span>\n<span class=\"go\">falcon      NaN</span>\n<span class=\"go\">dtype: float64</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.to_bag": {"fullname": "etl.pkg.dataframe.Series.to_bag", "modulename": "etl.pkg.dataframe", "qualname": "Series.to_bag", "kind": "function", "doc": "<p>Create a Dask Bag from a Series</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"s1\">&#39;tuple&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.to_frame": {"fullname": "etl.pkg.dataframe.Series.to_frame", "modulename": "etl.pkg.dataframe", "qualname": "Series.to_frame", "kind": "function", "doc": "<p>Convert Series to DataFrame.</p>\n\n<p>This docstring was copied from pandas.core.series.Series.to_frame.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : object, optional\n    The passed name should substitute for the series name (if it has\n    one).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>DataFrame\n    DataFrame representation of Series.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;b&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;c&quot;</span><span class=\"p\">],</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>              <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;vals&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">to_frame</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">  vals</span>\n<span class=\"go\">0    a</span>\n<span class=\"go\">1    b</span>\n<span class=\"go\">2    c</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.to_string": {"fullname": "etl.pkg.dataframe.Series.to_string", "modulename": "etl.pkg.dataframe", "qualname": "Series.to_string", "kind": "function", "doc": "<p>Render a string representation of the Series.</p>\n\n<p>This docstring was copied from pandas.core.series.Series.to_string.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>buf : StringIO-like, optional  (Not supported in Dask)\n    Buffer to write to.\nna_rep : str, optional  (Not supported in Dask)\n    String representation of NaN to use, default 'NaN'.\nfloat_format : one-parameter function, optional  (Not supported in Dask)\n    Formatter function to apply to columns' elements if they are\n    floats, default None.\nheader : bool, default True  (Not supported in Dask)\n    Add the Series header (index name).\nindex : bool, optional  (Not supported in Dask)\n    Add index (row) labels, default True.\nlength : bool, default False  (Not supported in Dask)\n    Add the Series length.\ndtype : bool, default False  (Not supported in Dask)\n    Add the Series dtype.\nname : bool, default False  (Not supported in Dask)\n    Add the Series name if not None.\nmax_rows : int, optional\n    Maximum number of rows to show before truncating. If None, show\n    all.\nmin_rows : int, optional  (Not supported in Dask)\n    The number of rows to display in a truncated repr (when number\n    of rows is above <code>max_rows</code>).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>str or None\n    String representation of Series if <code>buf=None</code>, otherwise None.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">max_rows</span><span class=\"o\">=</span><span class=\"mi\">5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.apply": {"fullname": "etl.pkg.dataframe.Series.apply", "modulename": "etl.pkg.dataframe", "qualname": "Series.apply", "kind": "function", "doc": "<p>Parallel version of pandas.Series.apply</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>func : function\n    Function to apply\nconvert_dtype : boolean, default True\n    Try to find better dtype for elementwise function results.\n    If False, leave as dtype=object.\nmeta : pd.DataFrame, pd.Series, dict, iterable, tuple, optional\n    An empty <code>pd.DataFrame</code> or <code>pd.Series</code> that matches the dtypes\n    and column names of the output. This metadata is necessary for\n    many algorithms in dask dataframe to work.  For ease of use, some\n    alternative inputs are also available. Instead of a <code>DataFrame</code>,\n    a <code>dict</code> of <code>{name: dtype}</code> or iterable of <code>(name, dtype)</code>\n    can be provided (note that the order of the names should match the\n    order of the columns). Instead of a series, a tuple of <code>(name,\n    dtype)</code> can be used. If not provided, dask will try to infer the\n    metadata. This may lead to unexpected results, so providing\n    <code>meta</code> is recommended. For more information, see\n    <code>dask.dataframe.utils.make_meta</code>.\nargs : tuple\n    Positional arguments to pass to function in addition to the value.</p>\n\n<p>Additional keyword arguments will be passed as keywords to the function.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>applied : Series or DataFrame if func returns a Series.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">dask.dataframe</span> <span class=\"k\">as</span> <span class=\"nn\">dd</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">dd</span><span class=\"o\">.</span><span class=\"n\">from_pandas</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">npartitions</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Apply a function elementwise across the Series, passing in extra\narguments in <code>args</code> and <code>kwargs</code>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">myadd</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"n\">myadd</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,),</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mf\">1.5</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n</code></pre>\n</div>\n\n<p>By default, dask tries to infer the output metadata by running your\nprovided function on some fake data. This works well in many cases, but\ncan sometimes be expensive, or even fail. To avoid this, you can\nmanually specify the output metadata with the <code>meta</code> keyword. This\ncan be specified in many forms, for more information see\n<code>dask.dataframe.utils.make_meta</code>.</p>\n\n<p>Here we specify the output is a Series with name <code>'x'</code>, and dtype\n<code>float64</code>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"n\">myadd</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,),</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"n\">meta</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;f8&#39;</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p>In the case where the metadata doesn't change, you can also pass in\nthe object itself directly:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">meta</span><span class=\"o\">=</span><span class=\"n\">ds</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>dask.Series.map_partitions</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">func</span>,</span><span class=\"param\">\t<span class=\"n\">convert_dtype</span><span class=\"o\">=</span><span class=\"s1\">&#39;__no_default__&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">meta</span><span class=\"o\">=</span><span class=\"s1\">&#39;__no_default__&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">()</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwds</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.cov": {"fullname": "etl.pkg.dataframe.Series.cov", "modulename": "etl.pkg.dataframe", "qualname": "Series.cov", "kind": "function", "doc": "<p>Compute covariance with Series, excluding missing values.</p>\n\n<p>This docstring was copied from pandas.core.series.Series.cov.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>The two <code>Series</code> objects are not required to be the same length and\nwill be aligned internally before the covariance is calculated.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : Series\n    Series with which to compute the covariance.\nmin_periods : int, optional\n    Minimum number of observations needed to have a valid result.\nddof : int, default 1  (Not supported in Dask)\n    Delta degrees of freedom.  The divisor used in calculations\n    is <code>N - ddof</code>, where <code>N</code> represents the number of elements.</p>\n\n<pre><code>.. versionadded:: 1.1.0\n</code></pre>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>float\n    Covariance between Series and other normalized by N-1\n    (unbiased estimator).</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.cov : Compute pairwise covariance of columns.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mf\">0.90010907</span><span class=\"p\">,</span> <span class=\"mf\">0.13484424</span><span class=\"p\">,</span> <span class=\"mf\">0.62036035</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s2</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mf\">0.12528585</span><span class=\"p\">,</span> <span class=\"mf\">0.26962463</span><span class=\"p\">,</span> <span class=\"mf\">0.51111198</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"n\">cov</span><span class=\"p\">(</span><span class=\"n\">s2</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">-0.01685762652715874</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">min_periods</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">split_every</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.corr": {"fullname": "etl.pkg.dataframe.Series.corr", "modulename": "etl.pkg.dataframe", "qualname": "Series.corr", "kind": "function", "doc": "<p>Compute correlation with <code>other</code> Series, excluding missing values.</p>\n\n<p>This docstring was copied from pandas.core.series.Series.corr.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>The two <code>Series</code> objects are not required to be the same length and will be\naligned internally before the correlation function is applied.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : Series\n    Series with which to compute the correlation.\nmethod : {'pearson', 'kendall', 'spearman'} or callable\n    Method used to compute correlation:</p>\n\n<pre><code>- pearson : Standard correlation coefficient\n- kendall : Kendall Tau correlation coefficient\n- spearman : Spearman rank correlation\n- callable: Callable with input two 1d ndarrays and returning a float.\n\n.. warning::\n    Note that the returned matrix from corr will have 1 along the\n    diagonals and will be symmetric regardless of the callable's\n    behavior.\n</code></pre>\n\n<p>min_periods : int, optional\n    Minimum number of observations needed to have a valid result.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>float\n    Correlation with other.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>DataFrame.corr : Compute pairwise correlation between columns.\nDataFrame.corrwith : Compute pairwise correlation with another\n    DataFrame or Series.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>Pearson, Kendall and Spearman correlation are currently computed using pairwise complete observations.</p>\n\n<ul>\n<li><code>Pearson correlation coefficient &lt;https://en.wikipedia.org/wiki/Pearson_correlation_coefficient&gt;</code>_</li>\n<li><code>Kendall rank correlation coefficient &lt;https://en.wikipedia.org/wiki/Kendall_rank_correlation_coefficient&gt;</code>_</li>\n<li><code>Spearman's rank correlation coefficient &lt;https://en.wikipedia.org/wiki/Spearman%27s_rank_correlation_coefficient&gt;</code>_</li>\n</ul>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">histogram_intersection</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">... </span>    <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">minimum</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">round</span><span class=\"p\">(</span><span class=\"n\">decimals</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"k\">return</span> <span class=\"n\">v</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mf\">.2</span><span class=\"p\">,</span> <span class=\"mf\">.0</span><span class=\"p\">,</span> <span class=\"mf\">.6</span><span class=\"p\">,</span> <span class=\"mf\">.2</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s2</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mf\">.3</span><span class=\"p\">,</span> <span class=\"mf\">.6</span><span class=\"p\">,</span> <span class=\"mf\">.0</span><span class=\"p\">,</span> <span class=\"mf\">.1</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"n\">corr</span><span class=\"p\">(</span><span class=\"n\">s2</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"n\">histogram_intersection</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">0.3</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;pearson&#39;</span>, </span><span class=\"param\"><span class=\"n\">min_periods</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">split_every</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.autocorr": {"fullname": "etl.pkg.dataframe.Series.autocorr", "modulename": "etl.pkg.dataframe", "qualname": "Series.autocorr", "kind": "function", "doc": "<p>Compute the lag-N autocorrelation.</p>\n\n<p>This docstring was copied from pandas.core.series.Series.autocorr.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>This method computes the Pearson correlation between\nthe Series and its shifted self.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>lag : int, default 1\n    Number of lags to apply before performing autocorrelation.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>float\n    The Pearson correlation between self and self.shift(lag).</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>Series.corr : Compute the correlation between two Series.\nSeries.shift : Shift index by desired number of periods.\nDataFrame.corr : Compute pairwise correlation of columns.\nDataFrame.corrwith : Compute pairwise correlation between rows or\n    columns of two DataFrame objects.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>If the Pearson correlation is not well defined return 'NaN'.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mf\">0.25</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.05</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">autocorr</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +ELLIPSIS, +SKIP</span>\n<span class=\"go\">0.10355...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">autocorr</span><span class=\"p\">(</span><span class=\"n\">lag</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +ELLIPSIS, +SKIP</span>\n<span class=\"go\">-0.99999...</span>\n</code></pre>\n</div>\n\n<p>If the Pearson correlation is not well defined, then 'NaN' is returned.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">autocorr</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">nan</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lag</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">split_every</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.memory_usage": {"fullname": "etl.pkg.dataframe.Series.memory_usage", "modulename": "etl.pkg.dataframe", "qualname": "Series.memory_usage", "kind": "function", "doc": "<p>Return the memory usage of the Series.</p>\n\n<p>This docstring was copied from pandas.core.series.Series.memory_usage.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>The memory usage can optionally include the contribution of\nthe index and of elements of <code>object</code> dtype.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>index : bool, default True\n    Specifies whether to include the memory usage of the Series index.\ndeep : bool, default False\n    If True, introspect the data deeply by interrogating\n    <code>object</code> dtypes for system-level memory consumption, and include\n    it in the returned value.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>int\n    Bytes of memory consumed.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>numpy.ndarray.nbytes : Total bytes consumed by the elements of the\n    array.\nDataFrame.memory_usage : Bytes consumed by a DataFrame.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">memory_usage</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">152</span>\n</code></pre>\n</div>\n\n<p>Not including the index gives the size of the rest of the data, which\nis necessarily smaller:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">memory_usage</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">24</span>\n</code></pre>\n</div>\n\n<p>The memory footprint of <code>object</code> values is ignored by default:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;b&quot;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">values</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">array([&#39;a&#39;, &#39;b&#39;], dtype=object)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">memory_usage</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">144</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">memory_usage</span><span class=\"p\">(</span><span class=\"n\">deep</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">244</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">deep</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.is_monotonic_increasing": {"fullname": "etl.pkg.dataframe.Series.is_monotonic_increasing", "modulename": "etl.pkg.dataframe", "qualname": "Series.is_monotonic_increasing", "kind": "variable", "doc": "<p>Return boolean if values in the object are monotonically increasing.</p>\n\n<p>This docstring was copied from pandas.core.series.Series.is_monotonic_increasing.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool</p>\n"}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"fullname": "etl.pkg.dataframe.Series.is_monotonic_decreasing", "modulename": "etl.pkg.dataframe", "qualname": "Series.is_monotonic_decreasing", "kind": "variable", "doc": "<p>Return boolean if values in the object are monotonically decreasing.</p>\n\n<p>This docstring was copied from pandas.core.series.Series.is_monotonic_decreasing.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool</p>\n"}, "etl.pkg.dataframe.Series.view": {"fullname": "etl.pkg.dataframe.Series.view", "modulename": "etl.pkg.dataframe", "qualname": "Series.view", "kind": "function", "doc": "<p>Create a new view of the Series.</p>\n\n<p>This docstring was copied from pandas.core.series.Series.view.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>This function will return a new Series with a view of the same\nunderlying values in memory, optionally reinterpreted with a new data\ntype. The new data type must preserve the same size in bytes as to not\ncause index misalignment.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>dtype : data type\n    Data type object or one of their string representations.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series\n    A new Series object as a view of the same data in memory.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>numpy.ndarray.view : Equivalent numpy function to create a new view of\n    the same data in memory.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>Series are instantiated with <code>dtype=float64</code> by default. While\n<code>numpy.ndarray.view()</code> will return a view with the same data type as\nthe original array, <code>Series.view()</code> (without specified dtype)\nwill try using <code>float64</code> and may fail if the original data type size\nin bytes is not the same.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">&#39;int8&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">0   -2</span>\n<span class=\"go\">1   -1</span>\n<span class=\"go\">2    0</span>\n<span class=\"go\">3    1</span>\n<span class=\"go\">4    2</span>\n<span class=\"go\">dtype: int8</span>\n</code></pre>\n</div>\n\n<p>The 8 bit signed integer representation of <code>-1</code> is <code>0b11111111</code>, but\nthe same bytes represent 255 if read as an 8 bit unsigned integer:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">us</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">(</span><span class=\"s1\">&#39;uint8&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">us</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">0    254</span>\n<span class=\"go\">1    255</span>\n<span class=\"go\">2      0</span>\n<span class=\"go\">3      1</span>\n<span class=\"go\">4      2</span>\n<span class=\"go\">dtype: uint8</span>\n</code></pre>\n</div>\n\n<p>The views share the same underlying values:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">us</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">128</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">0   -128</span>\n<span class=\"go\">1     -1</span>\n<span class=\"go\">2      0</span>\n<span class=\"go\">3      1</span>\n<span class=\"go\">4      2</span>\n<span class=\"go\">dtype: int8</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dtype</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.add": {"fullname": "etl.pkg.dataframe.Series.add", "modulename": "etl.pkg.dataframe", "qualname": "Series.add", "kind": "function", "doc": "<p>Return Addition of series and other, element-wise (binary operator <code>add</code>).</p>\n\n<p>This docstring was copied from pandas.core.series.Series.add.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>series + other</code>, but with support to substitute a fill_value for\nmissing data in either one of the inputs.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series\n    The result of the operation.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>Series.radd : Reverse of the Addition operator, see\n    <code>Python documentation\n    &lt;https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types&gt;</code>_\n    for more details.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    1.0</span>\n<span class=\"go\">c    1.0</span>\n<span class=\"go\">d    NaN</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    NaN</span>\n<span class=\"go\">d    1.0</span>\n<span class=\"go\">e    NaN</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    2.0</span>\n<span class=\"go\">b    1.0</span>\n<span class=\"go\">c    1.0</span>\n<span class=\"go\">d    1.0</span>\n<span class=\"go\">e    NaN</span>\n<span class=\"go\">dtype: float64</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.sub": {"fullname": "etl.pkg.dataframe.Series.sub", "modulename": "etl.pkg.dataframe", "qualname": "Series.sub", "kind": "function", "doc": "<p>Return Subtraction of series and other, element-wise (binary operator <code>sub</code>).</p>\n\n<p>This docstring was copied from pandas.core.series.Series.sub.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>series - other</code>, but with support to substitute a fill_value for\nmissing data in either one of the inputs.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series\n    The result of the operation.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>Series.rsub : Reverse of the Subtraction operator, see\n    <code>Python documentation\n    &lt;https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types&gt;</code>_\n    for more details.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    1.0</span>\n<span class=\"go\">c    1.0</span>\n<span class=\"go\">d    NaN</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    NaN</span>\n<span class=\"go\">d    1.0</span>\n<span class=\"go\">e    NaN</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">subtract</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    0.0</span>\n<span class=\"go\">b    1.0</span>\n<span class=\"go\">c    1.0</span>\n<span class=\"go\">d   -1.0</span>\n<span class=\"go\">e    NaN</span>\n<span class=\"go\">dtype: float64</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.mul": {"fullname": "etl.pkg.dataframe.Series.mul", "modulename": "etl.pkg.dataframe", "qualname": "Series.mul", "kind": "function", "doc": "<p>Return Multiplication of series and other, element-wise (binary operator <code>mul</code>).</p>\n\n<p>This docstring was copied from pandas.core.series.Series.mul.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>series * other</code>, but with support to substitute a fill_value for\nmissing data in either one of the inputs.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series\n    The result of the operation.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>Series.rmul : Reverse of the Multiplication operator, see\n    <code>Python documentation\n    &lt;https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types&gt;</code>_\n    for more details.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    1.0</span>\n<span class=\"go\">c    1.0</span>\n<span class=\"go\">d    NaN</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    NaN</span>\n<span class=\"go\">d    1.0</span>\n<span class=\"go\">e    NaN</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">multiply</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    0.0</span>\n<span class=\"go\">c    0.0</span>\n<span class=\"go\">d    0.0</span>\n<span class=\"go\">e    NaN</span>\n<span class=\"go\">dtype: float64</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.div": {"fullname": "etl.pkg.dataframe.Series.div", "modulename": "etl.pkg.dataframe", "qualname": "Series.div", "kind": "function", "doc": "<p>Return Floating division of series and other, element-wise (binary operator <code>truediv</code>).</p>\n\n<p>This docstring was copied from pandas.core.series.Series.div.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>series / other</code>, but with support to substitute a fill_value for\nmissing data in either one of the inputs.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series\n    The result of the operation.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>Series.rtruediv : Reverse of the Floating division operator, see\n    <code>Python documentation\n    &lt;https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types&gt;</code>_\n    for more details.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    1.0</span>\n<span class=\"go\">c    1.0</span>\n<span class=\"go\">d    NaN</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    NaN</span>\n<span class=\"go\">d    1.0</span>\n<span class=\"go\">e    NaN</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">divide</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    inf</span>\n<span class=\"go\">c    inf</span>\n<span class=\"go\">d    0.0</span>\n<span class=\"go\">e    NaN</span>\n<span class=\"go\">dtype: float64</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.divide": {"fullname": "etl.pkg.dataframe.Series.divide", "modulename": "etl.pkg.dataframe", "qualname": "Series.divide", "kind": "function", "doc": "<p>Return Floating division of series and other, element-wise (binary operator <code>truediv</code>).</p>\n\n<p>This docstring was copied from pandas.core.series.Series.divide.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>series / other</code>, but with support to substitute a fill_value for\nmissing data in either one of the inputs.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series\n    The result of the operation.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>Series.rtruediv : Reverse of the Floating division operator, see\n    <code>Python documentation\n    &lt;https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types&gt;</code>_\n    for more details.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    1.0</span>\n<span class=\"go\">c    1.0</span>\n<span class=\"go\">d    NaN</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    NaN</span>\n<span class=\"go\">d    1.0</span>\n<span class=\"go\">e    NaN</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">divide</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    inf</span>\n<span class=\"go\">c    inf</span>\n<span class=\"go\">d    0.0</span>\n<span class=\"go\">e    NaN</span>\n<span class=\"go\">dtype: float64</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.truediv": {"fullname": "etl.pkg.dataframe.Series.truediv", "modulename": "etl.pkg.dataframe", "qualname": "Series.truediv", "kind": "function", "doc": "<p>Return Floating division of series and other, element-wise (binary operator <code>truediv</code>).</p>\n\n<p>This docstring was copied from pandas.core.series.Series.truediv.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>series / other</code>, but with support to substitute a fill_value for\nmissing data in either one of the inputs.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series\n    The result of the operation.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>Series.rtruediv : Reverse of the Floating division operator, see\n    <code>Python documentation\n    &lt;https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types&gt;</code>_\n    for more details.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    1.0</span>\n<span class=\"go\">c    1.0</span>\n<span class=\"go\">d    NaN</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    NaN</span>\n<span class=\"go\">d    1.0</span>\n<span class=\"go\">e    NaN</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">divide</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    inf</span>\n<span class=\"go\">c    inf</span>\n<span class=\"go\">d    0.0</span>\n<span class=\"go\">e    NaN</span>\n<span class=\"go\">dtype: float64</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.floordiv": {"fullname": "etl.pkg.dataframe.Series.floordiv", "modulename": "etl.pkg.dataframe", "qualname": "Series.floordiv", "kind": "function", "doc": "<p>Return Integer division of series and other, element-wise (binary operator <code>floordiv</code>).</p>\n\n<p>This docstring was copied from pandas.core.series.Series.floordiv.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>series // other</code>, but with support to substitute a fill_value for\nmissing data in either one of the inputs.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series\n    The result of the operation.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>Series.rfloordiv : Reverse of the Integer division operator, see\n    <code>Python documentation\n    &lt;https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types&gt;</code>_\n    for more details.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    1.0</span>\n<span class=\"go\">c    1.0</span>\n<span class=\"go\">d    NaN</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    NaN</span>\n<span class=\"go\">d    1.0</span>\n<span class=\"go\">e    NaN</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">floordiv</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    inf</span>\n<span class=\"go\">c    inf</span>\n<span class=\"go\">d    0.0</span>\n<span class=\"go\">e    NaN</span>\n<span class=\"go\">dtype: float64</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.mod": {"fullname": "etl.pkg.dataframe.Series.mod", "modulename": "etl.pkg.dataframe", "qualname": "Series.mod", "kind": "function", "doc": "<p>Return Modulo of series and other, element-wise (binary operator <code>mod</code>).</p>\n\n<p>This docstring was copied from pandas.core.series.Series.mod.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>series % other</code>, but with support to substitute a fill_value for\nmissing data in either one of the inputs.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series\n    The result of the operation.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>Series.rmod : Reverse of the Modulo operator, see\n    <code>Python documentation\n    &lt;https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types&gt;</code>_\n    for more details.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    1.0</span>\n<span class=\"go\">c    1.0</span>\n<span class=\"go\">d    NaN</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    NaN</span>\n<span class=\"go\">d    1.0</span>\n<span class=\"go\">e    NaN</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">mod</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    0.0</span>\n<span class=\"go\">b    NaN</span>\n<span class=\"go\">c    NaN</span>\n<span class=\"go\">d    0.0</span>\n<span class=\"go\">e    NaN</span>\n<span class=\"go\">dtype: float64</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.pow": {"fullname": "etl.pkg.dataframe.Series.pow", "modulename": "etl.pkg.dataframe", "qualname": "Series.pow", "kind": "function", "doc": "<p>Return Exponential power of series and other, element-wise (binary operator <code>pow</code>).</p>\n\n<p>This docstring was copied from pandas.core.series.Series.pow.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>series ** other</code>, but with support to substitute a fill_value for\nmissing data in either one of the inputs.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series\n    The result of the operation.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>Series.rpow : Reverse of the Exponential power operator, see\n    <code>Python documentation\n    &lt;https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types&gt;</code>_\n    for more details.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    1.0</span>\n<span class=\"go\">c    1.0</span>\n<span class=\"go\">d    NaN</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    NaN</span>\n<span class=\"go\">d    1.0</span>\n<span class=\"go\">e    NaN</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    1.0</span>\n<span class=\"go\">c    1.0</span>\n<span class=\"go\">d    0.0</span>\n<span class=\"go\">e    NaN</span>\n<span class=\"go\">dtype: float64</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.radd": {"fullname": "etl.pkg.dataframe.Series.radd", "modulename": "etl.pkg.dataframe", "qualname": "Series.radd", "kind": "function", "doc": "<p>Return Addition of series and other, element-wise (binary operator <code>radd</code>).</p>\n\n<p>This docstring was copied from pandas.core.series.Series.radd.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>other + series</code>, but with support to substitute a fill_value for\nmissing data in either one of the inputs.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series\n    The result of the operation.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>Series.add : Element-wise Addition, see\n    <code>Python documentation\n    &lt;https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types&gt;</code>_\n    for more details.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    1.0</span>\n<span class=\"go\">c    1.0</span>\n<span class=\"go\">d    NaN</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    NaN</span>\n<span class=\"go\">d    1.0</span>\n<span class=\"go\">e    NaN</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    2.0</span>\n<span class=\"go\">b    1.0</span>\n<span class=\"go\">c    1.0</span>\n<span class=\"go\">d    1.0</span>\n<span class=\"go\">e    NaN</span>\n<span class=\"go\">dtype: float64</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.rsub": {"fullname": "etl.pkg.dataframe.Series.rsub", "modulename": "etl.pkg.dataframe", "qualname": "Series.rsub", "kind": "function", "doc": "<p>Return Subtraction of series and other, element-wise (binary operator <code>rsub</code>).</p>\n\n<p>This docstring was copied from pandas.core.series.Series.rsub.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>other - series</code>, but with support to substitute a fill_value for\nmissing data in either one of the inputs.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series\n    The result of the operation.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>Series.sub : Element-wise Subtraction, see\n    <code>Python documentation\n    &lt;https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types&gt;</code>_\n    for more details.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    1.0</span>\n<span class=\"go\">c    1.0</span>\n<span class=\"go\">d    NaN</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    NaN</span>\n<span class=\"go\">d    1.0</span>\n<span class=\"go\">e    NaN</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">subtract</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    0.0</span>\n<span class=\"go\">b    1.0</span>\n<span class=\"go\">c    1.0</span>\n<span class=\"go\">d   -1.0</span>\n<span class=\"go\">e    NaN</span>\n<span class=\"go\">dtype: float64</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.rmul": {"fullname": "etl.pkg.dataframe.Series.rmul", "modulename": "etl.pkg.dataframe", "qualname": "Series.rmul", "kind": "function", "doc": "<p>Return Multiplication of series and other, element-wise (binary operator <code>rmul</code>).</p>\n\n<p>This docstring was copied from pandas.core.series.Series.rmul.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>other * series</code>, but with support to substitute a fill_value for\nmissing data in either one of the inputs.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series\n    The result of the operation.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>Series.mul : Element-wise Multiplication, see\n    <code>Python documentation\n    &lt;https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types&gt;</code>_\n    for more details.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    1.0</span>\n<span class=\"go\">c    1.0</span>\n<span class=\"go\">d    NaN</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    NaN</span>\n<span class=\"go\">d    1.0</span>\n<span class=\"go\">e    NaN</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">multiply</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    0.0</span>\n<span class=\"go\">c    0.0</span>\n<span class=\"go\">d    0.0</span>\n<span class=\"go\">e    NaN</span>\n<span class=\"go\">dtype: float64</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.rdiv": {"fullname": "etl.pkg.dataframe.Series.rdiv", "modulename": "etl.pkg.dataframe", "qualname": "Series.rdiv", "kind": "function", "doc": "<p>Return Floating division of series and other, element-wise (binary operator <code>rtruediv</code>).</p>\n\n<p>This docstring was copied from pandas.core.series.Series.rdiv.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>other / series</code>, but with support to substitute a fill_value for\nmissing data in either one of the inputs.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series\n    The result of the operation.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>Series.truediv : Element-wise Floating division, see\n    <code>Python documentation\n    &lt;https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types&gt;</code>_\n    for more details.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    1.0</span>\n<span class=\"go\">c    1.0</span>\n<span class=\"go\">d    NaN</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    NaN</span>\n<span class=\"go\">d    1.0</span>\n<span class=\"go\">e    NaN</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">divide</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    inf</span>\n<span class=\"go\">c    inf</span>\n<span class=\"go\">d    0.0</span>\n<span class=\"go\">e    NaN</span>\n<span class=\"go\">dtype: float64</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.rtruediv": {"fullname": "etl.pkg.dataframe.Series.rtruediv", "modulename": "etl.pkg.dataframe", "qualname": "Series.rtruediv", "kind": "function", "doc": "<p>Return Floating division of series and other, element-wise (binary operator <code>rtruediv</code>).</p>\n\n<p>This docstring was copied from pandas.core.series.Series.rtruediv.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>other / series</code>, but with support to substitute a fill_value for\nmissing data in either one of the inputs.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series\n    The result of the operation.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>Series.truediv : Element-wise Floating division, see\n    <code>Python documentation\n    &lt;https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types&gt;</code>_\n    for more details.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    1.0</span>\n<span class=\"go\">c    1.0</span>\n<span class=\"go\">d    NaN</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    NaN</span>\n<span class=\"go\">d    1.0</span>\n<span class=\"go\">e    NaN</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">divide</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    inf</span>\n<span class=\"go\">c    inf</span>\n<span class=\"go\">d    0.0</span>\n<span class=\"go\">e    NaN</span>\n<span class=\"go\">dtype: float64</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.rfloordiv": {"fullname": "etl.pkg.dataframe.Series.rfloordiv", "modulename": "etl.pkg.dataframe", "qualname": "Series.rfloordiv", "kind": "function", "doc": "<p>Return Integer division of series and other, element-wise (binary operator <code>rfloordiv</code>).</p>\n\n<p>This docstring was copied from pandas.core.series.Series.rfloordiv.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>other // series</code>, but with support to substitute a fill_value for\nmissing data in either one of the inputs.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series\n    The result of the operation.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>Series.floordiv : Element-wise Integer division, see\n    <code>Python documentation\n    &lt;https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types&gt;</code>_\n    for more details.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    1.0</span>\n<span class=\"go\">c    1.0</span>\n<span class=\"go\">d    NaN</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    NaN</span>\n<span class=\"go\">d    1.0</span>\n<span class=\"go\">e    NaN</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">floordiv</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    inf</span>\n<span class=\"go\">c    inf</span>\n<span class=\"go\">d    0.0</span>\n<span class=\"go\">e    NaN</span>\n<span class=\"go\">dtype: float64</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.rmod": {"fullname": "etl.pkg.dataframe.Series.rmod", "modulename": "etl.pkg.dataframe", "qualname": "Series.rmod", "kind": "function", "doc": "<p>Return Modulo of series and other, element-wise (binary operator <code>rmod</code>).</p>\n\n<p>This docstring was copied from pandas.core.series.Series.rmod.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>other % series</code>, but with support to substitute a fill_value for\nmissing data in either one of the inputs.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series\n    The result of the operation.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>Series.mod : Element-wise Modulo, see\n    <code>Python documentation\n    &lt;https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types&gt;</code>_\n    for more details.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    1.0</span>\n<span class=\"go\">c    1.0</span>\n<span class=\"go\">d    NaN</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    NaN</span>\n<span class=\"go\">d    1.0</span>\n<span class=\"go\">e    NaN</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">mod</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    0.0</span>\n<span class=\"go\">b    NaN</span>\n<span class=\"go\">c    NaN</span>\n<span class=\"go\">d    0.0</span>\n<span class=\"go\">e    NaN</span>\n<span class=\"go\">dtype: float64</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.rpow": {"fullname": "etl.pkg.dataframe.Series.rpow", "modulename": "etl.pkg.dataframe", "qualname": "Series.rpow", "kind": "function", "doc": "<p>Return Exponential power of series and other, element-wise (binary operator <code>rpow</code>).</p>\n\n<p>This docstring was copied from pandas.core.series.Series.rpow.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>other ** series</code>, but with support to substitute a fill_value for\nmissing data in either one of the inputs.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series\n    The result of the operation.</p>\n\n<h2 id=\"see-also\">See Also</h2>\n\n<p>Series.pow : Element-wise Exponential power, see\n    <code>Python documentation\n    &lt;https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types&gt;</code>_\n    for more details.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    1.0</span>\n<span class=\"go\">c    1.0</span>\n<span class=\"go\">d    NaN</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    NaN</span>\n<span class=\"go\">d    1.0</span>\n<span class=\"go\">e    NaN</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">pow</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    1.0</span>\n<span class=\"go\">c    1.0</span>\n<span class=\"go\">d    0.0</span>\n<span class=\"go\">e    NaN</span>\n<span class=\"go\">dtype: float64</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.lt": {"fullname": "etl.pkg.dataframe.Series.lt", "modulename": "etl.pkg.dataframe", "qualname": "Series.lt", "kind": "function", "doc": "<p>Return Less than of series and other, element-wise (binary operator <code>lt</code>).</p>\n\n<p>This docstring was copied from pandas.core.series.Series.lt.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>series &lt; other</code>, but with support to substitute a fill_value for\nmissing data in either one of the inputs.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series\n    The result of the operation.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    1.0</span>\n<span class=\"go\">c    1.0</span>\n<span class=\"go\">d    NaN</span>\n<span class=\"go\">e    1.0</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;f&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    0.0</span>\n<span class=\"go\">b    1.0</span>\n<span class=\"go\">c    2.0</span>\n<span class=\"go\">d    NaN</span>\n<span class=\"go\">f    1.0</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">lt</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    False</span>\n<span class=\"go\">b    False</span>\n<span class=\"go\">c     True</span>\n<span class=\"go\">d    False</span>\n<span class=\"go\">e    False</span>\n<span class=\"go\">f     True</span>\n<span class=\"go\">dtype: bool</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.gt": {"fullname": "etl.pkg.dataframe.Series.gt", "modulename": "etl.pkg.dataframe", "qualname": "Series.gt", "kind": "function", "doc": "<p>Return Greater than of series and other, element-wise (binary operator <code>gt</code>).</p>\n\n<p>This docstring was copied from pandas.core.series.Series.gt.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>series &gt; other</code>, but with support to substitute a fill_value for\nmissing data in either one of the inputs.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series\n    The result of the operation.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    1.0</span>\n<span class=\"go\">c    1.0</span>\n<span class=\"go\">d    NaN</span>\n<span class=\"go\">e    1.0</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;f&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    0.0</span>\n<span class=\"go\">b    1.0</span>\n<span class=\"go\">c    2.0</span>\n<span class=\"go\">d    NaN</span>\n<span class=\"go\">f    1.0</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">gt</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a     True</span>\n<span class=\"go\">b    False</span>\n<span class=\"go\">c    False</span>\n<span class=\"go\">d    False</span>\n<span class=\"go\">e     True</span>\n<span class=\"go\">f    False</span>\n<span class=\"go\">dtype: bool</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.le": {"fullname": "etl.pkg.dataframe.Series.le", "modulename": "etl.pkg.dataframe", "qualname": "Series.le", "kind": "function", "doc": "<p>Return Less than or equal to of series and other, element-wise (binary operator <code>le</code>).</p>\n\n<p>This docstring was copied from pandas.core.series.Series.le.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>series &lt;= other</code>, but with support to substitute a fill_value for\nmissing data in either one of the inputs.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series\n    The result of the operation.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    1.0</span>\n<span class=\"go\">c    1.0</span>\n<span class=\"go\">d    NaN</span>\n<span class=\"go\">e    1.0</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;f&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    0.0</span>\n<span class=\"go\">b    1.0</span>\n<span class=\"go\">c    2.0</span>\n<span class=\"go\">d    NaN</span>\n<span class=\"go\">f    1.0</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">le</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    False</span>\n<span class=\"go\">b     True</span>\n<span class=\"go\">c     True</span>\n<span class=\"go\">d    False</span>\n<span class=\"go\">e    False</span>\n<span class=\"go\">f     True</span>\n<span class=\"go\">dtype: bool</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.ge": {"fullname": "etl.pkg.dataframe.Series.ge", "modulename": "etl.pkg.dataframe", "qualname": "Series.ge", "kind": "function", "doc": "<p>Return Greater than or equal to of series and other, element-wise (binary operator <code>ge</code>).</p>\n\n<p>This docstring was copied from pandas.core.series.Series.ge.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>series &gt;= other</code>, but with support to substitute a fill_value for\nmissing data in either one of the inputs.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series\n    The result of the operation.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    1.0</span>\n<span class=\"go\">c    1.0</span>\n<span class=\"go\">d    NaN</span>\n<span class=\"go\">e    1.0</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;f&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    0.0</span>\n<span class=\"go\">b    1.0</span>\n<span class=\"go\">c    2.0</span>\n<span class=\"go\">d    NaN</span>\n<span class=\"go\">f    1.0</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">ge</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a     True</span>\n<span class=\"go\">b     True</span>\n<span class=\"go\">c    False</span>\n<span class=\"go\">d    False</span>\n<span class=\"go\">e     True</span>\n<span class=\"go\">f    False</span>\n<span class=\"go\">dtype: bool</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.ne": {"fullname": "etl.pkg.dataframe.Series.ne", "modulename": "etl.pkg.dataframe", "qualname": "Series.ne", "kind": "function", "doc": "<p>Return Not equal to of series and other, element-wise (binary operator <code>ne</code>).</p>\n\n<p>This docstring was copied from pandas.core.series.Series.ne.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>series != other</code>, but with support to substitute a fill_value for\nmissing data in either one of the inputs.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series\n    The result of the operation.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    1.0</span>\n<span class=\"go\">c    1.0</span>\n<span class=\"go\">d    NaN</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    NaN</span>\n<span class=\"go\">d    1.0</span>\n<span class=\"go\">e    NaN</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">ne</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    False</span>\n<span class=\"go\">b     True</span>\n<span class=\"go\">c     True</span>\n<span class=\"go\">d     True</span>\n<span class=\"go\">e     True</span>\n<span class=\"go\">dtype: bool</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.dataframe.Series.eq": {"fullname": "etl.pkg.dataframe.Series.eq", "modulename": "etl.pkg.dataframe", "qualname": "Series.eq", "kind": "function", "doc": "<p>Return Equal to of series and other, element-wise (binary operator <code>eq</code>).</p>\n\n<p>This docstring was copied from pandas.core.series.Series.eq.</p>\n\n<p>Some inconsistencies with the Dask version may exist.</p>\n\n<p>Equivalent to <code>series == other</code>, but with support to substitute a fill_value for\nmissing data in either one of the inputs.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>other : Series or scalar value\nlevel : int or name\n    Broadcast across a level, matching Index values on the\n    passed MultiIndex level.\nfill_value : None or float value, default None (NaN)\n    Fill existing missing (NaN) values, and any new element needed for\n    successful Series alignment, with this value before computation.\n    If data in both corresponding Series locations is missing\n    the result of filling (at that location) will be missing.\naxis : {0 or 'index'}\n    Unused. Parameter needed for compatibility with DataFrame.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Series\n    The result of the operation.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    1.0</span>\n<span class=\"go\">c    1.0</span>\n<span class=\"go\">d    NaN</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a    1.0</span>\n<span class=\"go\">b    NaN</span>\n<span class=\"go\">d    1.0</span>\n<span class=\"go\">e    NaN</span>\n<span class=\"go\">dtype: float64</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">a     True</span>\n<span class=\"go\">b    False</span>\n<span class=\"go\">c    False</span>\n<span class=\"go\">d    False</span>\n<span class=\"go\">e    False</span>\n<span class=\"go\">dtype: bool</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.pkg.exceptions": {"fullname": "etl.pkg.exceptions", "modulename": "etl.pkg.exceptions", "kind": "module", "doc": "<p>Module exceptions wraps exception types for all etl modules.</p>\n\n<p>This allows for a clear disambiguification about the origin of exceptions.</p>\n"}, "etl.pkg.exceptions.InvalidFileError": {"fullname": "etl.pkg.exceptions.InvalidFileError", "modulename": "etl.pkg.exceptions", "qualname": "InvalidFileError", "kind": "class", "doc": "<p>Input file is invalid</p>\n", "bases": "builtins.Exception"}, "etl.pkg.exceptions.InvalidDataError": {"fullname": "etl.pkg.exceptions.InvalidDataError", "modulename": "etl.pkg.exceptions", "qualname": "InvalidDataError", "kind": "class", "doc": "<p>Some content in the input file is invalid</p>\n", "bases": "builtins.Exception"}, "etl.pkg.exceptions.RuntimeEtlError": {"fullname": "etl.pkg.exceptions.RuntimeEtlError", "modulename": "etl.pkg.exceptions", "qualname": "RuntimeEtlError", "kind": "class", "doc": "<p>Runtime ETL error</p>\n", "bases": "builtins.Exception"}, "etl.pkg.exceptions.IOEtlError": {"fullname": "etl.pkg.exceptions.IOEtlError", "modulename": "etl.pkg.exceptions", "qualname": "IOEtlError", "kind": "class", "doc": "<p>IO ETL error</p>\n", "bases": "builtins.Exception"}, "etl.pkg.exceptions.DevMistakeError": {"fullname": "etl.pkg.exceptions.DevMistakeError", "modulename": "etl.pkg.exceptions", "qualname": "DevMistakeError", "kind": "class", "doc": "<p>Development mistake</p>\n", "bases": "builtins.Exception"}, "etl.pkg.exceptions.ConfigError": {"fullname": "etl.pkg.exceptions.ConfigError", "modulename": "etl.pkg.exceptions", "qualname": "ConfigError", "kind": "class", "doc": "<p>Configuration error</p>\n", "bases": "builtins.Exception"}, "etl.pkg.exceptions.FlagsError": {"fullname": "etl.pkg.exceptions.FlagsError", "modulename": "etl.pkg.exceptions", "qualname": "FlagsError", "kind": "class", "doc": "<p>CLI fags arguments error</p>\n", "bases": "builtins.Exception"}, "etl.pkg.exceptions.UndeclaredFieldError": {"fullname": "etl.pkg.exceptions.UndeclaredFieldError", "modulename": "etl.pkg.exceptions", "qualname": "UndeclaredFieldError", "kind": "class", "doc": "<p>Internal error: a reference was made to an undeclared field</p>\n", "bases": "DevMistakeError"}, "etl.pkg.flags": {"fullname": "etl.pkg.flags", "modulename": "etl.pkg.flags", "kind": "module", "doc": "<p>Module flags exposes a default flags configuration to build a CLI.</p>\n\n<p>The ArgumentParser class derives from the standard library's argparse.ArgumentParser,\nonly adding standard flags that we would like to have across the board.</p>\n\n<p>In addition, there are a few validations carried out on the passed arguments.</p>\n\n<p>See argparse.ArgumentParser for usage (parsing, using resulting namespace).</p>\n"}, "etl.pkg.flags.Namespace": {"fullname": "etl.pkg.flags.Namespace", "modulename": "etl.pkg.flags", "qualname": "Namespace", "kind": "class", "doc": "<p>Simple object for storing attributes.</p>\n\n<p>Implements equality by attribute names and values, and provides a simple\nstring representation.</p>\n", "bases": "argparse._AttributeHolder"}, "etl.pkg.flags.Namespace.__init__": {"fullname": "etl.pkg.flags.Namespace.__init__", "modulename": "etl.pkg.flags", "qualname": "Namespace.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "etl.pkg.flags.ArgumentParser": {"fullname": "etl.pkg.flags.ArgumentParser", "modulename": "etl.pkg.flags", "qualname": "ArgumentParser", "kind": "class", "doc": "<p>ArgumentParser provides default CLI flags, with validation.</p>\n\n<p>See <code>argparse.ArgumentParser</code></p>\n", "bases": "argparse.ArgumentParser"}, "etl.pkg.flags.ArgumentParser.__init__": {"fullname": "etl.pkg.flags.ArgumentParser.__init__", "modulename": "etl.pkg.flags", "qualname": "ArgumentParser.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ETL job&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">epilog</span><span class=\"o\">=</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">            &#39;start_date&#39; is not required, but becomes so if the date cannot be extracted from the file names.</span><span class=\"se\">\\n</span><span class=\"s2\">            </span><span class=\"se\">\\n</span><span class=\"s2\">            You need to specify at least one of &#39;input_folder&#39; or &#39;input_files&#39;.</span><span class=\"se\">\\n</span><span class=\"s2\">            &#39;end_date&#39; addresses the special use case when integrated date has a predetermined lifespan.</span><span class=\"se\">\\n</span><span class=\"s2\">            &quot;</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "etl.pkg.flags.ArgumentParser.parse_args": {"fullname": "etl.pkg.flags.ArgumentParser.parse_args", "modulename": "etl.pkg.flags", "qualname": "ArgumentParser.parse_args", "kind": "function", "doc": "<p>parse_args parses the command line arguments, then validate the arguments.</p>\n\n<p>See <code>argparse.ArgumentParser</code>.</p>\n\n<p>Args:\n    args (List[str], optional): arguments from the command line.\n    Defaults to None.\n    namespace (argparse.Namespace, optional): an input object to hold the parsed arguments.\n    Defaults to None.</p>\n\n<p>Returns:\n    argparse.Namespace: parsed arguments.\n    If none was passed as input, as new object is created.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">args</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">namespace</span><span class=\"p\">:</span> <span class=\"n\">argparse</span><span class=\"o\">.</span><span class=\"n\">Namespace</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">argparse</span><span class=\"o\">.</span><span class=\"n\">Namespace</span>:</span></span>", "funcdef": "def"}, "etl.pkg.flags.iso_date": {"fullname": "etl.pkg.flags.iso_date", "modulename": "etl.pkg.flags", "qualname": "iso_date", "kind": "function", "doc": "<p>iso_date validates a date input as {YYYY-MM-DD}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arg</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span>:</span></span>", "funcdef": "def"}, "etl.pkg.io": {"fullname": "etl.pkg.io", "modulename": "etl.pkg.io", "kind": "module", "doc": "<p>Module io exposes utilities to manipulate file names.</p>\n\n<h2 id=\"features\">Features</h2>\n\n<ul>\n<li>an input file resolver (<code>FileResolver</code>) to resolve date extraction from name</li>\n<li>an iterator (<code>FileResolverIterator</code>) to walk over multiple files in a folder</li>\n<li>a context manager <code>file_resolver_context</code> to manage file moving after \nprocessing is done</li>\n</ul>\n\n<h2 id=\"limitations\">Limitations</h2>\n\n<ul>\n<li>At this moment, this module only supports files on a local file system\n(no remote resources such as cloud storage)</li>\n</ul>\n"}, "etl.pkg.io.ISO_DATE_PREFIX": {"fullname": "etl.pkg.io.ISO_DATE_PREFIX", "modulename": "etl.pkg.io", "qualname": "ISO_DATE_PREFIX", "kind": "variable", "doc": "<p>The default regexp used to extract the start_date from a file name</p>\n", "default_value": "&#x27;(\\\\d{4})(\\\\d{2})(\\\\d{2})&#x27;"}, "etl.pkg.io.BAD_FOLDER": {"fullname": "etl.pkg.io.BAD_FOLDER", "modulename": "etl.pkg.io", "qualname": "BAD_FOLDER", "kind": "variable", "doc": "<p>The default folder where bad files are moved</p>\n", "default_value": "&#x27;bad&#x27;"}, "etl.pkg.io.ARCHIVE_FOLDER": {"fullname": "etl.pkg.io.ARCHIVE_FOLDER", "modulename": "etl.pkg.io", "qualname": "ARCHIVE_FOLDER", "kind": "variable", "doc": "<p>The default folder where successfully integrated files are moved</p>\n", "default_value": "&#x27;archive&#x27;"}, "etl.pkg.io.RECYCLABLE_FOLDER": {"fullname": "etl.pkg.io.RECYCLABLE_FOLDER", "modulename": "etl.pkg.io", "qualname": "RECYCLABLE_FOLDER", "kind": "variable", "doc": "<p>The default folder where recyclable files are created</p>\n", "default_value": "&#x27;recyclable&#x27;"}, "etl.pkg.io.REPORT_FOLDER": {"fullname": "etl.pkg.io.REPORT_FOLDER", "modulename": "etl.pkg.io", "qualname": "REPORT_FOLDER", "kind": "variable", "doc": "<p>The default folder where report files are created</p>\n", "default_value": "&#x27;reports&#x27;"}, "etl.pkg.io.FileResolver": {"fullname": "etl.pkg.io.FileResolver", "modulename": "etl.pkg.io", "qualname": "FileResolver", "kind": "class", "doc": "<p>FileResolver resolves to a file on the local file system.</p>\n\n<p>It knows how to extract a start_date from the file name, unless this\ndate is already provided. The defaut date pattern in the file name\nis an ISO date (yyyymmdd).</p>\n\n<p>The resolvers knows how to move the file once processing is complete:</p>\n\n<ul>\n<li>move successfully integrated input files to an archive directory</li>\n<li>move failed files to a \"bad\" directory</li>\n<li>move recyclable files to a recyclable directory</li>\n</ul>\n\n<p>Todos(fredbi):</p>\n\n<ul>\n<li>should extend to output files</li>\n<li>support Azure Blob resources, not just local files</li>\n</ul>\n\n<p>Raises:\n    DevMistake: occurs when the resolver is wrongly instantiated</p>\n"}, "etl.pkg.io.FileResolver.__init__": {"fullname": "etl.pkg.io.FileResolver.__init__", "modulename": "etl.pkg.io", "qualname": "FileResolver.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">start_date</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">date_pattern</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;(</span><span class=\"se\">\\\\</span><span class=\"s1\">d</span><span class=\"si\">{4}</span><span class=\"s1\">)(</span><span class=\"se\">\\\\</span><span class=\"s1\">d</span><span class=\"si\">{2}</span><span class=\"s1\">)(</span><span class=\"se\">\\\\</span><span class=\"s1\">d</span><span class=\"si\">{2}</span><span class=\"s1\">)&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">name_prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bad_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;bad&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">archive_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;archive&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">recyclable_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;recyclable&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">report_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;reports&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">_date_regexp</span><span class=\"p\">:</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">Pattern</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"s1\">&#39;(</span><span class=\"se\">\\\\</span><span class=\"s1\">d</span><span class=\"si\">{4}</span><span class=\"s1\">)(</span><span class=\"se\">\\\\</span><span class=\"s1\">d</span><span class=\"si\">{2}</span><span class=\"s1\">)(</span><span class=\"se\">\\\\</span><span class=\"s1\">d</span><span class=\"si\">{2}</span><span class=\"s1\">)&#39;</span><span class=\"p\">)</span></span>)</span>"}, "etl.pkg.io.FileResolver.file_name": {"fullname": "etl.pkg.io.FileResolver.file_name", "modulename": "etl.pkg.io", "qualname": "FileResolver.file_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "None"}, "etl.pkg.io.FileResolver.start_date": {"fullname": "etl.pkg.io.FileResolver.start_date", "modulename": "etl.pkg.io", "qualname": "FileResolver.start_date", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.date", "default_value": "None"}, "etl.pkg.io.FileResolver.date_pattern": {"fullname": "etl.pkg.io.FileResolver.date_pattern", "modulename": "etl.pkg.io", "qualname": "FileResolver.date_pattern", "kind": "variable", "doc": "<p>date_pattern is datetime extraction pattern.\nWe expect the resolved groups to be [year, month, day].</p>\n", "annotation": ": str", "default_value": "&#x27;(\\\\d{4})(\\\\d{2})(\\\\d{2})&#x27;"}, "etl.pkg.io.FileResolver.name_prefix": {"fullname": "etl.pkg.io.FileResolver.name_prefix", "modulename": "etl.pkg.io", "qualname": "FileResolver.name_prefix", "kind": "variable", "doc": "<p>name_prefix adds a prefix to match with the date regexp,\nthis may be used to disambiguate date extraction.</p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, "etl.pkg.io.FileResolver.bad_path": {"fullname": "etl.pkg.io.FileResolver.bad_path", "modulename": "etl.pkg.io", "qualname": "FileResolver.bad_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;bad&#x27;"}, "etl.pkg.io.FileResolver.archive_path": {"fullname": "etl.pkg.io.FileResolver.archive_path", "modulename": "etl.pkg.io", "qualname": "FileResolver.archive_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;archive&#x27;"}, "etl.pkg.io.FileResolver.recyclable_path": {"fullname": "etl.pkg.io.FileResolver.recyclable_path", "modulename": "etl.pkg.io", "qualname": "FileResolver.recyclable_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;recyclable&#x27;"}, "etl.pkg.io.FileResolver.report_path": {"fullname": "etl.pkg.io.FileResolver.report_path", "modulename": "etl.pkg.io", "qualname": "FileResolver.report_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;reports&#x27;"}, "etl.pkg.io.FileResolver.get_file_name": {"fullname": "etl.pkg.io.FileResolver.get_file_name", "modulename": "etl.pkg.io", "qualname": "FileResolver.get_file_name", "kind": "function", "doc": "<p>get_file_name yields the file name.</p>\n\n<p>Returns:\n    str: fullyl qualified file name</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "etl.pkg.io.FileResolver.set_date_from_name": {"fullname": "etl.pkg.io.FileResolver.set_date_from_name", "modulename": "etl.pkg.io", "qualname": "FileResolver.set_date_from_name", "kind": "function", "doc": "<p>set_date_from_name extracts the start_date from the file name.</p>\n\n<p>This is skipped if a start_date override is set on this FileResolver.\nOtherwise, the file_name is parsed according to the date regexp set for this resolver\n(defaut is an ISO date).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "etl.pkg.io.FileResolver.output_report": {"fullname": "etl.pkg.io.FileResolver.output_report", "modulename": "etl.pkg.io", "qualname": "FileResolver.output_report", "kind": "function", "doc": "<p>output_report yields the location of the workflow report for this file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>:</span></span>", "funcdef": "def"}, "etl.pkg.io.FileResolver.output_recyclable": {"fullname": "etl.pkg.io.FileResolver.output_recyclable", "modulename": "etl.pkg.io", "qualname": "FileResolver.output_recyclable", "kind": "function", "doc": "<p>output_report yields the location of any recyclable file produced</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>:</span></span>", "funcdef": "def"}, "etl.pkg.io.FileResolver.move_to_archive": {"fullname": "etl.pkg.io.FileResolver.move_to_archive", "modulename": "etl.pkg.io", "qualname": "FileResolver.move_to_archive", "kind": "function", "doc": "<p>move_to_archive moves the file pointed to by this resolver to the archive folder.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>:</span></span>", "funcdef": "def"}, "etl.pkg.io.FileResolver.move_to_bad": {"fullname": "etl.pkg.io.FileResolver.move_to_bad", "modulename": "etl.pkg.io", "qualname": "FileResolver.move_to_bad", "kind": "function", "doc": "<p>move_to_bad moves the file pointed to by this resolver to the bad folder.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>:</span></span>", "funcdef": "def"}, "etl.pkg.io.file_resolver_context": {"fullname": "etl.pkg.io.file_resolver_context", "modulename": "etl.pkg.io", "qualname": "file_resolver_context", "kind": "function", "doc": "<p>file_resolver_context provides a context manager to handle a FileResolver resource.</p>\n\n<p>The context manager handles the moving of sucessfully processed or failed files\nat the end of a \"with\" block.</p>\n\n<p>Args:\n    resolver (FileResolver): the FileResolver instance to handle</p>\n\n<p>Yields:\n    Iterator[FileResolver]: an iterator over FileResolvers that matched the search criteria.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">resolver</span><span class=\"p\">:</span> <span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">FileResolver</span>,</span><span class=\"param\">\t<span class=\"n\">runtime</span><span class=\"p\">:</span> <span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">runtime</span><span class=\"o\">.</span><span class=\"n\">Runtime</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">FileResolver</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "etl.pkg.io.FileResolverIterator": {"fullname": "etl.pkg.io.FileResolverIterator", "modulename": "etl.pkg.io", "qualname": "FileResolverIterator", "kind": "class", "doc": "<p>FileResolverIterator provides an iterator over FileResolvers resolved from\neither an explicit list of input_files or walking the dir_name folder with\na glob pattern.</p>\n", "bases": "typing.Iterator[etl.pkg.io.FileResolver]"}, "etl.pkg.io.FileResolverIterator.__init__": {"fullname": "etl.pkg.io.FileResolverIterator.__init__", "modulename": "etl.pkg.io", "qualname": "FileResolverIterator.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dir_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">recurse</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">radix_pattern</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">input_files</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">start_date</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">date_pattern</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;(</span><span class=\"se\">\\\\</span><span class=\"s1\">d</span><span class=\"si\">{4}</span><span class=\"s1\">)(</span><span class=\"se\">\\\\</span><span class=\"s1\">d</span><span class=\"si\">{2}</span><span class=\"s1\">)(</span><span class=\"se\">\\\\</span><span class=\"s1\">d</span><span class=\"si\">{2}</span><span class=\"s1\">)&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">name_prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bad_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;bad&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">archive_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;archive&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">recyclable_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;recyclable&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">report_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;reports&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">_file_iterator</span><span class=\"p\">:</span> <span class=\"n\">Iterator</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">_iterator</span><span class=\"p\">:</span> <span class=\"n\">Iterator</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "etl.pkg.io.FileResolverIterator.dir_name": {"fullname": "etl.pkg.io.FileResolverIterator.dir_name", "modulename": "etl.pkg.io", "qualname": "FileResolverIterator.dir_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "None"}, "etl.pkg.io.FileResolverIterator.recurse": {"fullname": "etl.pkg.io.FileResolverIterator.recurse", "modulename": "etl.pkg.io", "qualname": "FileResolverIterator.recurse", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, "etl.pkg.io.FileResolverIterator.radix_pattern": {"fullname": "etl.pkg.io.FileResolverIterator.radix_pattern", "modulename": "etl.pkg.io", "qualname": "FileResolverIterator.radix_pattern", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "None"}, "etl.pkg.io.FileResolverIterator.input_files": {"fullname": "etl.pkg.io.FileResolverIterator.input_files", "modulename": "etl.pkg.io", "qualname": "FileResolverIterator.input_files", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]", "default_value": "None"}, "etl.pkg.io.FileResolverIterator.start_date": {"fullname": "etl.pkg.io.FileResolverIterator.start_date", "modulename": "etl.pkg.io", "qualname": "FileResolverIterator.start_date", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.date", "default_value": "None"}, "etl.pkg.io.FileResolverIterator.date_pattern": {"fullname": "etl.pkg.io.FileResolverIterator.date_pattern", "modulename": "etl.pkg.io", "qualname": "FileResolverIterator.date_pattern", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;(\\\\d{4})(\\\\d{2})(\\\\d{2})&#x27;"}, "etl.pkg.io.FileResolverIterator.name_prefix": {"fullname": "etl.pkg.io.FileResolverIterator.name_prefix", "modulename": "etl.pkg.io", "qualname": "FileResolverIterator.name_prefix", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, "etl.pkg.io.FileResolverIterator.bad_path": {"fullname": "etl.pkg.io.FileResolverIterator.bad_path", "modulename": "etl.pkg.io", "qualname": "FileResolverIterator.bad_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;bad&#x27;"}, "etl.pkg.io.FileResolverIterator.archive_path": {"fullname": "etl.pkg.io.FileResolverIterator.archive_path", "modulename": "etl.pkg.io", "qualname": "FileResolverIterator.archive_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;archive&#x27;"}, "etl.pkg.io.FileResolverIterator.recyclable_path": {"fullname": "etl.pkg.io.FileResolverIterator.recyclable_path", "modulename": "etl.pkg.io", "qualname": "FileResolverIterator.recyclable_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;recyclable&#x27;"}, "etl.pkg.io.FileResolverIterator.report_path": {"fullname": "etl.pkg.io.FileResolverIterator.report_path", "modulename": "etl.pkg.io", "qualname": "FileResolverIterator.report_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;reports&#x27;"}, "etl.pkg.policy": {"fullname": "etl.pkg.policy", "modulename": "etl.pkg.policy", "kind": "module", "doc": "<p>Module policy expose types to tell a job how to  handle data issues.</p>\n"}, "etl.pkg.policy.ActionOnIssue": {"fullname": "etl.pkg.policy.ActionOnIssue", "modulename": "etl.pkg.policy", "qualname": "ActionOnIssue", "kind": "class", "doc": "<p>ActionOnIssue tells what to do\nwhenever a data issue is detected.</p>\n", "bases": "enum.Enum"}, "etl.pkg.policy.ActionOnIssue.FAIL": {"fullname": "etl.pkg.policy.ActionOnIssue.FAIL", "modulename": "etl.pkg.policy", "qualname": "ActionOnIssue.FAIL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ActionOnIssue.FAIL: 0&gt;"}, "etl.pkg.policy.ActionOnIssue.TO_RECYCLE_BIN": {"fullname": "etl.pkg.policy.ActionOnIssue.TO_RECYCLE_BIN", "modulename": "etl.pkg.policy", "qualname": "ActionOnIssue.TO_RECYCLE_BIN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ActionOnIssue.TO_RECYCLE_BIN: 1&gt;"}, "etl.pkg.policy.ActionOnIssue.SKIP": {"fullname": "etl.pkg.policy.ActionOnIssue.SKIP", "modulename": "etl.pkg.policy", "qualname": "ActionOnIssue.SKIP", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ActionOnIssue.SKIP: 2&gt;"}, "etl.pkg.policy.ActionOnIssue.IGNORE": {"fullname": "etl.pkg.policy.ActionOnIssue.IGNORE", "modulename": "etl.pkg.policy", "qualname": "ActionOnIssue.IGNORE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ActionOnIssue.IGNORE: 3&gt;"}, "etl.pkg.policy.ActionOnIssue.CREATE": {"fullname": "etl.pkg.policy.ActionOnIssue.CREATE", "modulename": "etl.pkg.policy", "qualname": "ActionOnIssue.CREATE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ActionOnIssue.CREATE: 4&gt;"}, "etl.pkg.policy.PolicyDict": {"fullname": "etl.pkg.policy.PolicyDict", "modulename": "etl.pkg.policy", "qualname": "PolicyDict", "kind": "class", "doc": "<p>PolicyDict defines actions on each kind of recognized data issue.</p>\n", "bases": "builtins.dict"}, "etl.pkg.policy.PolicyDict.when_any_is_not_identified": {"fullname": "etl.pkg.policy.PolicyDict.when_any_is_not_identified", "modulename": "etl.pkg.policy", "qualname": "PolicyDict.when_any_is_not_identified", "kind": "variable", "doc": "<p></p>\n", "annotation": ": etl.pkg.policy.ActionOnIssue"}, "etl.pkg.policy.PolicyDict.when_any_is_not_valid": {"fullname": "etl.pkg.policy.PolicyDict.when_any_is_not_valid", "modulename": "etl.pkg.policy", "qualname": "PolicyDict.when_any_is_not_valid", "kind": "variable", "doc": "<p></p>\n", "annotation": ": etl.pkg.policy.ActionOnIssue"}, "etl.pkg.policy.PolicyDict.when_any_taxonomy_is_not_mapped": {"fullname": "etl.pkg.policy.PolicyDict.when_any_taxonomy_is_not_mapped", "modulename": "etl.pkg.policy", "qualname": "PolicyDict.when_any_taxonomy_is_not_mapped", "kind": "variable", "doc": "<p></p>\n", "annotation": ": etl.pkg.policy.ActionOnIssue"}, "etl.pkg.policy.PolicyDict.when_field_is_not_identified": {"fullname": "etl.pkg.policy.PolicyDict.when_field_is_not_identified", "modulename": "etl.pkg.policy", "qualname": "PolicyDict.when_field_is_not_identified", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, etl.pkg.policy.ActionOnIssue]"}, "etl.pkg.policy.PolicyDict.when_field_is_not_valid": {"fullname": "etl.pkg.policy.PolicyDict.when_field_is_not_valid", "modulename": "etl.pkg.policy", "qualname": "PolicyDict.when_field_is_not_valid", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, etl.pkg.policy.ActionOnIssue]"}, "etl.pkg.policy.PolicyDict.when_field_taxonomy_is_not_mapped": {"fullname": "etl.pkg.policy.PolicyDict.when_field_taxonomy_is_not_mapped", "modulename": "etl.pkg.policy", "qualname": "PolicyDict.when_field_taxonomy_is_not_mapped", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, etl.pkg.policy.ActionOnIssue]"}, "etl.pkg.policy.Policy": {"fullname": "etl.pkg.policy.Policy", "modulename": "etl.pkg.policy", "qualname": "Policy", "kind": "class", "doc": "<p>Policy defines an issue handling policy.</p>\n\n<p>It determines the action to carry out\nwhen faced with data issues.</p>\n"}, "etl.pkg.policy.Policy.__init__": {"fullname": "etl.pkg.policy.Policy.__init__", "modulename": "etl.pkg.policy", "qualname": "Policy.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">dict</span><span class=\"p\">:</span> <span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">policy</span><span class=\"o\">.</span><span class=\"n\">PolicyDict</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span></span>)</span>"}, "etl.pkg.policy.Policy.dict": {"fullname": "etl.pkg.policy.Policy.dict", "modulename": "etl.pkg.policy", "qualname": "Policy.dict", "kind": "variable", "doc": "<p></p>\n", "annotation": ": etl.pkg.policy.PolicyDict"}, "etl.pkg.policy.Policy.action_on_invalid_field": {"fullname": "etl.pkg.policy.Policy.action_on_invalid_field", "modulename": "etl.pkg.policy", "qualname": "Policy.action_on_invalid_field", "kind": "function", "doc": "<p>action_on_invalid_field yields the policy set for a given input column</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">column_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">policy</span><span class=\"o\">.</span><span class=\"n\">ActionOnIssue</span>:</span></span>", "funcdef": "def"}, "etl.pkg.policy.PolicyResolver": {"fullname": "etl.pkg.policy.PolicyResolver", "modulename": "etl.pkg.policy", "qualname": "PolicyResolver", "kind": "class", "doc": "<p>_summary_</p>\n\n<p>Returns:\n    _type_: _description_</p>\n"}, "etl.pkg.policy.PolicyResolver.__init__": {"fullname": "etl.pkg.policy.PolicyResolver.__init__", "modulename": "etl.pkg.policy", "qualname": "PolicyResolver.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">policy</span><span class=\"p\">:</span> <span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">policy</span><span class=\"o\">.</span><span class=\"n\">Policy</span></span>)</span>"}, "etl.pkg.policy.PolicyResolver.policy": {"fullname": "etl.pkg.policy.PolicyResolver.policy", "modulename": "etl.pkg.policy", "qualname": "PolicyResolver.policy", "kind": "variable", "doc": "<p></p>\n", "annotation": ": etl.pkg.policy.Policy"}, "etl.pkg.policy.PolicyResolver.tolerates_data_issues": {"fullname": "etl.pkg.policy.PolicyResolver.tolerates_data_issues", "modulename": "etl.pkg.policy", "qualname": "PolicyResolver.tolerates_data_issues", "kind": "function", "doc": "<p>_summary_ (TODO)</p>\n\n<p>Returns:\n    bool: _description_</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "etl.pkg.policy.strict": {"fullname": "etl.pkg.policy.strict", "modulename": "etl.pkg.policy", "qualname": "strict", "kind": "function", "doc": "<p>strict yields a basic policy which fails on any kind of mismatch.</p>\n\n<p>Returns:\n    Policy: the (default) strictiest data issue handling policy.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">policy</span><span class=\"o\">.</span><span class=\"n\">Policy</span>:</span></span>", "funcdef": "def"}, "etl.pkg.policy.skip": {"fullname": "etl.pkg.policy.skip", "modulename": "etl.pkg.policy", "qualname": "skip", "kind": "function", "doc": "<p>skip yields a basic policy which skips lines with data errors.    </p>\n\n<p>Returns:\n    Policy: a policy skipping all problems</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">policy</span><span class=\"o\">.</span><span class=\"n\">Policy</span>:</span></span>", "funcdef": "def"}, "etl.pkg.policy.from_config": {"fullname": "etl.pkg.policy.from_config", "modulename": "etl.pkg.policy", "qualname": "from_config", "kind": "function", "doc": "<p>from_config creates a Policy based on the configuration</p>\n\n<p>Args:\n    configConfig (_type_): _description_</p>\n\n<p>TODO</p>\n\n<p>Returns:\n    Policy: _description_</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">_cfg</span><span class=\"p\">:</span> <span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">Registry</span></span><span class=\"return-annotation\">) -> <span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">policy</span><span class=\"o\">.</span><span class=\"n\">Policy</span>:</span></span>", "funcdef": "def"}, "etl.pkg.postgres": {"fullname": "etl.pkg.postgres", "modulename": "etl.pkg.postgres", "kind": "module", "doc": "<p></p>\n"}, "etl.pkg.resolvers": {"fullname": "etl.pkg.resolvers", "modulename": "etl.pkg.resolvers", "kind": "module", "doc": "<p>\"\nModule resolvers exposes resolvers to map categorized fields.</p>\n\n<p>Categorized fields abide by some externally defined taxonomy.</p>\n"}, "etl.pkg.resolvers.FieldResolver": {"fullname": "etl.pkg.resolvers.FieldResolver", "modulename": "etl.pkg.resolvers", "qualname": "FieldResolver", "kind": "class", "doc": "<p>FieldResolver ...</p>\n\n<p>Args:\n    Dict (_type_): _description_</p>\n", "bases": "typing.Dict[str, str]"}, "etl.pkg.resolvers.FieldResolver.get_mnemonic": {"fullname": "etl.pkg.resolvers.FieldResolver.get_mnemonic", "modulename": "etl.pkg.resolvers", "qualname": "FieldResolver.get_mnemonic", "kind": "function", "doc": "<p>get_mnemonic ...</p>\n\n<p>Args:\n    field (str): _description_</p>\n\n<p>Returns:\n    str: _description_</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">field</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "etl.pkg.resolvers.FieldResolver.get_id": {"fullname": "etl.pkg.resolvers.FieldResolver.get_id", "modulename": "etl.pkg.resolvers", "qualname": "FieldResolver.get_id", "kind": "function", "doc": "<p>get_id ... TODO</p>\n\n<p>Returns:\n    int: _description_</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">__field__</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "etl.pkg.resolvers.IdentifierResolver": {"fullname": "etl.pkg.resolvers.IdentifierResolver", "modulename": "etl.pkg.resolvers", "qualname": "IdentifierResolver", "kind": "class", "doc": "<p>IdentifierResolver associates an identifier field to\nan identifier mnemnonic code.</p>\n\n<p>Example:\nIdentifierResolver({\"key\": \"isin\"}) will resolve the field \"key\"\nto identifier type \"isin\".</p>\n\n<p>TODO: should cache the numerical ID from the DB in memory.</p>\n", "bases": "typing.Dict[str, str]"}, "etl.pkg.resolvers.TaxonomyResolver": {"fullname": "etl.pkg.resolvers.TaxonomyResolver", "modulename": "etl.pkg.resolvers", "qualname": "TaxonomyResolver", "kind": "class", "doc": "<p>TaxonomyResolver associates a taxonomy field to\na taxonomy mnemnonic code.</p>\n\n<p>TODO: should cache the numerical ID from the DB in memory.</p>\n", "bases": "typing.Dict[str, str]"}, "etl.pkg.resolvers.SchemaResolver": {"fullname": "etl.pkg.resolvers.SchemaResolver", "modulename": "etl.pkg.resolvers", "qualname": "SchemaResolver", "kind": "class", "doc": "<p>SchemaResolver associates an input field to a data type.</p>\n", "bases": "typing.Dict[str, str]"}, "etl.pkg.runtime": {"fullname": "etl.pkg.runtime", "modulename": "etl.pkg.runtime", "kind": "module", "doc": "<p>Module runtime exposes a runtime dependency injector.</p>\n\n<p>The Runtime component allows consumers to use shared resources\nsuch as database connections, loggers, etc.</p>\n"}, "etl.pkg.runtime.Runtime": {"fullname": "etl.pkg.runtime.Runtime", "modulename": "etl.pkg.runtime", "qualname": "Runtime", "kind": "class", "doc": "<p>Runtime injects runtime dependencies.</p>\n\n<p>This object is extensible and aimed at providing consumer objects\nwith common things like DB connection, config, logger, trace exporter etc.</p>\n"}, "etl.pkg.runtime.Runtime.__init__": {"fullname": "etl.pkg.runtime.Runtime.__init__", "modulename": "etl.pkg.runtime", "qualname": "Runtime.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">_config</span><span class=\"p\">:</span> <span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">Registry</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">_logger</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "etl.pkg.runtime.Runtime.resources": {"fullname": "etl.pkg.runtime.Runtime.resources", "modulename": "etl.pkg.runtime", "qualname": "Runtime.resources", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, "etl.pkg.runtime.Runtime.start": {"fullname": "etl.pkg.runtime.Runtime.start", "modulename": "etl.pkg.runtime", "qualname": "Runtime.start", "kind": "function", "doc": "<p>start initializes all resources, e.g. database connections etc.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">runtime</span><span class=\"o\">.</span><span class=\"n\">Runtime</span>:</span></span>", "funcdef": "def"}, "etl.pkg.runtime.Runtime.stop": {"fullname": "etl.pkg.runtime.Runtime.stop", "modulename": "etl.pkg.runtime", "qualname": "Runtime.stop", "kind": "function", "doc": "<p>stop relinquishes all resources.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "etl.pkg.runtime.Runtime.get_config": {"fullname": "etl.pkg.runtime.Runtime.get_config", "modulename": "etl.pkg.runtime", "qualname": "Runtime.get_config", "kind": "function", "doc": "<p>get_config returns the global config registry</p>\n\n<p>Returns:\n    config.Registry: a dict-like registry storing settings</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">Registry</span>:</span></span>", "funcdef": "def"}, "etl.pkg.runtime.Runtime.get_logger": {"fullname": "etl.pkg.runtime.Runtime.get_logger", "modulename": "etl.pkg.runtime", "qualname": "Runtime.get_logger", "kind": "function", "doc": "<p>get_logger returns the runtime logger</p>\n\n<p>Returns:\n    Any: _description_</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, "etl.pkg.runtime.Runtime.get_target_db_connection": {"fullname": "etl.pkg.runtime.Runtime.get_target_db_connection", "modulename": "etl.pkg.runtime", "qualname": "Runtime.get_target_db_connection", "kind": "function", "doc": "<p>_summary_</p>\n\n<p>Returns:\n    Any: _description_</p>\n\n<p>Todo: acquire resources</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, "etl.pkg.runtime.context": {"fullname": "etl.pkg.runtime.context", "modulename": "etl.pkg.runtime", "qualname": "context", "kind": "function", "doc": "<p>context provides a context manager to handle a Runtime resource.</p>\n\n<p>It wraps the start and close of an instance of a runtime.</p>\n\n<p>Args:\n    kwargs: key-value arguments used to instantiate a new (unitialized) Runtime</p>\n\n<p>Yields:\n    Iterator[Runtime]: yields one value with the started runtime (with database resources)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">runtime</span><span class=\"p\">:</span> <span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">runtime</span><span class=\"o\">.</span><span class=\"n\">Runtime</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">runtime</span><span class=\"o\">.</span><span class=\"n\">Runtime</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "etl.pkg.validators": {"fullname": "etl.pkg.validators", "modulename": "etl.pkg.validators", "kind": "module", "doc": "<p>Module validators exposes utilities to validate dataframes.</p>\n"}, "etl.pkg.validators.SeriesValidator": {"fullname": "etl.pkg.validators.SeriesValidator", "modulename": "etl.pkg.validators", "qualname": "SeriesValidator", "kind": "variable", "doc": "<p></p>\n", "default_value": "typing.Callable[[dask.dataframe.core.Series], dask.dataframe.core.DataFrame]"}, "etl.pkg.validators.FieldsValidator": {"fullname": "etl.pkg.validators.FieldsValidator", "modulename": "etl.pkg.validators", "qualname": "FieldsValidator", "kind": "class", "doc": "<p>FieldsValidator knows how to distribute validators from a dictionary of fields.</p>\n\n<p>Args:\n    Dict (_type_): _description_</p>\n", "bases": "typing.Dict[str, typing.Callable[[dask.dataframe.core.Series], dask.dataframe.core.DataFrame]]"}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"fullname": "etl.pkg.validators.FieldsValidator.get_field_validator", "modulename": "etl.pkg.validators", "qualname": "FieldsValidator.get_field_validator", "kind": "function", "doc": "<p>get_field_validator returns the validator for a given field name.</p>\n\n<p>Args:\n    field (str): field (column) name</p>\n\n<p>Raises:\n    UndeclaredField: raise d if the field is not declared in the dictionary</p>\n\n<p>TODO(fred): return Tupe with validator's name.</p>\n\n<p>Returns:\n    SeriesValidator: a SeriesValidator function</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">field</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">dask</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">],</span> <span class=\"n\">dask</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "etl.pkg.validators.regexp_validator": {"fullname": "etl.pkg.validators.regexp_validator", "modulename": "etl.pkg.validators", "qualname": "regexp_validator", "kind": "function", "doc": "<p>regexp_validator returns a function that checks that the in\u00eet string value\nmatches a regexp, using the fullmatch operator on the first column of the dataframe.</p>\n\n<p>Args:\n    regexp (re.Pattern): the regexp to check</p>\n\n<p>Returns:\n    SeriesValidator: the validator function</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">regexp</span><span class=\"p\">:</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">Pattern</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">dask</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">],</span> <span class=\"n\">dask</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "etl.pkg.validators.na_validator": {"fullname": "etl.pkg.validators.na_validator", "modulename": "etl.pkg.validators", "qualname": "na_validator", "kind": "function", "doc": "<p>na_validators checks for N/A values in the input series</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">dask</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">],</span> <span class=\"n\">dask</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "etl.pkg.validators.minmax_validator": {"fullname": "etl.pkg.validators.minmax_validator", "modulename": "etl.pkg.validators", "qualname": "minmax_validator", "kind": "function", "doc": "<p>minmax_validator returns a function that checks that the values\nof the input series are within the (min,max) boundaries.</p>\n\n<p>Arguments:\n  inclusive:\"left\", \"right\", \"both\"</p>\n\n<p>Returns:\n    SeriesValidator: the validator function on an input Series</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">minimum</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">maximum</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">inclusive</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;both&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">dask</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">],</span> <span class=\"n\">dask</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "etl.pkg.validators.date_validator": {"fullname": "etl.pkg.validators.date_validator", "modulename": "etl.pkg.validators", "qualname": "date_validator", "kind": "function", "doc": "<p>date_validator returns a function that validates a date from\na string, given a date format.\nThe default is the ISO date format YYYY-MM-DD.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">date_format</span><span class=\"o\">=</span><span class=\"s1\">&#39;%Y-%M-</span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">dask</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">],</span> <span class=\"n\">dask</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "etl.pkg.workflows": {"fullname": "etl.pkg.workflows", "modulename": "etl.pkg.workflows", "kind": "module", "doc": "<p>Module workflows provide generic ETL workflows\nto build ETL jobs.</p>\n\n<p>Workflows are based on dask dataframes and delayed objects.</p>\n"}, "etl.pkg.workflows.Base": {"fullname": "etl.pkg.workflows.Base", "modulename": "etl.pkg.workflows", "qualname": "Base", "kind": "class", "doc": "<p>Base workflow used to be composed into more advanced ETL workflows.</p>\n\n<p>Raises:\n    TypeError: _description_</p>\n", "bases": "etl.pkg.components.interface.Executable"}, "etl.pkg.workflows.Base.__init__": {"fullname": "etl.pkg.workflows.Base.__init__", "modulename": "etl.pkg.workflows", "qualname": "Base.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">runtime</span><span class=\"p\">:</span> <span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">runtime</span><span class=\"o\">.</span><span class=\"n\">Runtime</span>,</span><span class=\"param\">\t<span class=\"n\">start_date</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2023</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">end_date</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">identifier_resolver</span><span class=\"p\">:</span> <span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">resolvers</span><span class=\"o\">.</span><span class=\"n\">IdentifierResolver</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">taxonomy_resolver</span><span class=\"p\">:</span> <span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">resolvers</span><span class=\"o\">.</span><span class=\"n\">TaxonomyResolver</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">schema_resolver</span><span class=\"p\">:</span> <span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">resolvers</span><span class=\"o\">.</span><span class=\"n\">SchemaResolver</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">fields_validator</span><span class=\"p\">:</span> <span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">validators</span><span class=\"o\">.</span><span class=\"n\">FieldsValidator</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">policy_resolver</span><span class=\"p\">:</span> <span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">policy</span><span class=\"o\">.</span><span class=\"n\">PolicyResolver</span> <span class=\"o\">=</span> <span class=\"n\">PolicyResolver</span><span class=\"p\">(</span><span class=\"n\">policy</span><span class=\"o\">=</span><span class=\"n\">Policy</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;when_any_is_not_identified&#39;</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">ActionOnIssue</span><span class=\"o\">.</span><span class=\"n\">FAIL</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;when_any_is_not_valid&#39;</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">ActionOnIssue</span><span class=\"o\">.</span><span class=\"n\">FAIL</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;when_any_taxonomy_is_not_mapped&#39;</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">ActionOnIssue</span><span class=\"o\">.</span><span class=\"n\">FAIL</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;when_field_is_not_identified&#39;</span><span class=\"p\">:</span> <span class=\"p\">{},</span> <span class=\"s1\">&#39;when_field_is_not_valid&#39;</span><span class=\"p\">:</span> <span class=\"p\">{},</span> <span class=\"s1\">&#39;when_field_taxonomy_is_not_mapped&#39;</span><span class=\"p\">:</span> <span class=\"p\">{}}))</span>,</span><span class=\"param\">\t<span class=\"n\">_raw</span><span class=\"p\">:</span> <span class=\"n\">dask</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "etl.pkg.workflows.Base.runtime": {"fullname": "etl.pkg.workflows.Base.runtime", "modulename": "etl.pkg.workflows", "qualname": "Base.runtime", "kind": "variable", "doc": "<p></p>\n", "annotation": ": etl.pkg.runtime.Runtime"}, "etl.pkg.workflows.Base.start_date": {"fullname": "etl.pkg.workflows.Base.start_date", "modulename": "etl.pkg.workflows", "qualname": "Base.start_date", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.date", "default_value": "datetime.date(2023, 9, 13)"}, "etl.pkg.workflows.Base.end_date": {"fullname": "etl.pkg.workflows.Base.end_date", "modulename": "etl.pkg.workflows", "qualname": "Base.end_date", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.date", "default_value": "None"}, "etl.pkg.workflows.Base.identifier_resolver": {"fullname": "etl.pkg.workflows.Base.identifier_resolver", "modulename": "etl.pkg.workflows", "qualname": "Base.identifier_resolver", "kind": "variable", "doc": "<p></p>\n", "annotation": ": etl.pkg.resolvers.IdentifierResolver"}, "etl.pkg.workflows.Base.taxonomy_resolver": {"fullname": "etl.pkg.workflows.Base.taxonomy_resolver", "modulename": "etl.pkg.workflows", "qualname": "Base.taxonomy_resolver", "kind": "variable", "doc": "<p></p>\n", "annotation": ": etl.pkg.resolvers.TaxonomyResolver"}, "etl.pkg.workflows.Base.schema_resolver": {"fullname": "etl.pkg.workflows.Base.schema_resolver", "modulename": "etl.pkg.workflows", "qualname": "Base.schema_resolver", "kind": "variable", "doc": "<p></p>\n", "annotation": ": etl.pkg.resolvers.SchemaResolver"}, "etl.pkg.workflows.Base.fields_validator": {"fullname": "etl.pkg.workflows.Base.fields_validator", "modulename": "etl.pkg.workflows", "qualname": "Base.fields_validator", "kind": "variable", "doc": "<p></p>\n", "annotation": ": etl.pkg.validators.FieldsValidator"}, "etl.pkg.workflows.Base.policy_resolver": {"fullname": "etl.pkg.workflows.Base.policy_resolver", "modulename": "etl.pkg.workflows", "qualname": "Base.policy_resolver", "kind": "variable", "doc": "<p></p>\n", "annotation": ": etl.pkg.policy.PolicyResolver", "default_value": "PolicyResolver(policy=Policy(dict={&#x27;when_any_is_not_identified&#x27;: &lt;ActionOnIssue.FAIL: 0&gt;, &#x27;when_any_is_not_valid&#x27;: &lt;ActionOnIssue.FAIL: 0&gt;, &#x27;when_any_taxonomy_is_not_mapped&#x27;: &lt;ActionOnIssue.FAIL: 0&gt;, &#x27;when_field_is_not_identified&#x27;: {}, &#x27;when_field_is_not_valid&#x27;: {}, &#x27;when_field_taxonomy_is_not_mapped&#x27;: {}}))"}, "etl.pkg.workflows.Base.execute": {"fullname": "etl.pkg.workflows.Base.execute", "modulename": "etl.pkg.workflows", "qualname": "Base.execute", "kind": "function", "doc": "<p>execute a workflow and return a report.</p>\n\n<p>Returns:\n    DataFrame: the execution report folded as a DataFrame</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">dask</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, "etl.pkg.workflows.Generic": {"fullname": "etl.pkg.workflows.Generic", "modulename": "etl.pkg.workflows", "qualname": "Generic", "kind": "class", "doc": "<p>Generic provides a generic implementation\nfor a typical data integration job (aka ETL processor).</p>\n", "bases": "Base"}, "etl.pkg.workflows.Generic.__init__": {"fullname": "etl.pkg.workflows.Generic.__init__", "modulename": "etl.pkg.workflows", "qualname": "Generic.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">runtime</span><span class=\"p\">:</span> <span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">runtime</span><span class=\"o\">.</span><span class=\"n\">Runtime</span>,</span><span class=\"param\">\t<span class=\"n\">start_date</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2023</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">end_date</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">identifier_resolver</span><span class=\"p\">:</span> <span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">resolvers</span><span class=\"o\">.</span><span class=\"n\">IdentifierResolver</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">taxonomy_resolver</span><span class=\"p\">:</span> <span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">resolvers</span><span class=\"o\">.</span><span class=\"n\">TaxonomyResolver</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">schema_resolver</span><span class=\"p\">:</span> <span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">resolvers</span><span class=\"o\">.</span><span class=\"n\">SchemaResolver</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">fields_validator</span><span class=\"p\">:</span> <span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">validators</span><span class=\"o\">.</span><span class=\"n\">FieldsValidator</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">policy_resolver</span><span class=\"p\">:</span> <span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">policy</span><span class=\"o\">.</span><span class=\"n\">PolicyResolver</span> <span class=\"o\">=</span> <span class=\"n\">PolicyResolver</span><span class=\"p\">(</span><span class=\"n\">policy</span><span class=\"o\">=</span><span class=\"n\">Policy</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;when_any_is_not_identified&#39;</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">ActionOnIssue</span><span class=\"o\">.</span><span class=\"n\">FAIL</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;when_any_is_not_valid&#39;</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">ActionOnIssue</span><span class=\"o\">.</span><span class=\"n\">FAIL</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;when_any_taxonomy_is_not_mapped&#39;</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">ActionOnIssue</span><span class=\"o\">.</span><span class=\"n\">FAIL</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;when_field_is_not_identified&#39;</span><span class=\"p\">:</span> <span class=\"p\">{},</span> <span class=\"s1\">&#39;when_field_is_not_valid&#39;</span><span class=\"p\">:</span> <span class=\"p\">{},</span> <span class=\"s1\">&#39;when_field_taxonomy_is_not_mapped&#39;</span><span class=\"p\">:</span> <span class=\"p\">{}}))</span>,</span><span class=\"param\">\t<span class=\"n\">_raw</span><span class=\"p\">:</span> <span class=\"n\">dask</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t_schema_checker: etl.pkg.components.interface.Pipable = &lt;class &#x27;etl.pkg.components.interface.NopPipe&#x27;&gt;,</span><span class=\"param\">\t_content_checker: etl.pkg.components.interface.Pipable = &lt;class &#x27;etl.pkg.components.interface.NopPipe&#x27;&gt;,</span><span class=\"param\">\t_identifier: etl.pkg.components.interface.Pipable = &lt;class &#x27;etl.pkg.components.interface.NopPipe&#x27;&gt;,</span><span class=\"param\">\t_taxonomy_mapper: etl.pkg.components.interface.Pipable = &lt;class &#x27;etl.pkg.components.interface.NopPipe&#x27;&gt;,</span><span class=\"param\">\t_entity_mapper: etl.pkg.components.interface.Pipable = &lt;class &#x27;etl.pkg.components.interface.NopPipe&#x27;&gt;,</span><span class=\"param\">\t_history_builder: etl.pkg.components.interface.Pipable = &lt;class &#x27;etl.pkg.components.interface.NopPipe&#x27;&gt;</span>)</span>"}, "etl.pkg.workflows.Generic.read_csv": {"fullname": "etl.pkg.workflows.Generic.read_csv", "modulename": "etl.pkg.workflows", "qualname": "Generic.read_csv", "kind": "function", "doc": "<p>read_csv binds the input CSV file to a lazy dataframe.</p>\n\n<p>Args:\n    urlpath (str): the file path.</p>\n\n<p>Returns:\n    DataFrame: a lazy dataframe to provide as input</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">urlpath</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">dask</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, "etl.pkg.workflows.Generic.execute": {"fullname": "etl.pkg.workflows.Generic.execute", "modulename": "etl.pkg.workflows", "qualname": "Generic.execute", "kind": "function", "doc": "<p>execute the generic workflow.</p>\n\n<p>Returns:\n    dataframe: the concatenated report of all pipelines for this workflow</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">dask</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, "etl.pkg.workflows.Generic.did_produce_recyclable": {"fullname": "etl.pkg.workflows.Generic.did_produce_recyclable", "modulename": "etl.pkg.workflows", "qualname": "Generic.did_produce_recyclable", "kind": "function", "doc": "<p>_summary_</p>\n\n<p>Returns:\n    bool: TODO</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "etl.sample_generic_etl": {"fullname": "etl.sample_generic_etl", "modulename": "etl.sample_generic_etl", "kind": "module", "doc": "<p>Script sample_generic_ETL illustrates the scaffolding of a data integration workflow\nusing the helper components provided by the modules exposed by etl.pkg.</p>\n"}, "etl.sample_generic_etl.FIELDS_WITH_EXTERNAL_IDENTIFIERS": {"fullname": "etl.sample_generic_etl.FIELDS_WITH_EXTERNAL_IDENTIFIERS", "modulename": "etl.sample_generic_etl", "qualname": "FIELDS_WITH_EXTERNAL_IDENTIFIERS", "kind": "variable", "doc": "<p>List of columns used as external identifiers</p>\n", "default_value": "{&#x27;security_id&#x27;: &#x27;isin&#x27;}"}, "etl.sample_generic_etl.FIELDS_WITH_TAXONOMIES": {"fullname": "etl.sample_generic_etl.FIELDS_WITH_TAXONOMIES", "modulename": "etl.sample_generic_etl", "qualname": "FIELDS_WITH_TAXONOMIES", "kind": "variable", "doc": "<p>List of columns subject to taxonomy mappings</p>\n", "default_value": "{&#x27;taxo1&#x27;: &#x27;TAXO.MNEMO1&#x27;, &#x27;taxo2&#x27;: &#x27;TAXO.MNEMO2&#x27;}"}, "etl.sample_generic_etl.FIELDS_WITH_VALIDATION": {"fullname": "etl.sample_generic_etl.FIELDS_WITH_VALIDATION", "modulename": "etl.sample_generic_etl", "qualname": "FIELDS_WITH_VALIDATION", "kind": "variable", "doc": "<p>List of columns subject to validation</p>\n", "default_value": "{}"}, "etl.sample_generic_etl.CSV_SCHEMA": {"fullname": "etl.sample_generic_etl.CSV_SCHEMA", "modulename": "etl.sample_generic_etl", "qualname": "CSV_SCHEMA", "kind": "variable", "doc": "<p>Definition of the input schema</p>\n", "default_value": "{&#x27;taxo2&#x27;, &#x27;payload1&#x27;, &#x27;payload2&#x27;, &#x27;id&#x27;, &#x27;taxo1&#x27;}"}, "etl.sample_generic_etl.execute": {"fullname": "etl.sample_generic_etl.execute", "modulename": "etl.sample_generic_etl", "qualname": "execute", "kind": "function", "doc": "<p>execute the ETL integration workflow.</p>\n\n<ul>\n<li>binds an input CSV to a lazy dataframe, then</li>\n<li>executes the generic ETL processing workflow to ingest this input</li>\n</ul>\n\n<h2 id=\"todos\">TODOs</h2>\n\n<ul>\n<li><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled> recyclable interface pb here, recycled output is not</li>\n<li><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled> know yet to the file resolver</li>\n<li><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled> schema as dtype</li>\n<li><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled> taxonomies config should do mappings as well</li>\n<li><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled> name_prefix from flags</li>\n<li><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled> map flag overrides to config</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args_namespace</span><span class=\"p\">:</span> <span class=\"n\">argparse</span><span class=\"o\">.</span><span class=\"n\">Namespace</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "etl.sample_generic_etl.main": {"fullname": "etl.sample_generic_etl.main", "modulename": "etl.sample_generic_etl", "qualname": "main", "kind": "function", "doc": "<p>main entry point.</p>\n\n<p>Parses and validates CLI flags, then executes the job with this parameterization.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "etl.tests": {"fullname": "etl.tests", "modulename": "etl.tests", "kind": "module", "doc": "<p></p>\n"}, "etl.tests.flags_test": {"fullname": "etl.tests.flags_test", "modulename": "etl.tests.flags_test", "kind": "module", "doc": "<p>Tests for module etl.pkg.flags</p>\n"}, "etl.tests.flags_test.TestArgumentParser": {"fullname": "etl.tests.flags_test.TestArgumentParser", "modulename": "etl.tests.flags_test", "qualname": "TestArgumentParser", "kind": "class", "doc": "<p>TestArgumentParser exercises the flags.ArgumentParser class.</p>\n", "bases": "unittest.case.TestCase"}, "etl.tests.flags_test.TestArgumentParser.parser": {"fullname": "etl.tests.flags_test.TestArgumentParser.parser", "modulename": "etl.tests.flags_test", "qualname": "TestArgumentParser.parser", "kind": "function", "doc": "<p>parser instantiates a fresh CLI args parser</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">etl</span><span class=\"o\">.</span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">flags</span><span class=\"o\">.</span><span class=\"n\">ArgumentParser</span>:</span></span>", "funcdef": "def"}, "etl.tests.flags_test.TestArgumentParser.test_happy_path": {"fullname": "etl.tests.flags_test.TestArgumentParser.test_happy_path", "modulename": "etl.tests.flags_test", "qualname": "TestArgumentParser.test_happy_path", "kind": "function", "doc": "<p>Should properly parse and validate args</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.tests.flags_test.TestArgumentParser.test_happy_with_files": {"fullname": "etl.tests.flags_test.TestArgumentParser.test_happy_with_files", "modulename": "etl.tests.flags_test", "qualname": "TestArgumentParser.test_happy_with_files", "kind": "function", "doc": "<p>Should properly parse and validate args with explicit files</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.tests.flags_test.TestArgumentParser.test_invalid_args": {"fullname": "etl.tests.flags_test.TestArgumentParser.test_invalid_args", "modulename": "etl.tests.flags_test", "qualname": "TestArgumentParser.test_invalid_args", "kind": "function", "doc": "<p>Should exit on invalid argument</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.tests.flags_test.TestArgumentParser.test_invalid_start_date": {"fullname": "etl.tests.flags_test.TestArgumentParser.test_invalid_start_date", "modulename": "etl.tests.flags_test", "qualname": "TestArgumentParser.test_invalid_start_date", "kind": "function", "doc": "<p>Should reject invalid date</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.tests.flags_test.TestArgumentParser.test_valid_end_date": {"fullname": "etl.tests.flags_test.TestArgumentParser.test_valid_end_date", "modulename": "etl.tests.flags_test", "qualname": "TestArgumentParser.test_valid_end_date", "kind": "function", "doc": "<p>Should get valid end date</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.tests.flags_test.TestArgumentParser.test_valid_standalone_end_date": {"fullname": "etl.tests.flags_test.TestArgumentParser.test_valid_standalone_end_date", "modulename": "etl.tests.flags_test", "qualname": "TestArgumentParser.test_valid_standalone_end_date", "kind": "function", "doc": "<p>Should get valid standaone_end date</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.tests.flags_test.TestArgumentParser.test_invalid_end_date": {"fullname": "etl.tests.flags_test.TestArgumentParser.test_invalid_end_date", "modulename": "etl.tests.flags_test", "qualname": "TestArgumentParser.test_invalid_end_date", "kind": "function", "doc": "<p>Should reject end_date past start_date</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.tests.flags_test.TestArgumentParser.test_invalid_no_input": {"fullname": "etl.tests.flags_test.TestArgumentParser.test_invalid_no_input", "modulename": "etl.tests.flags_test", "qualname": "TestArgumentParser.test_invalid_no_input", "kind": "function", "doc": "<p>Should reject with no input specified.</p>\n\n<p>NOTE: the error context (exception chaining) is lost after\nthe with statement, hence can't use assertRaisesRegex.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_not_existing": {"fullname": "etl.tests.flags_test.TestArgumentParser.test_invalid_file_not_existing", "modulename": "etl.tests.flags_test", "qualname": "TestArgumentParser.test_invalid_file_not_existing", "kind": "function", "doc": "<p>Should reject with no existing file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_is_a_dir": {"fullname": "etl.tests.flags_test.TestArgumentParser.test_invalid_file_is_a_dir", "modulename": "etl.tests.flags_test", "qualname": "TestArgumentParser.test_invalid_file_is_a_dir", "kind": "function", "doc": "<p>Should reject with input file as a directory</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_existing": {"fullname": "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_existing", "modulename": "etl.tests.flags_test", "qualname": "TestArgumentParser.test_invalid_dir_not_existing", "kind": "function", "doc": "<p>Should reject with no existing directory</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_folder": {"fullname": "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_folder", "modulename": "etl.tests.flags_test", "qualname": "TestArgumentParser.test_invalid_dir_not_folder", "kind": "function", "doc": "<p>Should reject with input_dir not a directory</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.tests.io_test": {"fullname": "etl.tests.io_test", "modulename": "etl.tests.io_test", "kind": "module", "doc": "<p>Tests for module etl.pkg.io</p>\n"}, "etl.tests.io_test.TestFileResolver": {"fullname": "etl.tests.io_test.TestFileResolver", "modulename": "etl.tests.io_test", "qualname": "TestFileResolver", "kind": "class", "doc": "<p>TestFileResolver exercises the io.FileResolver class.</p>\n", "bases": "unittest.case.TestCase"}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_archive": {"fullname": "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_archive", "modulename": "etl.tests.io_test", "qualname": "TestFileResolver.test_happy_file_resolver_archive", "kind": "function", "doc": "<p>Happy path for file resolver, with start date in file name,\nthen moved to archive.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_bad": {"fullname": "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_bad", "modulename": "etl.tests.io_test", "qualname": "TestFileResolver.test_happy_file_resolver_bad", "kind": "function", "doc": "<p>Happy path for file resolver, with start date in file name,\nthen moved to bad</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.tests.io_test.TestFileResolver.test_ouput_report": {"fullname": "etl.tests.io_test.TestFileResolver.test_ouput_report", "modulename": "etl.tests.io_test", "qualname": "TestFileResolver.test_ouput_report", "kind": "function", "doc": "<p>Happy path for file resolver, with start date in file name,\ncheck output_report</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.tests.io_test.TestFileResolver.test_ouput_recyclable": {"fullname": "etl.tests.io_test.TestFileResolver.test_ouput_recyclable", "modulename": "etl.tests.io_test", "qualname": "TestFileResolver.test_ouput_recyclable", "kind": "function", "doc": "<p>Happy path for file resolver, with start date in file name,\ncheck output_recyclable</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.tests.io_test.TestFileResolver.test_override_start_date": {"fullname": "etl.tests.io_test.TestFileResolver.test_override_start_date", "modulename": "etl.tests.io_test", "qualname": "TestFileResolver.test_override_start_date", "kind": "function", "doc": "<p>Happy path for file resolver, with start date in file name,\ncheck that the provided start_date acts as an override</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.tests.io_test.TestFileResolver.test_guard_constructor": {"fullname": "etl.tests.io_test.TestFileResolver.test_guard_constructor", "modulename": "etl.tests.io_test", "qualname": "TestFileResolver.test_guard_constructor", "kind": "function", "doc": "<p>Guard constructor on invalid arguments</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.tests.io_test.TestFileResolver.test_date_extraction_no_date": {"fullname": "etl.tests.io_test.TestFileResolver.test_date_extraction_no_date", "modulename": "etl.tests.io_test", "qualname": "TestFileResolver.test_date_extraction_no_date", "kind": "function", "doc": "<p>Exceptions on invalid date patterns</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.tests.io_test.TestFileResolver.test_date_extraction_invalid_date": {"fullname": "etl.tests.io_test.TestFileResolver.test_date_extraction_invalid_date", "modulename": "etl.tests.io_test", "qualname": "TestFileResolver.test_date_extraction_invalid_date", "kind": "function", "doc": "<p>Exceptions on invalid date</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.tests.io_test.TestFileResolver.test_date_extraction_many_dates": {"fullname": "etl.tests.io_test.TestFileResolver.test_date_extraction_many_dates", "modulename": "etl.tests.io_test", "qualname": "TestFileResolver.test_date_extraction_many_dates", "kind": "function", "doc": "<p>Should work on pattern with date plus timestamp</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.tests.io_test.TestFileResolverIterator": {"fullname": "etl.tests.io_test.TestFileResolverIterator", "modulename": "etl.tests.io_test", "qualname": "TestFileResolverIterator", "kind": "class", "doc": "<p>TestFileResolverIterator exercises the io.FileResolverIterator class.</p>\n", "bases": "unittest.case.TestCase"}, "etl.tests.io_test.TestFileResolverIterator.test_iterator_from_dir": {"fullname": "etl.tests.io_test.TestFileResolverIterator.test_iterator_from_dir", "modulename": "etl.tests.io_test", "qualname": "TestFileResolverIterator.test_iterator_from_dir", "kind": "function", "doc": "<p>Iterate over a collection of FileResolvers (no predetermined order)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.tests.io_test.TestFileResolverContext": {"fullname": "etl.tests.io_test.TestFileResolverContext", "modulename": "etl.tests.io_test", "qualname": "TestFileResolverContext", "kind": "class", "doc": "<p>TestFileResolverContext exercises the context manager for the io.FileResolver class.</p>\n", "bases": "unittest.case.TestCase"}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_success": {"fullname": "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_success", "modulename": "etl.tests.io_test", "qualname": "TestFileResolverContext.test_file_resolver_context_success", "kind": "function", "doc": "<p>File should be moved to some predefined archive upon success</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_failure": {"fullname": "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_failure", "modulename": "etl.tests.io_test", "qualname": "TestFileResolverContext.test_file_resolver_context_failure", "kind": "function", "doc": "<p>File should be moved to some predefined sink upon error</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_other_failure": {"fullname": "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_other_failure", "modulename": "etl.tests.io_test", "qualname": "TestFileResolverContext.test_file_resolver_context_other_failure", "kind": "function", "doc": "<p>File should NOT be moved on some uncontrolled error</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "etl.tests.utils_test": {"fullname": "etl.tests.utils_test", "modulename": "etl.tests.utils_test", "kind": "module", "doc": "<p>Common utilities for tests</p>\n"}, "etl.tests.utils_test.FIXTURE_PREFIX": {"fullname": "etl.tests.utils_test.FIXTURE_PREFIX", "modulename": "etl.tests.utils_test", "qualname": "FIXTURE_PREFIX", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;test_fixture&#x27;"}, "etl.tests.utils_test.TEST_DATE": {"fullname": "etl.tests.utils_test.TEST_DATE", "modulename": "etl.tests.utils_test", "qualname": "TEST_DATE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;20230905&#x27;"}, "etl.tests.utils_test.create_test_file": {"fullname": "etl.tests.utils_test.create_test_file", "modulename": "etl.tests.utils_test", "qualname": "create_test_file", "kind": "function", "doc": "<p>Create a test file in a temporary folder</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">temp_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">test_date</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;test_fixture&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}}, "docInfo": {"etl": {"qualname": 0, "fullname": 1, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.components": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.components.checkers": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 8}, "etl.pkg.components.checkers.SchemaChecker": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 13}, "etl.pkg.components.checkers.SchemaChecker.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 3}, "etl.pkg.components.checkers.SchemaChecker.schema_resolver": {"qualname": 3, "fullname": 7, "annotation": 5, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.components.checkers.SchemaChecker.pipe": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 92, "bases": 0, "doc": 25}, "etl.pkg.components.checkers.ContentChecker": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 42}, "etl.pkg.components.checkers.ContentChecker.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 77, "bases": 0, "doc": 3}, "etl.pkg.components.checkers.ContentChecker.fields_validator": {"qualname": 3, "fullname": 7, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.components.checkers.ContentChecker.policy": {"qualname": 2, "fullname": 6, "annotation": 5, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.components.checkers.ContentChecker.pipe": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 92, "bases": 0, "doc": 122}, "etl.pkg.components.historian": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 16}, "etl.pkg.components.historian.HistoryBuilder": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 13}, "etl.pkg.components.historian.HistoryBuilder.pipe": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 20}, "etl.pkg.components.identifiers": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 14}, "etl.pkg.components.identifiers.Identifier": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 13}, "etl.pkg.components.identifiers.Identifier.pipe": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 39}, "etl.pkg.components.interface": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 19}, "etl.pkg.components.interface.ResultWithReport": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 9, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.components.interface.Executable": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 9}, "etl.pkg.components.interface.Executable.execute": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 21}, "etl.pkg.components.interface.Pipable": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 20}, "etl.pkg.components.interface.Pipable.pipe": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 92, "bases": 0, "doc": 20}, "etl.pkg.components.interface.NopPipe": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 12}, "etl.pkg.components.interface.NopPipe.pipe": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 92, "bases": 0, "doc": 20}, "etl.pkg.components.mappers": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 10}, "etl.pkg.components.mappers.TaxonomyMapper": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 13}, "etl.pkg.components.mappers.TaxonomyMapper.pipe": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 19}, "etl.pkg.components.mappers.TaxonomyMapper.check_taxonomies": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 20}, "etl.pkg.components.mappers.EntityMapper": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 13}, "etl.pkg.components.mappers.EntityMapper.pipe": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 19}, "etl.pkg.components.mappers.EntityMapper.map_remainder": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 20}, "etl.pkg.components.mappers.EntityMapper.map_target_entities": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 20}, "etl.pkg.components.recycler": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.components.recycler.output_recyclable_file": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 13}, "etl.pkg.components.transformers": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 9}, "etl.pkg.config": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 27}, "etl.pkg.config.DEFAULT_ENV_PREFIX": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.config.DEFAULT_CONTEXT_ENV": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 6, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.config.SUPPORTED_CONTEXTS": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 28, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.config.DEFAULT_CONTEXT": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 6, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.config.DEFAULTS_SETTINGS": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.config.DEFAULT_SETTING_ROOT_PATH_ENV": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.config.DEFAULT_SETTING_ROOT_PATH": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 4, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.config.DEFAULT_SETTING_CONTEXT_FOLDER": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 6, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.config.DEFAULT_SETTING_CONFIG_NAME": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.config.Registry": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 230}, "etl.pkg.config.Registry.context_var": {"qualname": 3, "fullname": 6, "annotation": 2, "default_value": 6, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.config.Registry.root_var": {"qualname": 3, "fullname": 6, "annotation": 2, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.config.Registry.env_prefix": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.config.Registry.config_context_folder": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 6, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.config.Registry.config_name": {"qualname": 3, "fullname": 6, "annotation": 2, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.config.Registry.context_folder": {"qualname": 3, "fullname": 6, "annotation": 2, "default_value": 6, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.config.Registry.defaults": {"qualname": 2, "fullname": 5, "annotation": 2, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.config.Registry.root": {"qualname": 2, "fullname": 5, "annotation": 2, "default_value": 4, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.config.Registry.context": {"qualname": 2, "fullname": 5, "annotation": 2, "default_value": 4, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.config.Registry.preload_defaults": {"qualname": 3, "fullname": 6, "annotation": 2, "default_value": 8, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.config.Registry.settings_files": {"qualname": 3, "fullname": 6, "annotation": 2, "default_value": 8, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.config.Registry.include_files": {"qualname": 3, "fullname": 6, "annotation": 2, "default_value": 8, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.config.Registry.secret_suffix": {"qualname": 3, "fullname": 6, "annotation": 2, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.config.Registry.config_ext": {"qualname": 3, "fullname": 6, "annotation": 2, "default_value": 8, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.config.Registry.load": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 35}, "etl.pkg.config.Registry.get": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 46}, "etl.pkg.config.Registry.dump": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 7}, "etl.pkg.database": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 32}, "etl.pkg.database.DBJob": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 5}, "etl.pkg.database.DBJob.execute": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 5}, "etl.pkg.dataframe": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 27}, "etl.pkg.dataframe.DataFrame": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 97}, "etl.pkg.dataframe.DataFrame.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 3}, "etl.pkg.dataframe.DataFrame.axes": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.dataframe.DataFrame.columns": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.dataframe.DataFrame.iloc": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 96}, "etl.pkg.dataframe.DataFrame.empty": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.dataframe.DataFrame.ndim": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 4}, "etl.pkg.dataframe.DataFrame.shape": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 78}, "etl.pkg.dataframe.DataFrame.dtypes": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 5}, "etl.pkg.dataframe.DataFrame.get_dtype_counts": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "etl.pkg.dataframe.DataFrame.get_ftype_counts": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 766}, "etl.pkg.dataframe.DataFrame.sort_values": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 195, "bases": 0, "doc": 222}, "etl.pkg.dataframe.DataFrame.set_index": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 145, "bases": 0, "doc": 1362}, "etl.pkg.dataframe.DataFrame.pop": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 445}, "etl.pkg.dataframe.DataFrame.nlargest": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 1189}, "etl.pkg.dataframe.DataFrame.nsmallest": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 1131}, "etl.pkg.dataframe.DataFrame.groupby": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 76, "bases": 0, "doc": 2483}, "etl.pkg.dataframe.DataFrame.categorize": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 49, "bases": 0, "doc": 122}, "etl.pkg.dataframe.DataFrame.assign": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 727}, "etl.pkg.dataframe.DataFrame.rename": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 1173}, "etl.pkg.dataframe.DataFrame.query": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 727}, "etl.pkg.dataframe.DataFrame.eval": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 33, "bases": 0, "doc": 720}, "etl.pkg.dataframe.DataFrame.dropna": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 982}, "etl.pkg.dataframe.DataFrame.clip": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 41, "bases": 0, "doc": 1014}, "etl.pkg.dataframe.DataFrame.clip_lower": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 3}, "etl.pkg.dataframe.DataFrame.clip_upper": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 3}, "etl.pkg.dataframe.DataFrame.squeeze": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 1065}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 45, "bases": 0, "doc": 668}, "etl.pkg.dataframe.DataFrame.explode": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 779}, "etl.pkg.dataframe.DataFrame.to_bag": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 126}, "etl.pkg.dataframe.DataFrame.to_parquet": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 1113}, "etl.pkg.dataframe.DataFrame.to_orc": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 10}, "etl.pkg.dataframe.DataFrame.to_string": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 22, "bases": 0, "doc": 793}, "etl.pkg.dataframe.DataFrame.drop": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 1695}, "etl.pkg.dataframe.DataFrame.merge": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 167, "bases": 0, "doc": 787}, "etl.pkg.dataframe.DataFrame.join": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 94, "bases": 0, "doc": 1768}, "etl.pkg.dataframe.DataFrame.iterrows": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 448}, "etl.pkg.dataframe.DataFrame.itertuples": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 628}, "etl.pkg.dataframe.DataFrame.items": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 476}, "etl.pkg.dataframe.DataFrame.apply": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 110, "bases": 0, "doc": 956}, "etl.pkg.dataframe.DataFrame.applymap": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 662}, "etl.pkg.dataframe.DataFrame.map": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 3}, "etl.pkg.dataframe.DataFrame.round": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 784}, "etl.pkg.dataframe.DataFrame.nunique": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 317}, "etl.pkg.dataframe.DataFrame.mode": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 43, "bases": 0, "doc": 853}, "etl.pkg.dataframe.DataFrame.cov": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 53, "bases": 0, "doc": 1246}, "etl.pkg.dataframe.DataFrame.corr": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 776}, "etl.pkg.dataframe.DataFrame.info": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 9}, "etl.pkg.dataframe.DataFrame.memory_usage": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 864}, "etl.pkg.dataframe.DataFrame.pivot_table": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 87}, "etl.pkg.dataframe.DataFrame.melt": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 76, "bases": 0, "doc": 191}, "etl.pkg.dataframe.DataFrame.to_records": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 87}, "etl.pkg.dataframe.DataFrame.to_html": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 22, "bases": 0, "doc": 680}, "etl.pkg.dataframe.DataFrame.from_dict": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 67, "bases": 0, "doc": 20}, "etl.pkg.dataframe.DataFrame.add": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 1980}, "etl.pkg.dataframe.DataFrame.sub": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 1979}, "etl.pkg.dataframe.DataFrame.mul": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 1980}, "etl.pkg.dataframe.DataFrame.div": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 1981}, "etl.pkg.dataframe.DataFrame.divide": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 1981}, "etl.pkg.dataframe.DataFrame.truediv": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 1981}, "etl.pkg.dataframe.DataFrame.floordiv": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 1981}, "etl.pkg.dataframe.DataFrame.mod": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 1980}, "etl.pkg.dataframe.DataFrame.pow": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 1981}, "etl.pkg.dataframe.DataFrame.radd": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 1980}, "etl.pkg.dataframe.DataFrame.rsub": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 1979}, "etl.pkg.dataframe.DataFrame.rmul": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 1980}, "etl.pkg.dataframe.DataFrame.rdiv": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 1981}, "etl.pkg.dataframe.DataFrame.rtruediv": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 1981}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 1981}, "etl.pkg.dataframe.DataFrame.rmod": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 1980}, "etl.pkg.dataframe.DataFrame.rpow": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 1981}, "etl.pkg.dataframe.DataFrame.lt": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 1686}, "etl.pkg.dataframe.DataFrame.gt": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 1686}, "etl.pkg.dataframe.DataFrame.le": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 1689}, "etl.pkg.dataframe.DataFrame.ge": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 1689}, "etl.pkg.dataframe.DataFrame.ne": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 1687}, "etl.pkg.dataframe.DataFrame.eq": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 1686}, "etl.pkg.dataframe.Series": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 106}, "etl.pkg.dataframe.Series.axes": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.dataframe.Series.name": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.dataframe.Series.ndim": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 4}, "etl.pkg.dataframe.Series.shape": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 70}, "etl.pkg.dataframe.Series.dtype": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 5}, "etl.pkg.dataframe.Series.dt": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 67}, "etl.pkg.dataframe.Series.cat": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 67}, "etl.pkg.dataframe.Series.str": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 67}, "etl.pkg.dataframe.Series.nbytes": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 5}, "etl.pkg.dataframe.Series.rename": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 215}, "etl.pkg.dataframe.Series.round": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 233}, "etl.pkg.dataframe.Series.to_timestamp": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 45, "bases": 0, "doc": 668}, "etl.pkg.dataframe.Series.quantile": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 84}, "etl.pkg.dataframe.Series.median_approximate": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 25, "bases": 0, "doc": 71}, "etl.pkg.dataframe.Series.median": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 25, "bases": 0, "doc": 153}, "etl.pkg.dataframe.Series.groupby": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 76, "bases": 0, "doc": 2137}, "etl.pkg.dataframe.Series.count": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 22, "bases": 0, "doc": 167}, "etl.pkg.dataframe.Series.mode": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 95}, "etl.pkg.dataframe.Series.explode": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 421}, "etl.pkg.dataframe.Series.unique": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 33, "bases": 0, "doc": 22}, "etl.pkg.dataframe.Series.nunique": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 235}, "etl.pkg.dataframe.Series.value_counts": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 80, "bases": 0, "doc": 720}, "etl.pkg.dataframe.Series.nlargest": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 869}, "etl.pkg.dataframe.Series.nsmallest": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 867}, "etl.pkg.dataframe.Series.isin": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 667}, "etl.pkg.dataframe.Series.map": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 832}, "etl.pkg.dataframe.Series.dropna": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 567}, "etl.pkg.dataframe.Series.between": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 597}, "etl.pkg.dataframe.Series.clip": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 41, "bases": 0, "doc": 1014}, "etl.pkg.dataframe.Series.clip_lower": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 3}, "etl.pkg.dataframe.Series.clip_upper": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 3}, "etl.pkg.dataframe.Series.align": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 1383}, "etl.pkg.dataframe.Series.combine": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 628}, "etl.pkg.dataframe.Series.squeeze": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 1069}, "etl.pkg.dataframe.Series.combine_first": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 482}, "etl.pkg.dataframe.Series.to_bag": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 9}, "etl.pkg.dataframe.Series.to_frame": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 196}, "etl.pkg.dataframe.Series.to_string": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 22, "bases": 0, "doc": 232}, "etl.pkg.dataframe.Series.apply": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 71, "bases": 0, "doc": 783}, "etl.pkg.dataframe.Series.cov": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 311}, "etl.pkg.dataframe.Series.corr": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 52, "bases": 0, "doc": 550}, "etl.pkg.dataframe.Series.autocorr": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 390}, "etl.pkg.dataframe.Series.memory_usage": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 461}, "etl.pkg.dataframe.Series.is_monotonic_increasing": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 45}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 45}, "etl.pkg.dataframe.Series.view": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 541}, "etl.pkg.dataframe.Series.add": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 568}, "etl.pkg.dataframe.Series.sub": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 567}, "etl.pkg.dataframe.Series.mul": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 568}, "etl.pkg.dataframe.Series.div": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 568}, "etl.pkg.dataframe.Series.divide": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 568}, "etl.pkg.dataframe.Series.truediv": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 568}, "etl.pkg.dataframe.Series.floordiv": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 568}, "etl.pkg.dataframe.Series.mod": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 566}, "etl.pkg.dataframe.Series.pow": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 570}, "etl.pkg.dataframe.Series.radd": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 566}, "etl.pkg.dataframe.Series.rsub": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 565}, "etl.pkg.dataframe.Series.rmul": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 566}, "etl.pkg.dataframe.Series.rdiv": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 566}, "etl.pkg.dataframe.Series.rtruediv": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 566}, "etl.pkg.dataframe.Series.rfloordiv": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 566}, "etl.pkg.dataframe.Series.rmod": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 564}, "etl.pkg.dataframe.Series.rpow": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 568}, "etl.pkg.dataframe.Series.lt": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 575}, "etl.pkg.dataframe.Series.gt": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 575}, "etl.pkg.dataframe.Series.le": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 578}, "etl.pkg.dataframe.Series.ge": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 578}, "etl.pkg.dataframe.Series.ne": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 534}, "etl.pkg.dataframe.Series.eq": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 532}, "etl.pkg.exceptions": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 26}, "etl.pkg.exceptions.InvalidFileError": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 6}, "etl.pkg.exceptions.InvalidDataError": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 10}, "etl.pkg.exceptions.RuntimeEtlError": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 5}, "etl.pkg.exceptions.IOEtlError": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 5}, "etl.pkg.exceptions.DevMistakeError": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 4}, "etl.pkg.exceptions.ConfigError": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 4}, "etl.pkg.exceptions.FlagsError": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 6}, "etl.pkg.exceptions.UndeclaredFieldError": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 12}, "etl.pkg.flags": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 69}, "etl.pkg.flags.Namespace": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 24}, "etl.pkg.flags.Namespace.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "etl.pkg.flags.ArgumentParser": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 17}, "etl.pkg.flags.ArgumentParser.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 127, "bases": 0, "doc": 3}, "etl.pkg.flags.ArgumentParser.parse_args": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 54, "bases": 0, "doc": 73}, "etl.pkg.flags.iso_date": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 12}, "etl.pkg.io": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 96}, "etl.pkg.io.ISO_DATE_PREFIX": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 15}, "etl.pkg.io.BAD_FOLDER": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 5, "signature": 0, "bases": 0, "doc": 10}, "etl.pkg.io.ARCHIVE_FOLDER": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 5, "signature": 0, "bases": 0, "doc": 11}, "etl.pkg.io.RECYCLABLE_FOLDER": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 5, "signature": 0, "bases": 0, "doc": 10}, "etl.pkg.io.REPORT_FOLDER": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 5, "signature": 0, "bases": 0, "doc": 10}, "etl.pkg.io.FileResolver": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 131}, "etl.pkg.io.FileResolver.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 278, "bases": 0, "doc": 3}, "etl.pkg.io.FileResolver.file_name": {"qualname": 3, "fullname": 6, "annotation": 2, "default_value": 1, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.io.FileResolver.start_date": {"qualname": 3, "fullname": 6, "annotation": 3, "default_value": 1, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.io.FileResolver.date_pattern": {"qualname": 3, "fullname": 6, "annotation": 2, "default_value": 7, "signature": 0, "bases": 0, "doc": 19}, "etl.pkg.io.FileResolver.name_prefix": {"qualname": 3, "fullname": 6, "annotation": 2, "default_value": 4, "signature": 0, "bases": 0, "doc": 22}, "etl.pkg.io.FileResolver.bad_path": {"qualname": 3, "fullname": 6, "annotation": 2, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.io.FileResolver.archive_path": {"qualname": 3, "fullname": 6, "annotation": 2, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.io.FileResolver.recyclable_path": {"qualname": 3, "fullname": 6, "annotation": 2, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.io.FileResolver.report_path": {"qualname": 3, "fullname": 6, "annotation": 2, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.io.FileResolver.get_file_name": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 18}, "etl.pkg.io.FileResolver.set_date_from_name": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 51}, "etl.pkg.io.FileResolver.output_report": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 14}, "etl.pkg.io.FileResolver.output_recyclable": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 12}, "etl.pkg.io.FileResolver.move_to_archive": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 18}, "etl.pkg.io.FileResolver.move_to_bad": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 18}, "etl.pkg.io.file_resolver_context": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 82, "bases": 0, "doc": 62}, "etl.pkg.io.FileResolverIterator": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 28}, "etl.pkg.io.FileResolverIterator.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 311, "bases": 0, "doc": 3}, "etl.pkg.io.FileResolverIterator.dir_name": {"qualname": 3, "fullname": 6, "annotation": 2, "default_value": 1, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.io.FileResolverIterator.recurse": {"qualname": 2, "fullname": 5, "annotation": 2, "default_value": 1, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.io.FileResolverIterator.radix_pattern": {"qualname": 3, "fullname": 6, "annotation": 2, "default_value": 1, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.io.FileResolverIterator.input_files": {"qualname": 3, "fullname": 6, "annotation": 2, "default_value": 1, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.io.FileResolverIterator.start_date": {"qualname": 3, "fullname": 6, "annotation": 3, "default_value": 1, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.io.FileResolverIterator.date_pattern": {"qualname": 3, "fullname": 6, "annotation": 2, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.io.FileResolverIterator.name_prefix": {"qualname": 3, "fullname": 6, "annotation": 2, "default_value": 4, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.io.FileResolverIterator.bad_path": {"qualname": 3, "fullname": 6, "annotation": 2, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.io.FileResolverIterator.archive_path": {"qualname": 3, "fullname": 6, "annotation": 2, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.io.FileResolverIterator.recyclable_path": {"qualname": 3, "fullname": 6, "annotation": 2, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.io.FileResolverIterator.report_path": {"qualname": 3, "fullname": 6, "annotation": 2, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.policy": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 16}, "etl.pkg.policy.ActionOnIssue": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 14}, "etl.pkg.policy.ActionOnIssue.FAIL": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.policy.ActionOnIssue.TO_RECYCLE_BIN": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 9, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.policy.ActionOnIssue.SKIP": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.policy.ActionOnIssue.IGNORE": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.policy.ActionOnIssue.CREATE": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.policy.PolicyDict": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 13}, "etl.pkg.policy.PolicyDict.when_any_is_not_identified": {"qualname": 6, "fullname": 9, "annotation": 5, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.policy.PolicyDict.when_any_is_not_valid": {"qualname": 6, "fullname": 9, "annotation": 5, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.policy.PolicyDict.when_any_taxonomy_is_not_mapped": {"qualname": 7, "fullname": 10, "annotation": 5, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.policy.PolicyDict.when_field_is_not_identified": {"qualname": 6, "fullname": 9, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.policy.PolicyDict.when_field_is_not_valid": {"qualname": 6, "fullname": 9, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.policy.PolicyDict.when_field_taxonomy_is_not_mapped": {"qualname": 7, "fullname": 10, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.policy.Policy": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 24}, "etl.pkg.policy.Policy.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 3}, "etl.pkg.policy.Policy.dict": {"qualname": 2, "fullname": 5, "annotation": 5, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.policy.Policy.action_on_invalid_field": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 15}, "etl.pkg.policy.PolicyResolver": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "etl.pkg.policy.PolicyResolver.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 3}, "etl.pkg.policy.PolicyResolver.policy": {"qualname": 2, "fullname": 5, "annotation": 5, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.policy.PolicyResolver.tolerates_data_issues": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 12}, "etl.pkg.policy.strict": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 25, "bases": 0, "doc": 27}, "etl.pkg.policy.skip": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 25, "bases": 0, "doc": 23}, "etl.pkg.policy.from_config": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 50, "bases": 0, "doc": 28}, "etl.pkg.postgres": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.resolvers": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 23}, "etl.pkg.resolvers.FieldResolver": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 12}, "etl.pkg.resolvers.FieldResolver.get_mnemonic": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 19}, "etl.pkg.resolvers.FieldResolver.get_id": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 11}, "etl.pkg.resolvers.IdentifierResolver": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 46}, "etl.pkg.resolvers.TaxonomyResolver": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 27}, "etl.pkg.resolvers.SchemaResolver": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 12}, "etl.pkg.runtime": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 28}, "etl.pkg.runtime.Runtime": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 31}, "etl.pkg.runtime.Runtime.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 3}, "etl.pkg.runtime.Runtime.resources": {"qualname": 2, "fullname": 5, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.runtime.Runtime.start": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 12}, "etl.pkg.runtime.Runtime.stop": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 7}, "etl.pkg.runtime.Runtime.get_config": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 20}, "etl.pkg.runtime.Runtime.get_logger": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 14}, "etl.pkg.runtime.Runtime.get_target_db_connection": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 16}, "etl.pkg.runtime.context": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 57}, "etl.pkg.validators": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 10}, "etl.pkg.validators.SeriesValidator": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 9, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.validators.FieldsValidator": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 11, "doc": 22}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 57}, "etl.pkg.validators.regexp_validator": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 75, "bases": 0, "doc": 47}, "etl.pkg.validators.na_validator": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 52, "bases": 0, "doc": 12}, "etl.pkg.validators.minmax_validator": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 95, "bases": 0, "doc": 42}, "etl.pkg.validators.date_validator": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 81, "bases": 0, "doc": 29}, "etl.pkg.workflows": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 25}, "etl.pkg.workflows.Base": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 20}, "etl.pkg.workflows.Base.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 522, "bases": 0, "doc": 3}, "etl.pkg.workflows.Base.runtime": {"qualname": 2, "fullname": 5, "annotation": 5, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.workflows.Base.start_date": {"qualname": 3, "fullname": 6, "annotation": 3, "default_value": 6, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.workflows.Base.end_date": {"qualname": 3, "fullname": 6, "annotation": 3, "default_value": 1, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.workflows.Base.identifier_resolver": {"qualname": 3, "fullname": 6, "annotation": 5, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.workflows.Base.taxonomy_resolver": {"qualname": 3, "fullname": 6, "annotation": 5, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.workflows.Base.schema_resolver": {"qualname": 3, "fullname": 6, "annotation": 5, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.workflows.Base.fields_validator": {"qualname": 3, "fullname": 6, "annotation": 5, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.workflows.Base.policy_resolver": {"qualname": 3, "fullname": 6, "annotation": 5, "default_value": 74, "signature": 0, "bases": 0, "doc": 3}, "etl.pkg.workflows.Base.execute": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 21}, "etl.pkg.workflows.Generic": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 17}, "etl.pkg.workflows.Generic.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 642, "bases": 0, "doc": 3}, "etl.pkg.workflows.Generic.read_csv": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 35}, "etl.pkg.workflows.Generic.execute": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 20}, "etl.pkg.workflows.Generic.did_produce_recyclable": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 10}, "etl.sample_generic_etl": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 27}, "etl.sample_generic_etl.FIELDS_WITH_EXTERNAL_IDENTIFIERS": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 10, "signature": 0, "bases": 0, "doc": 9}, "etl.sample_generic_etl.FIELDS_WITH_TAXONOMIES": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 18, "signature": 0, "bases": 0, "doc": 9}, "etl.sample_generic_etl.FIELDS_WITH_VALIDATION": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 1, "signature": 0, "bases": 0, "doc": 8}, "etl.sample_generic_etl.CSV_SCHEMA": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 17, "signature": 0, "bases": 0, "doc": 7}, "etl.sample_generic_etl.execute": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 25, "bases": 0, "doc": 99}, "etl.sample_generic_etl.main": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 10, "bases": 0, "doc": 21}, "etl.tests": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "etl.tests.flags_test": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 8}, "etl.tests.flags_test.TestArgumentParser": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 9}, "etl.tests.flags_test.TestArgumentParser.parser": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 9}, "etl.tests.flags_test.TestArgumentParser.test_happy_path": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 8}, "etl.tests.flags_test.TestArgumentParser.test_happy_with_files": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 11}, "etl.tests.flags_test.TestArgumentParser.test_invalid_args": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 7}, "etl.tests.flags_test.TestArgumentParser.test_invalid_start_date": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 6}, "etl.tests.flags_test.TestArgumentParser.test_valid_end_date": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 7}, "etl.tests.flags_test.TestArgumentParser.test_valid_standalone_end_date": {"qualname": 6, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 8}, "etl.tests.flags_test.TestArgumentParser.test_invalid_end_date": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 9}, "etl.tests.flags_test.TestArgumentParser.test_invalid_no_input": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 29}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_not_existing": {"qualname": 6, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 8}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_is_a_dir": {"qualname": 7, "fullname": 11, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 10}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_existing": {"qualname": 6, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 8}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_folder": {"qualname": 6, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 10}, "etl.tests.io_test": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 8}, "etl.tests.io_test.TestFileResolver": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 9}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_archive": {"qualname": 6, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 18}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_bad": {"qualname": 6, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 17}, "etl.tests.io_test.TestFileResolver.test_ouput_report": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 16}, "etl.tests.io_test.TestFileResolver.test_ouput_recyclable": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 16}, "etl.tests.io_test.TestFileResolver.test_override_start_date": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 23}, "etl.tests.io_test.TestFileResolver.test_guard_constructor": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 7}, "etl.tests.io_test.TestFileResolver.test_date_extraction_no_date": {"qualname": 6, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 7}, "etl.tests.io_test.TestFileResolver.test_date_extraction_invalid_date": {"qualname": 6, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 6}, "etl.tests.io_test.TestFileResolver.test_date_extraction_many_dates": {"qualname": 6, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 10}, "etl.tests.io_test.TestFileResolverIterator": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 9}, "etl.tests.io_test.TestFileResolverIterator.test_iterator_from_dir": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 12}, "etl.tests.io_test.TestFileResolverContext": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 13}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_success": {"qualname": 6, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 12}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_failure": {"qualname": 6, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 12}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_other_failure": {"qualname": 7, "fullname": 11, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 11}, "etl.tests.utils_test": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 6}, "etl.tests.utils_test.FIXTURE_PREFIX": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 6, "signature": 0, "bases": 0, "doc": 3}, "etl.tests.utils_test.TEST_DATE": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "etl.tests.utils_test.create_test_file": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 53, "bases": 0, "doc": 10}}, "length": 382, "save": true}, "index": {"qualname": {"root": {"docs": {"etl.pkg.components.checkers.SchemaChecker.__init__": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.__init__": {"tf": 1}, "etl.pkg.dataframe.DataFrame.__init__": {"tf": 1}, "etl.pkg.flags.Namespace.__init__": {"tf": 1}, "etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}, "etl.pkg.io.FileResolver.__init__": {"tf": 1}, "etl.pkg.io.FileResolverIterator.__init__": {"tf": 1}, "etl.pkg.policy.Policy.__init__": {"tf": 1}, "etl.pkg.policy.PolicyResolver.__init__": {"tf": 1}, "etl.pkg.runtime.Runtime.__init__": {"tf": 1}, "etl.pkg.workflows.Base.__init__": {"tf": 1}, "etl.pkg.workflows.Generic.__init__": {"tf": 1}}, "df": 12, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {"etl.pkg.components.checkers.SchemaChecker.schema_resolver": {"tf": 1}, "etl.pkg.workflows.Base.schema_resolver": {"tf": 1}, "etl.sample_generic_etl.CSV_SCHEMA": {"tf": 1}}, "df": 3, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.components.checkers.SchemaChecker": {"tf": 1}, "etl.pkg.components.checkers.SchemaChecker.__init__": {"tf": 1}, "etl.pkg.components.checkers.SchemaChecker.schema_resolver": {"tf": 1}, "etl.pkg.components.checkers.SchemaChecker.pipe": {"tf": 1}}, "df": 4}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.resolvers.SchemaResolver": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.config.SUPPORTED_CONTEXTS": {"tf": 1}}, "df": 1}}}}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"etl.pkg.config.Registry.secret_suffix": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {"etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}}, "df": 2}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_success": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 1}}, "df": 2, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.config.DEFAULT_SETTING_ROOT_PATH_ENV": {"tf": 1}, "etl.pkg.config.DEFAULT_SETTING_ROOT_PATH": {"tf": 1}, "etl.pkg.config.DEFAULT_SETTING_CONTEXT_FOLDER": {"tf": 1}, "etl.pkg.config.DEFAULT_SETTING_CONFIG_NAME": {"tf": 1}}, "df": 4, "s": {"docs": {"etl.pkg.config.DEFAULTS_SETTINGS": {"tf": 1}, "etl.pkg.config.Registry.settings_files": {"tf": 1}}, "df": 2}}}}}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.config.Registry.secret_suffix": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.axes": {"tf": 1}, "etl.pkg.dataframe.Series.name": {"tf": 1}, "etl.pkg.dataframe.Series.ndim": {"tf": 1}, "etl.pkg.dataframe.Series.shape": {"tf": 1}, "etl.pkg.dataframe.Series.dtype": {"tf": 1}, "etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}, "etl.pkg.dataframe.Series.nbytes": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.quantile": {"tf": 1}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.unique": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.clip_lower": {"tf": 1}, "etl.pkg.dataframe.Series.clip_upper": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.to_bag": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 70, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.validators.SeriesValidator": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.shape": {"tf": 1}, "etl.pkg.dataframe.Series.shape": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}}, "df": 1}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}}, "df": 2}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.Series.str": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}}, "df": 2}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.policy.strict": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.io.FileResolver.start_date": {"tf": 1}, "etl.pkg.io.FileResolverIterator.start_date": {"tf": 1}, "etl.pkg.runtime.Runtime.start": {"tf": 1}, "etl.pkg.workflows.Base.start_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_start_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_override_start_date": {"tf": 1}}, "df": 6}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"etl.tests.flags_test.TestArgumentParser.test_valid_standalone_end_date": {"tf": 1}}, "df": 1}}}}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.runtime.Runtime.stop": {"tf": 1}}, "df": 1}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.policy.ActionOnIssue.SKIP": {"tf": 1}, "etl.pkg.policy.skip": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.components.checkers.SchemaChecker.__init__": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.__init__": {"tf": 1}, "etl.pkg.dataframe.DataFrame.__init__": {"tf": 1}, "etl.pkg.flags.Namespace.__init__": {"tf": 1}, "etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}, "etl.pkg.io.FileResolver.__init__": {"tf": 1}, "etl.pkg.io.FileResolverIterator.__init__": {"tf": 1}, "etl.pkg.policy.Policy.__init__": {"tf": 1}, "etl.pkg.policy.PolicyResolver.__init__": {"tf": 1}, "etl.pkg.runtime.Runtime.__init__": {"tf": 1}, "etl.pkg.workflows.Base.__init__": {"tf": 1}, "etl.pkg.workflows.Generic.__init__": {"tf": 1}}, "df": 12}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.config.Registry.include_files": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1}}, "df": 1}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {"etl.pkg.dataframe.DataFrame.info": {"tf": 1}}, "df": 1}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.policy.Policy.action_on_invalid_field": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_args": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_start_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_no_input": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_not_existing": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_is_a_dir": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_existing": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_folder": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_invalid_date": {"tf": 1}}, "df": 10, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.exceptions.InvalidFileError": {"tf": 1}}, "df": 1}}}}}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.exceptions.InvalidDataError": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.io.FileResolverIterator.input_files": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_no_input": {"tf": 1}}, "df": 2}}}}, "d": {"docs": {"etl.pkg.resolvers.FieldResolver.get_id": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.components.identifiers.Identifier": {"tf": 1}, "etl.pkg.components.identifiers.Identifier.pipe": {"tf": 1}, "etl.pkg.workflows.Base.identifier_resolver": {"tf": 1}}, "df": 3, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.resolvers.IdentifierResolver": {"tf": 1}}, "df": 1}}}}}}}}, "s": {"docs": {"etl.sample_generic_etl.FIELDS_WITH_EXTERNAL_IDENTIFIERS": {"tf": 1}}, "df": 1}}, "d": {"docs": {"etl.pkg.policy.PolicyDict.when_any_is_not_identified": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_is_not_identified": {"tf": 1}}, "df": 2}}}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {"etl.pkg.dataframe.DataFrame.iloc": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.tests.io_test.TestFileResolverIterator.test_iterator_from_dir": {"tf": 1}}, "df": 1}}}}}, "m": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.items": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {"etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_is_not_identified": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_is_not_valid": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_taxonomy_is_not_mapped": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_is_not_identified": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_is_not_valid": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_taxonomy_is_not_mapped": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_is_a_dir": {"tf": 1}}, "df": 9, "i": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.Series.isin": {"tf": 1}}, "df": 1}}, "o": {"docs": {"etl.pkg.flags.iso_date": {"tf": 1}, "etl.pkg.io.ISO_DATE_PREFIX": {"tf": 1}}, "df": 2}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.policy.PolicyResolver.tolerates_data_issues": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.exceptions.IOEtlError": {"tf": 1}}, "df": 1}}}}}}}}}, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.policy.ActionOnIssue.IGNORE": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.components.checkers.SchemaChecker.schema_resolver": {"tf": 1}, "etl.pkg.io.file_resolver_context": {"tf": 1}, "etl.pkg.workflows.Base.identifier_resolver": {"tf": 1}, "etl.pkg.workflows.Base.taxonomy_resolver": {"tf": 1}, "etl.pkg.workflows.Base.schema_resolver": {"tf": 1}, "etl.pkg.workflows.Base.policy_resolver": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_archive": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_bad": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_success": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_failure": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_other_failure": {"tf": 1}}, "df": 11}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.runtime.Runtime.resources": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.components.interface.ResultWithReport": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.components.mappers.EntityMapper.map_remainder": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.recycler.output_recyclable_file": {"tf": 1}, "etl.pkg.io.RECYCLABLE_FOLDER": {"tf": 1}, "etl.pkg.io.FileResolver.recyclable_path": {"tf": 1}, "etl.pkg.io.FileResolver.output_recyclable": {"tf": 1}, "etl.pkg.io.FileResolverIterator.recyclable_path": {"tf": 1}, "etl.pkg.workflows.Generic.did_produce_recyclable": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_recyclable": {"tf": 1}}, "df": 7}}}}, "e": {"docs": {"etl.pkg.policy.ActionOnIssue.TO_RECYCLE_BIN": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_records": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.io.FileResolverIterator.recurse": {"tf": 1}}, "df": 1}}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.config.Registry.context_var": {"tf": 1}, "etl.pkg.config.Registry.root_var": {"tf": 1}, "etl.pkg.config.Registry.env_prefix": {"tf": 1}, "etl.pkg.config.Registry.config_context_folder": {"tf": 1}, "etl.pkg.config.Registry.config_name": {"tf": 1}, "etl.pkg.config.Registry.context_folder": {"tf": 1}, "etl.pkg.config.Registry.defaults": {"tf": 1}, "etl.pkg.config.Registry.root": {"tf": 1}, "etl.pkg.config.Registry.context": {"tf": 1}, "etl.pkg.config.Registry.preload_defaults": {"tf": 1}, "etl.pkg.config.Registry.settings_files": {"tf": 1}, "etl.pkg.config.Registry.include_files": {"tf": 1}, "etl.pkg.config.Registry.secret_suffix": {"tf": 1}, "etl.pkg.config.Registry.config_ext": {"tf": 1}, "etl.pkg.config.Registry.load": {"tf": 1}, "etl.pkg.config.Registry.get": {"tf": 1}, "etl.pkg.config.Registry.dump": {"tf": 1}}, "df": 18}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.validators.regexp_validator": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}}, "df": 2}}}}, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.io.REPORT_FOLDER": {"tf": 1}, "etl.pkg.io.FileResolver.report_path": {"tf": 1}, "etl.pkg.io.FileResolver.output_report": {"tf": 1}, "etl.pkg.io.FileResolverIterator.report_path": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_report": {"tf": 1}}, "df": 5}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.workflows.Generic.read_csv": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.config.DEFAULT_SETTING_ROOT_PATH_ENV": {"tf": 1}, "etl.pkg.config.DEFAULT_SETTING_ROOT_PATH": {"tf": 1}, "etl.pkg.config.Registry.root_var": {"tf": 1}, "etl.pkg.config.Registry.root": {"tf": 1}}, "df": 4}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}}, "df": 2}, "i": {"docs": {}, "df": 0, "x": {"docs": {"etl.pkg.io.FileResolverIterator.radix_pattern": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "b": {"docs": {"etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}}, "df": 2}}}, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}}, "df": 2}}, "o": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}}, "df": 2}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {"etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}}, "df": 2}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {"etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}}, "df": 2}}}}}}}, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {"etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}}, "df": 2}}}}}}}}, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.runtime.Runtime": {"tf": 1}, "etl.pkg.runtime.Runtime.__init__": {"tf": 1}, "etl.pkg.runtime.Runtime.resources": {"tf": 1}, "etl.pkg.runtime.Runtime.start": {"tf": 1}, "etl.pkg.runtime.Runtime.stop": {"tf": 1}, "etl.pkg.runtime.Runtime.get_config": {"tf": 1}, "etl.pkg.runtime.Runtime.get_logger": {"tf": 1}, "etl.pkg.runtime.Runtime.get_target_db_connection": {"tf": 1}, "etl.pkg.workflows.Base.runtime": {"tf": 1}}, "df": 9, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.exceptions.RuntimeEtlError": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.checkers.SchemaChecker.pipe": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}, "etl.pkg.components.historian.HistoryBuilder.pipe": {"tf": 1}, "etl.pkg.components.identifiers.Identifier.pipe": {"tf": 1}, "etl.pkg.components.interface.Pipable.pipe": {"tf": 1}, "etl.pkg.components.interface.NopPipe.pipe": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper.pipe": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.pipe": {"tf": 1}}, "df": 8}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.interface.Pipable": {"tf": 1}, "etl.pkg.components.interface.Pipable.pipe": {"tf": 1}}, "df": 2}}}}}, "v": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.components.checkers.ContentChecker.policy": {"tf": 1}, "etl.pkg.policy.Policy": {"tf": 1}, "etl.pkg.policy.Policy.__init__": {"tf": 1}, "etl.pkg.policy.Policy.dict": {"tf": 1}, "etl.pkg.policy.Policy.action_on_invalid_field": {"tf": 1}, "etl.pkg.policy.PolicyResolver.policy": {"tf": 1}, "etl.pkg.workflows.Base.policy_resolver": {"tf": 1}}, "df": 7, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.policy.PolicyDict": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_is_not_identified": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_is_not_valid": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_taxonomy_is_not_mapped": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_is_not_identified": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_is_not_valid": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_taxonomy_is_not_mapped": {"tf": 1}}, "df": 7}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.policy.PolicyResolver": {"tf": 1}, "etl.pkg.policy.PolicyResolver.__init__": {"tf": 1}, "etl.pkg.policy.PolicyResolver.policy": {"tf": 1}, "etl.pkg.policy.PolicyResolver.tolerates_data_issues": {"tf": 1}}, "df": 4}}}}}}}}}}}}, "p": {"docs": {"etl.pkg.dataframe.DataFrame.pop": {"tf": 1}}, "df": 1}, "w": {"docs": {"etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}}, "df": 2}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"etl.pkg.config.DEFAULT_ENV_PREFIX": {"tf": 1}, "etl.pkg.config.Registry.env_prefix": {"tf": 1}, "etl.pkg.io.ISO_DATE_PREFIX": {"tf": 1}, "etl.pkg.io.FileResolver.name_prefix": {"tf": 1}, "etl.pkg.io.FileResolverIterator.name_prefix": {"tf": 1}, "etl.tests.utils_test.FIXTURE_PREFIX": {"tf": 1}}, "df": 6}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.config.Registry.preload_defaults": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.workflows.Generic.did_produce_recyclable": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"etl.pkg.config.DEFAULT_SETTING_ROOT_PATH_ENV": {"tf": 1}, "etl.pkg.config.DEFAULT_SETTING_ROOT_PATH": {"tf": 1}, "etl.pkg.io.FileResolver.bad_path": {"tf": 1}, "etl.pkg.io.FileResolver.archive_path": {"tf": 1}, "etl.pkg.io.FileResolver.recyclable_path": {"tf": 1}, "etl.pkg.io.FileResolver.report_path": {"tf": 1}, "etl.pkg.io.FileResolverIterator.bad_path": {"tf": 1}, "etl.pkg.io.FileResolverIterator.archive_path": {"tf": 1}, "etl.pkg.io.FileResolverIterator.recyclable_path": {"tf": 1}, "etl.pkg.io.FileResolverIterator.report_path": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_happy_path": {"tf": 1}}, "df": 11}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.io.FileResolver.date_pattern": {"tf": 1}, "etl.pkg.io.FileResolverIterator.radix_pattern": {"tf": 1}, "etl.pkg.io.FileResolverIterator.date_pattern": {"tf": 1}}, "df": 3}}}}}, "r": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1}}, "df": 1, "r": {"docs": {"etl.tests.flags_test.TestArgumentParser.parser": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.components.checkers.ContentChecker": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.__init__": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.fields_validator": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.policy": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}}, "df": 5}}}}}}}}}, "x": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.config.DEFAULT_CONTEXT_ENV": {"tf": 1}, "etl.pkg.config.DEFAULT_CONTEXT": {"tf": 1}, "etl.pkg.config.DEFAULT_SETTING_CONTEXT_FOLDER": {"tf": 1}, "etl.pkg.config.Registry.context_var": {"tf": 1}, "etl.pkg.config.Registry.config_context_folder": {"tf": 1}, "etl.pkg.config.Registry.context_folder": {"tf": 1}, "etl.pkg.config.Registry.context": {"tf": 1}, "etl.pkg.io.file_resolver_context": {"tf": 1}, "etl.pkg.runtime.context": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_success": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_failure": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_other_failure": {"tf": 1}}, "df": 12, "s": {"docs": {"etl.pkg.config.SUPPORTED_CONTEXTS": {"tf": 1}}, "df": 1}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.config.DEFAULT_SETTING_CONFIG_NAME": {"tf": 1}, "etl.pkg.config.Registry.config_context_folder": {"tf": 1}, "etl.pkg.config.Registry.config_name": {"tf": 1}, "etl.pkg.config.Registry.config_ext": {"tf": 1}, "etl.pkg.policy.from_config": {"tf": 1}, "etl.pkg.runtime.Runtime.get_config": {"tf": 1}}, "df": 6, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.exceptions.ConfigError": {"tf": 1}}, "df": 1}}}}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.runtime.Runtime.get_target_db_connection": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.tests.io_test.TestFileResolver.test_guard_constructor": {"tf": null}}, "df": 1}}}}}}}}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.columns": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.Series.count": {"tf": 1}}, "df": 1, "s": {"docs": {"etl.pkg.dataframe.DataFrame.get_dtype_counts": {"tf": 1}, "etl.pkg.dataframe.DataFrame.get_ftype_counts": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}}, "df": 3}}}}, "v": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}}, "df": 2}, "r": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}}, "df": 2}}, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}}, "df": 2}}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"etl.pkg.components.mappers.TaxonomyMapper.check_taxonomies": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.Series.cat": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}}, "df": 1}}}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip_lower": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip_upper": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.clip_lower": {"tf": 1}, "etl.pkg.dataframe.Series.clip_upper": {"tf": 1}}, "df": 6}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.policy.ActionOnIssue.CREATE": {"tf": 1}, "etl.tests.utils_test.create_test_file": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "v": {"docs": {"etl.pkg.workflows.Generic.read_csv": {"tf": 1}, "etl.sample_generic_etl.CSV_SCHEMA": {"tf": 1}}, "df": 2}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.policy.PolicyDict.when_field_is_not_identified": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_is_not_valid": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_taxonomy_is_not_mapped": {"tf": 1}, "etl.pkg.policy.Policy.action_on_invalid_field": {"tf": 1}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1}}, "df": 5, "s": {"docs": {"etl.pkg.components.checkers.ContentChecker.fields_validator": {"tf": 1}, "etl.pkg.workflows.Base.fields_validator": {"tf": 1}, "etl.sample_generic_etl.FIELDS_WITH_EXTERNAL_IDENTIFIERS": {"tf": 1}, "etl.sample_generic_etl.FIELDS_WITH_TAXONOMIES": {"tf": 1}, "etl.sample_generic_etl.FIELDS_WITH_VALIDATION": {"tf": 1}}, "df": 5, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.validators.FieldsValidator": {"tf": 1}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1}}, "df": 2}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.resolvers.FieldResolver": {"tf": 1}, "etl.pkg.resolvers.FieldResolver.get_mnemonic": {"tf": 1}, "etl.pkg.resolvers.FieldResolver.get_id": {"tf": 1}}, "df": 3}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.recycler.output_recyclable_file": {"tf": 1}, "etl.pkg.io.FileResolver.file_name": {"tf": 1}, "etl.pkg.io.FileResolver.get_file_name": {"tf": 1}, "etl.pkg.io.file_resolver_context": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_not_existing": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_is_a_dir": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_archive": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_bad": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_success": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_failure": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_other_failure": {"tf": 1}, "etl.tests.utils_test.create_test_file": {"tf": 1}}, "df": 12, "s": {"docs": {"etl.pkg.config.Registry.settings_files": {"tf": 1}, "etl.pkg.config.Registry.include_files": {"tf": 1}, "etl.pkg.io.FileResolverIterator.input_files": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_happy_with_files": {"tf": 1}}, "df": 4}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.io.FileResolver": {"tf": 1}, "etl.pkg.io.FileResolver.__init__": {"tf": 1}, "etl.pkg.io.FileResolver.file_name": {"tf": 1}, "etl.pkg.io.FileResolver.start_date": {"tf": 1}, "etl.pkg.io.FileResolver.date_pattern": {"tf": 1}, "etl.pkg.io.FileResolver.name_prefix": {"tf": 1}, "etl.pkg.io.FileResolver.bad_path": {"tf": 1}, "etl.pkg.io.FileResolver.archive_path": {"tf": 1}, "etl.pkg.io.FileResolver.recyclable_path": {"tf": 1}, "etl.pkg.io.FileResolver.report_path": {"tf": 1}, "etl.pkg.io.FileResolver.get_file_name": {"tf": 1}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 1}, "etl.pkg.io.FileResolver.output_report": {"tf": 1}, "etl.pkg.io.FileResolver.output_recyclable": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_archive": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_bad": {"tf": 1}}, "df": 16, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.io.FileResolverIterator": {"tf": 1}, "etl.pkg.io.FileResolverIterator.__init__": {"tf": 1}, "etl.pkg.io.FileResolverIterator.dir_name": {"tf": 1}, "etl.pkg.io.FileResolverIterator.recurse": {"tf": 1}, "etl.pkg.io.FileResolverIterator.radix_pattern": {"tf": 1}, "etl.pkg.io.FileResolverIterator.input_files": {"tf": 1}, "etl.pkg.io.FileResolverIterator.start_date": {"tf": 1}, "etl.pkg.io.FileResolverIterator.date_pattern": {"tf": 1}, "etl.pkg.io.FileResolverIterator.name_prefix": {"tf": 1}, "etl.pkg.io.FileResolverIterator.bad_path": {"tf": 1}, "etl.pkg.io.FileResolverIterator.archive_path": {"tf": 1}, "etl.pkg.io.FileResolverIterator.recyclable_path": {"tf": 1}, "etl.pkg.io.FileResolverIterator.report_path": {"tf": 1}}, "df": 13}}}}}}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.Series.combine_first": {"tf": 1}}, "df": 1}}}, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"etl.tests.utils_test.FIXTURE_PREFIX": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.config.DEFAULT_SETTING_CONTEXT_FOLDER": {"tf": 1}, "etl.pkg.config.Registry.config_context_folder": {"tf": 1}, "etl.pkg.config.Registry.context_folder": {"tf": 1}, "etl.pkg.io.BAD_FOLDER": {"tf": 1}, "etl.pkg.io.ARCHIVE_FOLDER": {"tf": 1}, "etl.pkg.io.RECYCLABLE_FOLDER": {"tf": 1}, "etl.pkg.io.REPORT_FOLDER": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_folder": {"tf": 1}}, "df": 8}}}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.get_ftype_counts": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"etl.pkg.dataframe.DataFrame.from_dict": {"tf": 1}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 1}, "etl.pkg.policy.from_config": {"tf": 1}, "etl.tests.io_test.TestFileResolverIterator.test_iterator_from_dir": {"tf": 1}}, "df": 4}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.Series.to_frame": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {"etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}}, "df": 2}}}}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.exceptions.FlagsError": {"tf": 1}}, "df": 1}}}}}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.policy.ActionOnIssue.FAIL": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_failure": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_other_failure": {"tf": 1}}, "df": 2}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.policy.PolicyDict.when_any_is_not_valid": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_is_not_valid": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_valid_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_valid_standalone_end_date": {"tf": 1}}, "df": 4, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.components.checkers.ContentChecker.fields_validator": {"tf": 1}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1}, "etl.pkg.validators.regexp_validator": {"tf": 1}, "etl.pkg.validators.na_validator": {"tf": 1}, "etl.pkg.validators.minmax_validator": {"tf": 1}, "etl.pkg.validators.date_validator": {"tf": 1}, "etl.pkg.workflows.Base.fields_validator": {"tf": 1}}, "df": 7}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.sample_generic_etl.FIELDS_WITH_VALIDATION": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.Series.value_counts": {"tf": 1}}, "df": 1, "s": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {"etl.pkg.config.Registry.context_var": {"tf": 1}, "etl.pkg.config.Registry.root_var": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"etl.pkg.dataframe.Series.view": {"tf": 1}}, "df": 1}}}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.components.historian.HistoryBuilder": {"tf": 1}, "etl.pkg.components.historian.HistoryBuilder.pipe": {"tf": 1}}, "df": 2}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"etl.tests.flags_test.TestArgumentParser.test_happy_path": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_happy_with_files": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_archive": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_bad": {"tf": 1}}, "df": 4}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.interface.Executable": {"tf": 1}, "etl.pkg.components.interface.Executable.execute": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {"etl.pkg.components.interface.Executable.execute": {"tf": 1}, "etl.pkg.database.DBJob.execute": {"tf": 1}, "etl.pkg.workflows.Base.execute": {"tf": 1}, "etl.pkg.workflows.Generic.execute": {"tf": 1}, "etl.sample_generic_etl.execute": {"tf": 1}}, "df": 5}}}}}, "t": {"docs": {"etl.pkg.config.Registry.config_ext": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"etl.sample_generic_etl.FIELDS_WITH_EXTERNAL_IDENTIFIERS": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.tests.io_test.TestFileResolver.test_date_extraction_no_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_invalid_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_many_dates": {"tf": 1}}, "df": 3}}}}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.tests.flags_test.TestArgumentParser.test_invalid_file_not_existing": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_existing": {"tf": 1}}, "df": 2}}}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.components.mappers.EntityMapper": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.pipe": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.map_remainder": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.map_target_entities": {"tf": 1}}, "df": 4}}}}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.components.mappers.EntityMapper.map_target_entities": {"tf": 1}}, "df": 1}}}}}}, "v": {"docs": {"etl.pkg.config.DEFAULT_ENV_PREFIX": {"tf": 1}, "etl.pkg.config.DEFAULT_CONTEXT_ENV": {"tf": 1}, "etl.pkg.config.DEFAULT_SETTING_ROOT_PATH_ENV": {"tf": 1}, "etl.pkg.config.Registry.env_prefix": {"tf": 1}}, "df": 4}, "d": {"docs": {"etl.pkg.workflows.Base.end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_valid_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_valid_standalone_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_end_date": {"tf": 1}}, "df": 4}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.empty": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.eval": {"tf": 1}}, "df": 1}}}, "q": {"docs": {"etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 2}}, "n": {"docs": {}, "df": 0, "o": {"docs": {"etl.tests.flags_test.TestArgumentParser.test_invalid_no_input": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_no_date": {"tf": 1}}, "df": 2, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.interface.NopPipe": {"tf": 1}, "etl.pkg.components.interface.NopPipe.pipe": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {"etl.pkg.policy.PolicyDict.when_any_is_not_identified": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_is_not_valid": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_taxonomy_is_not_mapped": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_is_not_identified": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_is_not_valid": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_taxonomy_is_not_mapped": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_not_existing": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_existing": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_folder": {"tf": 1}}, "df": 9}}, "a": {"docs": {"etl.pkg.validators.na_validator": {"tf": 1}}, "df": 1, "m": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.config.DEFAULT_SETTING_CONFIG_NAME": {"tf": 1}, "etl.pkg.config.Registry.config_name": {"tf": 1}, "etl.pkg.dataframe.Series.name": {"tf": 1}, "etl.pkg.io.FileResolver.file_name": {"tf": 1}, "etl.pkg.io.FileResolver.name_prefix": {"tf": 1}, "etl.pkg.io.FileResolver.get_file_name": {"tf": 1}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 1}, "etl.pkg.io.FileResolverIterator.dir_name": {"tf": 1}, "etl.pkg.io.FileResolverIterator.name_prefix": {"tf": 1}}, "df": 9, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.flags.Namespace": {"tf": 1}, "etl.pkg.flags.Namespace.__init__": {"tf": 1}}, "df": 2}}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {"etl.pkg.dataframe.DataFrame.ndim": {"tf": 1}, "etl.pkg.dataframe.Series.ndim": {"tf": 1}}, "df": 2}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}}, "df": 2}}}}}}}, "s": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}}, "df": 2}}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {"etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}}, "df": 2}, "b": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.Series.nbytes": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.policy.PolicyDict.when_any_taxonomy_is_not_mapped": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_taxonomy_is_not_mapped": {"tf": 1}, "etl.pkg.workflows.Base.taxonomy_resolver": {"tf": 1}}, "df": 3, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.components.mappers.TaxonomyMapper": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper.pipe": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper.check_taxonomies": {"tf": 1}}, "df": 3}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.resolvers.TaxonomyResolver": {"tf": 1}}, "df": 1}}}}}}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.components.mappers.TaxonomyMapper.check_taxonomies": {"tf": 1}, "etl.sample_generic_etl.FIELDS_WITH_TAXONOMIES": {"tf": 1}}, "df": 2}}}}}}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.components.mappers.EntityMapper.map_target_entities": {"tf": 1}, "etl.pkg.runtime.Runtime.get_target_db_connection": {"tf": 1}}, "df": 2}}}}, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {"etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_orc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.to_bag": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_archive": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_bad": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.TO_RECYCLE_BIN": {"tf": 1}}, "df": 14, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.policy.PolicyResolver.tolerates_data_issues": {"tf": 1}}, "df": 1}}}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}}, "df": 2}}}}}}}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {"etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.tests.flags_test.TestArgumentParser.test_happy_path": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_happy_with_files": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_args": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_start_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_valid_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_valid_standalone_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_no_input": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_not_existing": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_is_a_dir": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_existing": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_folder": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_archive": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_bad": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_report": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_recyclable": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_override_start_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_guard_constructor": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_no_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_invalid_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_many_dates": {"tf": 1}, "etl.tests.io_test.TestFileResolverIterator.test_iterator_from_dir": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_success": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_failure": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_other_failure": {"tf": 1}, "etl.tests.utils_test.TEST_DATE": {"tf": 1}, "etl.tests.utils_test.create_test_file": {"tf": 1}}, "df": 27, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.tests.flags_test.TestArgumentParser": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.parser": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_happy_path": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_happy_with_files": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_args": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_start_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_valid_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_valid_standalone_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_no_input": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_not_existing": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_is_a_dir": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_existing": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_folder": {"tf": 1}}, "df": 14}}}}}}}}}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.tests.io_test.TestFileResolver": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_archive": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_bad": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_report": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_recyclable": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_override_start_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_guard_constructor": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_no_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_invalid_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_many_dates": {"tf": 1}}, "df": 10, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.tests.io_test.TestFileResolverIterator": {"tf": 1}, "etl.tests.io_test.TestFileResolverIterator.test_iterator_from_dir": {"tf": 1}}, "df": 2}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"etl.tests.io_test.TestFileResolverContext": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_success": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_failure": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_other_failure": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.components.mappers.EntityMapper.map_remainder": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.map_target_entities": {"tf": 1}, "etl.pkg.dataframe.DataFrame.map": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}}, "df": 4, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.policy.PolicyDict.when_any_taxonomy_is_not_mapped": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_taxonomy_is_not_mapped": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"etl.sample_generic_etl.main": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "y": {"docs": {"etl.tests.io_test.TestFileResolver.test_date_extraction_many_dates": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}}, "df": 2}}}}, "l": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.melt": {"tf": 1}}, "df": 1}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.Series.median_approximate": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}}, "df": 2}}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}}, "df": 2, "e": {"docs": {"etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}}, "df": 2}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1}}, "df": 2}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.io.FileResolver.move_to_archive": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_bad": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}}, "df": 2}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"etl.pkg.resolvers.FieldResolver.get_mnemonic": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {"etl.pkg.validators.minmax_validator": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.components.recycler.output_recyclable_file": {"tf": 1}, "etl.pkg.io.FileResolver.output_report": {"tf": 1}, "etl.pkg.io.FileResolver.output_recyclable": {"tf": 1}}, "df": 3}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"etl.tests.io_test.TestFileResolver.test_ouput_report": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_recyclable": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "c": {"docs": {"etl.pkg.dataframe.DataFrame.to_orc": {"tf": 1}}, "df": 1}}, "n": {"docs": {"etl.pkg.policy.Policy.action_on_invalid_field": {"tf": 1}}, "df": 1}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"etl.tests.io_test.TestFileResolver.test_override_start_date": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_other_failure": {"tf": 1}}, "df": 1}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.config.DEFAULT_ENV_PREFIX": {"tf": 1}, "etl.pkg.config.DEFAULT_CONTEXT_ENV": {"tf": 1}, "etl.pkg.config.DEFAULT_CONTEXT": {"tf": 1}, "etl.pkg.config.DEFAULT_SETTING_ROOT_PATH_ENV": {"tf": 1}, "etl.pkg.config.DEFAULT_SETTING_ROOT_PATH": {"tf": 1}, "etl.pkg.config.DEFAULT_SETTING_CONTEXT_FOLDER": {"tf": 1}, "etl.pkg.config.DEFAULT_SETTING_CONFIG_NAME": {"tf": 1}}, "df": 7, "s": {"docs": {"etl.pkg.config.DEFAULTS_SETTINGS": {"tf": 1}, "etl.pkg.config.Registry.defaults": {"tf": 1}, "etl.pkg.config.Registry.preload_defaults": {"tf": 1}}, "df": 3}}}}}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1}}, "df": 1}}}}}}}}, "v": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.exceptions.DevMistakeError": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.config.Registry.dump": {"tf": 1}}, "df": 1}}}, "b": {"docs": {"etl.pkg.runtime.Runtime.get_target_db_connection": {"tf": 1}}, "df": 1, "j": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {"etl.pkg.database.DBJob": {"tf": 1}, "etl.pkg.database.DBJob.execute": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"etl.pkg.policy.PolicyResolver.tolerates_data_issues": {"tf": 1}}, "df": 1, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.__init__": {"tf": 1}, "etl.pkg.dataframe.DataFrame.axes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.columns": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iloc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.empty": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ndim": {"tf": 1}, "etl.pkg.dataframe.DataFrame.shape": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.get_dtype_counts": {"tf": 1}, "etl.pkg.dataframe.DataFrame.get_ftype_counts": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip_lower": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip_upper": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_orc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.map": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.info": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.DataFrame.from_dict": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}}, "df": 78}}}}}}, "e": {"docs": {"etl.pkg.flags.iso_date": {"tf": 1}, "etl.pkg.io.ISO_DATE_PREFIX": {"tf": 1}, "etl.pkg.io.FileResolver.start_date": {"tf": 1}, "etl.pkg.io.FileResolver.date_pattern": {"tf": 1}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 1}, "etl.pkg.io.FileResolverIterator.start_date": {"tf": 1}, "etl.pkg.io.FileResolverIterator.date_pattern": {"tf": 1}, "etl.pkg.validators.date_validator": {"tf": 1}, "etl.pkg.workflows.Base.start_date": {"tf": 1}, "etl.pkg.workflows.Base.end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_start_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_valid_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_valid_standalone_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_end_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_override_start_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_no_date": {"tf": 1.4142135623730951}, "etl.tests.io_test.TestFileResolver.test_date_extraction_invalid_date": {"tf": 1.4142135623730951}, "etl.tests.io_test.TestFileResolver.test_date_extraction_many_dates": {"tf": 1}, "etl.tests.utils_test.TEST_DATE": {"tf": 1}}, "df": 19, "s": {"docs": {"etl.tests.io_test.TestFileResolver.test_date_extraction_many_dates": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {"etl.pkg.dataframe.Series.dt": {"tf": 1}}, "df": 1, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.get_dtype_counts": {"tf": 1}, "etl.pkg.dataframe.Series.dtype": {"tf": 1}}, "df": 2, "s": {"docs": {"etl.pkg.dataframe.DataFrame.dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.dataframe.DataFrame.drop": {"tf": 1}}, "df": 1, "n": {"docs": {}, "df": 0, "a": {"docs": {"etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.from_dict": {"tf": 1}, "etl.pkg.policy.Policy.dict": {"tf": 1}}, "df": 2}}, "v": {"docs": {"etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {"etl.pkg.io.FileResolverIterator.dir_name": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_is_a_dir": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_existing": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_folder": {"tf": 1}, "etl.tests.io_test.TestFileResolverIterator.test_iterator_from_dir": {"tf": 1}}, "df": 5}, "d": {"docs": {"etl.pkg.workflows.Generic.did_produce_recyclable": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.config.Registry.load": {"tf": 1}}, "df": 1}}, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.clip_lower": {"tf": 1}, "etl.pkg.dataframe.Series.clip_lower": {"tf": 1}}, "df": 2}}}, "g": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.runtime.Runtime.get_logger": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {"etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}}, "df": 2}, "e": {"docs": {"etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}}, "df": 2}}, "g": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}}, "df": 2, "t": {"docs": {"etl.pkg.config.Registry.get": {"tf": 1}, "etl.pkg.dataframe.DataFrame.get_dtype_counts": {"tf": 1}, "etl.pkg.dataframe.DataFrame.get_ftype_counts": {"tf": 1}, "etl.pkg.io.FileResolver.get_file_name": {"tf": 1}, "etl.pkg.resolvers.FieldResolver.get_mnemonic": {"tf": 1}, "etl.pkg.resolvers.FieldResolver.get_id": {"tf": 1}, "etl.pkg.runtime.Runtime.get_config": {"tf": 1}, "etl.pkg.runtime.Runtime.get_logger": {"tf": 1}, "etl.pkg.runtime.Runtime.get_target_db_connection": {"tf": 1}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1}}, "df": 10}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"etl.pkg.workflows.Generic": {"tf": 1}, "etl.pkg.workflows.Generic.__init__": {"tf": 1}, "etl.pkg.workflows.Generic.read_csv": {"tf": 1}, "etl.pkg.workflows.Generic.execute": {"tf": 1}, "etl.pkg.workflows.Generic.did_produce_recyclable": {"tf": 1}}, "df": 5}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 2}}}}}}, "t": {"docs": {"etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}}, "df": 2}, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"etl.tests.io_test.TestFileResolver.test_guard_constructor": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {"etl.tests.flags_test.TestArgumentParser.test_invalid_file_is_a_dir": {"tf": 1}}, "df": 1, "x": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.axes": {"tf": 1}, "etl.pkg.dataframe.Series.axes": {"tf": 1}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 2, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.Series.median_approximate": {"tf": 1}}, "df": 1}}}}}}}}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}}, "df": 2}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.Series.align": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.Series.autocorr": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.flags.ArgumentParser": {"tf": 1}, "etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}, "etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1}}, "df": 3}}}}}}}}}}}, "s": {"docs": {"etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_args": {"tf": 1}}, "df": 2}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.io.ARCHIVE_FOLDER": {"tf": 1}, "etl.pkg.io.FileResolver.archive_path": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_archive": {"tf": 1}, "etl.pkg.io.FileResolverIterator.archive_path": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_archive": {"tf": 1}}, "df": 5}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.policy.Policy.action_on_invalid_field": {"tf": 1}}, "df": 1, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.policy.ActionOnIssue": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.FAIL": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.TO_RECYCLE_BIN": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.SKIP": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.IGNORE": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.CREATE": {"tf": 1}}, "df": 6}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.policy.PolicyDict.when_any_is_not_identified": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_is_not_valid": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_taxonomy_is_not_mapped": {"tf": 1}}, "df": 3}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.query": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.Series.quantile": {"tf": 1}}, "df": 1}}}}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.clip_upper": {"tf": 1}, "etl.pkg.dataframe.Series.clip_upper": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}}, "df": 2}}}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.Series.unique": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.exceptions.UndeclaredFieldError": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.Series.to_bag": {"tf": 1}}, "df": 2}, "d": {"docs": {"etl.pkg.io.BAD_FOLDER": {"tf": 1}, "etl.pkg.io.FileResolver.bad_path": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_bad": {"tf": 1}, "etl.pkg.io.FileResolverIterator.bad_path": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_bad": {"tf": 1}}, "df": 5}, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.workflows.Base": {"tf": 1}, "etl.pkg.workflows.Base.__init__": {"tf": 1}, "etl.pkg.workflows.Base.runtime": {"tf": 1}, "etl.pkg.workflows.Base.start_date": {"tf": 1}, "etl.pkg.workflows.Base.end_date": {"tf": 1}, "etl.pkg.workflows.Base.identifier_resolver": {"tf": 1}, "etl.pkg.workflows.Base.taxonomy_resolver": {"tf": 1}, "etl.pkg.workflows.Base.schema_resolver": {"tf": 1}, "etl.pkg.workflows.Base.fields_validator": {"tf": 1}, "etl.pkg.workflows.Base.policy_resolver": {"tf": 1}, "etl.pkg.workflows.Base.execute": {"tf": 1}}, "df": 11}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.Series.between": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.policy.ActionOnIssue.TO_RECYCLE_BIN": {"tf": 1}}, "df": 1}}}, "j": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 1}}, "df": 1}}}}, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.policy.PolicyDict.when_any_is_not_identified": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_is_not_valid": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_taxonomy_is_not_mapped": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_is_not_identified": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_is_not_valid": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_taxonomy_is_not_mapped": {"tf": 1}}, "df": 6}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"etl.sample_generic_etl.FIELDS_WITH_EXTERNAL_IDENTIFIERS": {"tf": 1}, "etl.sample_generic_etl.FIELDS_WITH_TAXONOMIES": {"tf": 1}, "etl.sample_generic_etl.FIELDS_WITH_VALIDATION": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_happy_with_files": {"tf": 1}}, "df": 4}}}}}}, "fullname": {"root": {"docs": {"etl.pkg.components.checkers.SchemaChecker.__init__": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.__init__": {"tf": 1}, "etl.pkg.dataframe.DataFrame.__init__": {"tf": 1}, "etl.pkg.flags.Namespace.__init__": {"tf": 1}, "etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}, "etl.pkg.io.FileResolver.__init__": {"tf": 1}, "etl.pkg.io.FileResolverIterator.__init__": {"tf": 1}, "etl.pkg.policy.Policy.__init__": {"tf": 1}, "etl.pkg.policy.PolicyResolver.__init__": {"tf": 1}, "etl.pkg.runtime.Runtime.__init__": {"tf": 1}, "etl.pkg.workflows.Base.__init__": {"tf": 1}, "etl.pkg.workflows.Generic.__init__": {"tf": 1}}, "df": 12, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {"etl": {"tf": 1}, "etl.pkg": {"tf": 1}, "etl.pkg.components": {"tf": 1}, "etl.pkg.components.checkers": {"tf": 1}, "etl.pkg.components.checkers.SchemaChecker": {"tf": 1}, "etl.pkg.components.checkers.SchemaChecker.__init__": {"tf": 1}, "etl.pkg.components.checkers.SchemaChecker.schema_resolver": {"tf": 1}, "etl.pkg.components.checkers.SchemaChecker.pipe": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.__init__": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.fields_validator": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.policy": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}, "etl.pkg.components.historian": {"tf": 1}, "etl.pkg.components.historian.HistoryBuilder": {"tf": 1}, "etl.pkg.components.historian.HistoryBuilder.pipe": {"tf": 1}, "etl.pkg.components.identifiers": {"tf": 1}, "etl.pkg.components.identifiers.Identifier": {"tf": 1}, "etl.pkg.components.identifiers.Identifier.pipe": {"tf": 1}, "etl.pkg.components.interface": {"tf": 1}, "etl.pkg.components.interface.ResultWithReport": {"tf": 1}, "etl.pkg.components.interface.Executable": {"tf": 1}, "etl.pkg.components.interface.Executable.execute": {"tf": 1}, "etl.pkg.components.interface.Pipable": {"tf": 1}, "etl.pkg.components.interface.Pipable.pipe": {"tf": 1}, "etl.pkg.components.interface.NopPipe": {"tf": 1}, "etl.pkg.components.interface.NopPipe.pipe": {"tf": 1}, "etl.pkg.components.mappers": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper.pipe": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper.check_taxonomies": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.pipe": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.map_remainder": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.map_target_entities": {"tf": 1}, "etl.pkg.components.recycler": {"tf": 1}, "etl.pkg.components.recycler.output_recyclable_file": {"tf": 1}, "etl.pkg.components.transformers": {"tf": 1}, "etl.pkg.config": {"tf": 1}, "etl.pkg.config.DEFAULT_ENV_PREFIX": {"tf": 1}, "etl.pkg.config.DEFAULT_CONTEXT_ENV": {"tf": 1}, "etl.pkg.config.SUPPORTED_CONTEXTS": {"tf": 1}, "etl.pkg.config.DEFAULT_CONTEXT": {"tf": 1}, "etl.pkg.config.DEFAULTS_SETTINGS": {"tf": 1}, "etl.pkg.config.DEFAULT_SETTING_ROOT_PATH_ENV": {"tf": 1}, "etl.pkg.config.DEFAULT_SETTING_ROOT_PATH": {"tf": 1}, "etl.pkg.config.DEFAULT_SETTING_CONTEXT_FOLDER": {"tf": 1}, "etl.pkg.config.DEFAULT_SETTING_CONFIG_NAME": {"tf": 1}, "etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.config.Registry.context_var": {"tf": 1}, "etl.pkg.config.Registry.root_var": {"tf": 1}, "etl.pkg.config.Registry.env_prefix": {"tf": 1}, "etl.pkg.config.Registry.config_context_folder": {"tf": 1}, "etl.pkg.config.Registry.config_name": {"tf": 1}, "etl.pkg.config.Registry.context_folder": {"tf": 1}, "etl.pkg.config.Registry.defaults": {"tf": 1}, "etl.pkg.config.Registry.root": {"tf": 1}, "etl.pkg.config.Registry.context": {"tf": 1}, "etl.pkg.config.Registry.preload_defaults": {"tf": 1}, "etl.pkg.config.Registry.settings_files": {"tf": 1}, "etl.pkg.config.Registry.include_files": {"tf": 1}, "etl.pkg.config.Registry.secret_suffix": {"tf": 1}, "etl.pkg.config.Registry.config_ext": {"tf": 1}, "etl.pkg.config.Registry.load": {"tf": 1}, "etl.pkg.config.Registry.get": {"tf": 1}, "etl.pkg.config.Registry.dump": {"tf": 1}, "etl.pkg.database": {"tf": 1}, "etl.pkg.database.DBJob": {"tf": 1}, "etl.pkg.database.DBJob.execute": {"tf": 1}, "etl.pkg.dataframe": {"tf": 1}, "etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.__init__": {"tf": 1}, "etl.pkg.dataframe.DataFrame.axes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.columns": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iloc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.empty": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ndim": {"tf": 1}, "etl.pkg.dataframe.DataFrame.shape": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.get_dtype_counts": {"tf": 1}, "etl.pkg.dataframe.DataFrame.get_ftype_counts": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip_lower": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip_upper": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_orc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.map": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.info": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.DataFrame.from_dict": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.axes": {"tf": 1}, "etl.pkg.dataframe.Series.name": {"tf": 1}, "etl.pkg.dataframe.Series.ndim": {"tf": 1}, "etl.pkg.dataframe.Series.shape": {"tf": 1}, "etl.pkg.dataframe.Series.dtype": {"tf": 1}, "etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}, "etl.pkg.dataframe.Series.nbytes": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.quantile": {"tf": 1}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.unique": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.clip_lower": {"tf": 1}, "etl.pkg.dataframe.Series.clip_upper": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.to_bag": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}, "etl.pkg.exceptions": {"tf": 1}, "etl.pkg.exceptions.InvalidFileError": {"tf": 1}, "etl.pkg.exceptions.InvalidDataError": {"tf": 1}, "etl.pkg.exceptions.RuntimeEtlError": {"tf": 1}, "etl.pkg.exceptions.IOEtlError": {"tf": 1}, "etl.pkg.exceptions.DevMistakeError": {"tf": 1}, "etl.pkg.exceptions.ConfigError": {"tf": 1}, "etl.pkg.exceptions.FlagsError": {"tf": 1}, "etl.pkg.exceptions.UndeclaredFieldError": {"tf": 1}, "etl.pkg.flags": {"tf": 1}, "etl.pkg.flags.Namespace": {"tf": 1}, "etl.pkg.flags.Namespace.__init__": {"tf": 1}, "etl.pkg.flags.ArgumentParser": {"tf": 1}, "etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}, "etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1}, "etl.pkg.flags.iso_date": {"tf": 1}, "etl.pkg.io": {"tf": 1}, "etl.pkg.io.ISO_DATE_PREFIX": {"tf": 1}, "etl.pkg.io.BAD_FOLDER": {"tf": 1}, "etl.pkg.io.ARCHIVE_FOLDER": {"tf": 1}, "etl.pkg.io.RECYCLABLE_FOLDER": {"tf": 1}, "etl.pkg.io.REPORT_FOLDER": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 1}, "etl.pkg.io.FileResolver.__init__": {"tf": 1}, "etl.pkg.io.FileResolver.file_name": {"tf": 1}, "etl.pkg.io.FileResolver.start_date": {"tf": 1}, "etl.pkg.io.FileResolver.date_pattern": {"tf": 1}, "etl.pkg.io.FileResolver.name_prefix": {"tf": 1}, "etl.pkg.io.FileResolver.bad_path": {"tf": 1}, "etl.pkg.io.FileResolver.archive_path": {"tf": 1}, "etl.pkg.io.FileResolver.recyclable_path": {"tf": 1}, "etl.pkg.io.FileResolver.report_path": {"tf": 1}, "etl.pkg.io.FileResolver.get_file_name": {"tf": 1}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 1}, "etl.pkg.io.FileResolver.output_report": {"tf": 1}, "etl.pkg.io.FileResolver.output_recyclable": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_archive": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_bad": {"tf": 1}, "etl.pkg.io.file_resolver_context": {"tf": 1}, "etl.pkg.io.FileResolverIterator": {"tf": 1}, "etl.pkg.io.FileResolverIterator.__init__": {"tf": 1}, "etl.pkg.io.FileResolverIterator.dir_name": {"tf": 1}, "etl.pkg.io.FileResolverIterator.recurse": {"tf": 1}, "etl.pkg.io.FileResolverIterator.radix_pattern": {"tf": 1}, "etl.pkg.io.FileResolverIterator.input_files": {"tf": 1}, "etl.pkg.io.FileResolverIterator.start_date": {"tf": 1}, "etl.pkg.io.FileResolverIterator.date_pattern": {"tf": 1}, "etl.pkg.io.FileResolverIterator.name_prefix": {"tf": 1}, "etl.pkg.io.FileResolverIterator.bad_path": {"tf": 1}, "etl.pkg.io.FileResolverIterator.archive_path": {"tf": 1}, "etl.pkg.io.FileResolverIterator.recyclable_path": {"tf": 1}, "etl.pkg.io.FileResolverIterator.report_path": {"tf": 1}, "etl.pkg.policy": {"tf": 1}, "etl.pkg.policy.ActionOnIssue": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.FAIL": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.TO_RECYCLE_BIN": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.SKIP": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.IGNORE": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.CREATE": {"tf": 1}, "etl.pkg.policy.PolicyDict": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_is_not_identified": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_is_not_valid": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_taxonomy_is_not_mapped": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_is_not_identified": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_is_not_valid": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_taxonomy_is_not_mapped": {"tf": 1}, "etl.pkg.policy.Policy": {"tf": 1}, "etl.pkg.policy.Policy.__init__": {"tf": 1}, "etl.pkg.policy.Policy.dict": {"tf": 1}, "etl.pkg.policy.Policy.action_on_invalid_field": {"tf": 1}, "etl.pkg.policy.PolicyResolver": {"tf": 1}, "etl.pkg.policy.PolicyResolver.__init__": {"tf": 1}, "etl.pkg.policy.PolicyResolver.policy": {"tf": 1}, "etl.pkg.policy.PolicyResolver.tolerates_data_issues": {"tf": 1}, "etl.pkg.policy.strict": {"tf": 1}, "etl.pkg.policy.skip": {"tf": 1}, "etl.pkg.policy.from_config": {"tf": 1}, "etl.pkg.postgres": {"tf": 1}, "etl.pkg.resolvers": {"tf": 1}, "etl.pkg.resolvers.FieldResolver": {"tf": 1}, "etl.pkg.resolvers.FieldResolver.get_mnemonic": {"tf": 1}, "etl.pkg.resolvers.FieldResolver.get_id": {"tf": 1}, "etl.pkg.resolvers.IdentifierResolver": {"tf": 1}, "etl.pkg.resolvers.TaxonomyResolver": {"tf": 1}, "etl.pkg.resolvers.SchemaResolver": {"tf": 1}, "etl.pkg.runtime": {"tf": 1}, "etl.pkg.runtime.Runtime": {"tf": 1}, "etl.pkg.runtime.Runtime.__init__": {"tf": 1}, "etl.pkg.runtime.Runtime.resources": {"tf": 1}, "etl.pkg.runtime.Runtime.start": {"tf": 1}, "etl.pkg.runtime.Runtime.stop": {"tf": 1}, "etl.pkg.runtime.Runtime.get_config": {"tf": 1}, "etl.pkg.runtime.Runtime.get_logger": {"tf": 1}, "etl.pkg.runtime.Runtime.get_target_db_connection": {"tf": 1}, "etl.pkg.runtime.context": {"tf": 1}, "etl.pkg.validators": {"tf": 1}, "etl.pkg.validators.SeriesValidator": {"tf": 1}, "etl.pkg.validators.FieldsValidator": {"tf": 1}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1}, "etl.pkg.validators.regexp_validator": {"tf": 1}, "etl.pkg.validators.na_validator": {"tf": 1}, "etl.pkg.validators.minmax_validator": {"tf": 1}, "etl.pkg.validators.date_validator": {"tf": 1}, "etl.pkg.workflows": {"tf": 1}, "etl.pkg.workflows.Base": {"tf": 1}, "etl.pkg.workflows.Base.__init__": {"tf": 1}, "etl.pkg.workflows.Base.runtime": {"tf": 1}, "etl.pkg.workflows.Base.start_date": {"tf": 1}, "etl.pkg.workflows.Base.end_date": {"tf": 1}, "etl.pkg.workflows.Base.identifier_resolver": {"tf": 1}, "etl.pkg.workflows.Base.taxonomy_resolver": {"tf": 1}, "etl.pkg.workflows.Base.schema_resolver": {"tf": 1}, "etl.pkg.workflows.Base.fields_validator": {"tf": 1}, "etl.pkg.workflows.Base.policy_resolver": {"tf": 1}, "etl.pkg.workflows.Base.execute": {"tf": 1}, "etl.pkg.workflows.Generic": {"tf": 1}, "etl.pkg.workflows.Generic.__init__": {"tf": 1}, "etl.pkg.workflows.Generic.read_csv": {"tf": 1}, "etl.pkg.workflows.Generic.execute": {"tf": 1}, "etl.pkg.workflows.Generic.did_produce_recyclable": {"tf": 1}, "etl.sample_generic_etl": {"tf": 1.4142135623730951}, "etl.sample_generic_etl.FIELDS_WITH_EXTERNAL_IDENTIFIERS": {"tf": 1.4142135623730951}, "etl.sample_generic_etl.FIELDS_WITH_TAXONOMIES": {"tf": 1.4142135623730951}, "etl.sample_generic_etl.FIELDS_WITH_VALIDATION": {"tf": 1.4142135623730951}, "etl.sample_generic_etl.CSV_SCHEMA": {"tf": 1.4142135623730951}, "etl.sample_generic_etl.execute": {"tf": 1.4142135623730951}, "etl.sample_generic_etl.main": {"tf": 1.4142135623730951}, "etl.tests": {"tf": 1}, "etl.tests.flags_test": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.parser": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_happy_path": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_happy_with_files": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_args": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_start_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_valid_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_valid_standalone_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_no_input": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_not_existing": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_is_a_dir": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_existing": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_folder": {"tf": 1}, "etl.tests.io_test": {"tf": 1}, "etl.tests.io_test.TestFileResolver": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_archive": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_bad": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_report": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_recyclable": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_override_start_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_guard_constructor": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_no_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_invalid_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_many_dates": {"tf": 1}, "etl.tests.io_test.TestFileResolverIterator": {"tf": 1}, "etl.tests.io_test.TestFileResolverIterator.test_iterator_from_dir": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_success": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_failure": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_other_failure": {"tf": 1}, "etl.tests.utils_test": {"tf": 1}, "etl.tests.utils_test.FIXTURE_PREFIX": {"tf": 1}, "etl.tests.utils_test.TEST_DATE": {"tf": 1}, "etl.tests.utils_test.create_test_file": {"tf": 1}}, "df": 382}}, "x": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.interface.Executable": {"tf": 1}, "etl.pkg.components.interface.Executable.execute": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {"etl.pkg.components.interface.Executable.execute": {"tf": 1}, "etl.pkg.database.DBJob.execute": {"tf": 1}, "etl.pkg.workflows.Base.execute": {"tf": 1}, "etl.pkg.workflows.Generic.execute": {"tf": 1}, "etl.sample_generic_etl.execute": {"tf": 1}}, "df": 5}}}}}, "t": {"docs": {"etl.pkg.config.Registry.config_ext": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"etl.sample_generic_etl.FIELDS_WITH_EXTERNAL_IDENTIFIERS": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.tests.io_test.TestFileResolver.test_date_extraction_no_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_invalid_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_many_dates": {"tf": 1}}, "df": 3}}}}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}}, "df": 2}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.exceptions": {"tf": 1}, "etl.pkg.exceptions.InvalidFileError": {"tf": 1}, "etl.pkg.exceptions.InvalidDataError": {"tf": 1}, "etl.pkg.exceptions.RuntimeEtlError": {"tf": 1}, "etl.pkg.exceptions.IOEtlError": {"tf": 1}, "etl.pkg.exceptions.DevMistakeError": {"tf": 1}, "etl.pkg.exceptions.ConfigError": {"tf": 1}, "etl.pkg.exceptions.FlagsError": {"tf": 1}, "etl.pkg.exceptions.UndeclaredFieldError": {"tf": 1}}, "df": 9}}}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.tests.flags_test.TestArgumentParser.test_invalid_file_not_existing": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_existing": {"tf": 1}}, "df": 2}}}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.components.mappers.EntityMapper": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.pipe": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.map_remainder": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.map_target_entities": {"tf": 1}}, "df": 4}}}}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.components.mappers.EntityMapper.map_target_entities": {"tf": 1}}, "df": 1}}}}}}, "v": {"docs": {"etl.pkg.config.DEFAULT_ENV_PREFIX": {"tf": 1}, "etl.pkg.config.DEFAULT_CONTEXT_ENV": {"tf": 1}, "etl.pkg.config.DEFAULT_SETTING_ROOT_PATH_ENV": {"tf": 1}, "etl.pkg.config.Registry.env_prefix": {"tf": 1}}, "df": 4}, "d": {"docs": {"etl.pkg.workflows.Base.end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_valid_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_valid_standalone_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_end_date": {"tf": 1}}, "df": 4}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.empty": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.eval": {"tf": 1}}, "df": 1}}}, "q": {"docs": {"etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 2}}, "p": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg": {"tf": 1}, "etl.pkg.components": {"tf": 1}, "etl.pkg.components.checkers": {"tf": 1}, "etl.pkg.components.checkers.SchemaChecker": {"tf": 1}, "etl.pkg.components.checkers.SchemaChecker.__init__": {"tf": 1}, "etl.pkg.components.checkers.SchemaChecker.schema_resolver": {"tf": 1}, "etl.pkg.components.checkers.SchemaChecker.pipe": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.__init__": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.fields_validator": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.policy": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}, "etl.pkg.components.historian": {"tf": 1}, "etl.pkg.components.historian.HistoryBuilder": {"tf": 1}, "etl.pkg.components.historian.HistoryBuilder.pipe": {"tf": 1}, "etl.pkg.components.identifiers": {"tf": 1}, "etl.pkg.components.identifiers.Identifier": {"tf": 1}, "etl.pkg.components.identifiers.Identifier.pipe": {"tf": 1}, "etl.pkg.components.interface": {"tf": 1}, "etl.pkg.components.interface.ResultWithReport": {"tf": 1}, "etl.pkg.components.interface.Executable": {"tf": 1}, "etl.pkg.components.interface.Executable.execute": {"tf": 1}, "etl.pkg.components.interface.Pipable": {"tf": 1}, "etl.pkg.components.interface.Pipable.pipe": {"tf": 1}, "etl.pkg.components.interface.NopPipe": {"tf": 1}, "etl.pkg.components.interface.NopPipe.pipe": {"tf": 1}, "etl.pkg.components.mappers": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper.pipe": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper.check_taxonomies": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.pipe": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.map_remainder": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.map_target_entities": {"tf": 1}, "etl.pkg.components.recycler": {"tf": 1}, "etl.pkg.components.recycler.output_recyclable_file": {"tf": 1}, "etl.pkg.components.transformers": {"tf": 1}, "etl.pkg.config": {"tf": 1}, "etl.pkg.config.DEFAULT_ENV_PREFIX": {"tf": 1}, "etl.pkg.config.DEFAULT_CONTEXT_ENV": {"tf": 1}, "etl.pkg.config.SUPPORTED_CONTEXTS": {"tf": 1}, "etl.pkg.config.DEFAULT_CONTEXT": {"tf": 1}, "etl.pkg.config.DEFAULTS_SETTINGS": {"tf": 1}, "etl.pkg.config.DEFAULT_SETTING_ROOT_PATH_ENV": {"tf": 1}, "etl.pkg.config.DEFAULT_SETTING_ROOT_PATH": {"tf": 1}, "etl.pkg.config.DEFAULT_SETTING_CONTEXT_FOLDER": {"tf": 1}, "etl.pkg.config.DEFAULT_SETTING_CONFIG_NAME": {"tf": 1}, "etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.config.Registry.context_var": {"tf": 1}, "etl.pkg.config.Registry.root_var": {"tf": 1}, "etl.pkg.config.Registry.env_prefix": {"tf": 1}, "etl.pkg.config.Registry.config_context_folder": {"tf": 1}, "etl.pkg.config.Registry.config_name": {"tf": 1}, "etl.pkg.config.Registry.context_folder": {"tf": 1}, "etl.pkg.config.Registry.defaults": {"tf": 1}, "etl.pkg.config.Registry.root": {"tf": 1}, "etl.pkg.config.Registry.context": {"tf": 1}, "etl.pkg.config.Registry.preload_defaults": {"tf": 1}, "etl.pkg.config.Registry.settings_files": {"tf": 1}, "etl.pkg.config.Registry.include_files": {"tf": 1}, "etl.pkg.config.Registry.secret_suffix": {"tf": 1}, "etl.pkg.config.Registry.config_ext": {"tf": 1}, "etl.pkg.config.Registry.load": {"tf": 1}, "etl.pkg.config.Registry.get": {"tf": 1}, "etl.pkg.config.Registry.dump": {"tf": 1}, "etl.pkg.database": {"tf": 1}, "etl.pkg.database.DBJob": {"tf": 1}, "etl.pkg.database.DBJob.execute": {"tf": 1}, "etl.pkg.dataframe": {"tf": 1}, "etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.__init__": {"tf": 1}, "etl.pkg.dataframe.DataFrame.axes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.columns": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iloc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.empty": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ndim": {"tf": 1}, "etl.pkg.dataframe.DataFrame.shape": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.get_dtype_counts": {"tf": 1}, "etl.pkg.dataframe.DataFrame.get_ftype_counts": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip_lower": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip_upper": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_orc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.map": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.info": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.DataFrame.from_dict": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.axes": {"tf": 1}, "etl.pkg.dataframe.Series.name": {"tf": 1}, "etl.pkg.dataframe.Series.ndim": {"tf": 1}, "etl.pkg.dataframe.Series.shape": {"tf": 1}, "etl.pkg.dataframe.Series.dtype": {"tf": 1}, "etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}, "etl.pkg.dataframe.Series.nbytes": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.quantile": {"tf": 1}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.unique": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.clip_lower": {"tf": 1}, "etl.pkg.dataframe.Series.clip_upper": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.to_bag": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}, "etl.pkg.exceptions": {"tf": 1}, "etl.pkg.exceptions.InvalidFileError": {"tf": 1}, "etl.pkg.exceptions.InvalidDataError": {"tf": 1}, "etl.pkg.exceptions.RuntimeEtlError": {"tf": 1}, "etl.pkg.exceptions.IOEtlError": {"tf": 1}, "etl.pkg.exceptions.DevMistakeError": {"tf": 1}, "etl.pkg.exceptions.ConfigError": {"tf": 1}, "etl.pkg.exceptions.FlagsError": {"tf": 1}, "etl.pkg.exceptions.UndeclaredFieldError": {"tf": 1}, "etl.pkg.flags": {"tf": 1}, "etl.pkg.flags.Namespace": {"tf": 1}, "etl.pkg.flags.Namespace.__init__": {"tf": 1}, "etl.pkg.flags.ArgumentParser": {"tf": 1}, "etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}, "etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1}, "etl.pkg.flags.iso_date": {"tf": 1}, "etl.pkg.io": {"tf": 1}, "etl.pkg.io.ISO_DATE_PREFIX": {"tf": 1}, "etl.pkg.io.BAD_FOLDER": {"tf": 1}, "etl.pkg.io.ARCHIVE_FOLDER": {"tf": 1}, "etl.pkg.io.RECYCLABLE_FOLDER": {"tf": 1}, "etl.pkg.io.REPORT_FOLDER": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 1}, "etl.pkg.io.FileResolver.__init__": {"tf": 1}, "etl.pkg.io.FileResolver.file_name": {"tf": 1}, "etl.pkg.io.FileResolver.start_date": {"tf": 1}, "etl.pkg.io.FileResolver.date_pattern": {"tf": 1}, "etl.pkg.io.FileResolver.name_prefix": {"tf": 1}, "etl.pkg.io.FileResolver.bad_path": {"tf": 1}, "etl.pkg.io.FileResolver.archive_path": {"tf": 1}, "etl.pkg.io.FileResolver.recyclable_path": {"tf": 1}, "etl.pkg.io.FileResolver.report_path": {"tf": 1}, "etl.pkg.io.FileResolver.get_file_name": {"tf": 1}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 1}, "etl.pkg.io.FileResolver.output_report": {"tf": 1}, "etl.pkg.io.FileResolver.output_recyclable": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_archive": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_bad": {"tf": 1}, "etl.pkg.io.file_resolver_context": {"tf": 1}, "etl.pkg.io.FileResolverIterator": {"tf": 1}, "etl.pkg.io.FileResolverIterator.__init__": {"tf": 1}, "etl.pkg.io.FileResolverIterator.dir_name": {"tf": 1}, "etl.pkg.io.FileResolverIterator.recurse": {"tf": 1}, "etl.pkg.io.FileResolverIterator.radix_pattern": {"tf": 1}, "etl.pkg.io.FileResolverIterator.input_files": {"tf": 1}, "etl.pkg.io.FileResolverIterator.start_date": {"tf": 1}, "etl.pkg.io.FileResolverIterator.date_pattern": {"tf": 1}, "etl.pkg.io.FileResolverIterator.name_prefix": {"tf": 1}, "etl.pkg.io.FileResolverIterator.bad_path": {"tf": 1}, "etl.pkg.io.FileResolverIterator.archive_path": {"tf": 1}, "etl.pkg.io.FileResolverIterator.recyclable_path": {"tf": 1}, "etl.pkg.io.FileResolverIterator.report_path": {"tf": 1}, "etl.pkg.policy": {"tf": 1}, "etl.pkg.policy.ActionOnIssue": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.FAIL": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.TO_RECYCLE_BIN": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.SKIP": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.IGNORE": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.CREATE": {"tf": 1}, "etl.pkg.policy.PolicyDict": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_is_not_identified": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_is_not_valid": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_taxonomy_is_not_mapped": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_is_not_identified": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_is_not_valid": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_taxonomy_is_not_mapped": {"tf": 1}, "etl.pkg.policy.Policy": {"tf": 1}, "etl.pkg.policy.Policy.__init__": {"tf": 1}, "etl.pkg.policy.Policy.dict": {"tf": 1}, "etl.pkg.policy.Policy.action_on_invalid_field": {"tf": 1}, "etl.pkg.policy.PolicyResolver": {"tf": 1}, "etl.pkg.policy.PolicyResolver.__init__": {"tf": 1}, "etl.pkg.policy.PolicyResolver.policy": {"tf": 1}, "etl.pkg.policy.PolicyResolver.tolerates_data_issues": {"tf": 1}, "etl.pkg.policy.strict": {"tf": 1}, "etl.pkg.policy.skip": {"tf": 1}, "etl.pkg.policy.from_config": {"tf": 1}, "etl.pkg.postgres": {"tf": 1}, "etl.pkg.resolvers": {"tf": 1}, "etl.pkg.resolvers.FieldResolver": {"tf": 1}, "etl.pkg.resolvers.FieldResolver.get_mnemonic": {"tf": 1}, "etl.pkg.resolvers.FieldResolver.get_id": {"tf": 1}, "etl.pkg.resolvers.IdentifierResolver": {"tf": 1}, "etl.pkg.resolvers.TaxonomyResolver": {"tf": 1}, "etl.pkg.resolvers.SchemaResolver": {"tf": 1}, "etl.pkg.runtime": {"tf": 1}, "etl.pkg.runtime.Runtime": {"tf": 1}, "etl.pkg.runtime.Runtime.__init__": {"tf": 1}, "etl.pkg.runtime.Runtime.resources": {"tf": 1}, "etl.pkg.runtime.Runtime.start": {"tf": 1}, "etl.pkg.runtime.Runtime.stop": {"tf": 1}, "etl.pkg.runtime.Runtime.get_config": {"tf": 1}, "etl.pkg.runtime.Runtime.get_logger": {"tf": 1}, "etl.pkg.runtime.Runtime.get_target_db_connection": {"tf": 1}, "etl.pkg.runtime.context": {"tf": 1}, "etl.pkg.validators": {"tf": 1}, "etl.pkg.validators.SeriesValidator": {"tf": 1}, "etl.pkg.validators.FieldsValidator": {"tf": 1}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1}, "etl.pkg.validators.regexp_validator": {"tf": 1}, "etl.pkg.validators.na_validator": {"tf": 1}, "etl.pkg.validators.minmax_validator": {"tf": 1}, "etl.pkg.validators.date_validator": {"tf": 1}, "etl.pkg.workflows": {"tf": 1}, "etl.pkg.workflows.Base": {"tf": 1}, "etl.pkg.workflows.Base.__init__": {"tf": 1}, "etl.pkg.workflows.Base.runtime": {"tf": 1}, "etl.pkg.workflows.Base.start_date": {"tf": 1}, "etl.pkg.workflows.Base.end_date": {"tf": 1}, "etl.pkg.workflows.Base.identifier_resolver": {"tf": 1}, "etl.pkg.workflows.Base.taxonomy_resolver": {"tf": 1}, "etl.pkg.workflows.Base.schema_resolver": {"tf": 1}, "etl.pkg.workflows.Base.fields_validator": {"tf": 1}, "etl.pkg.workflows.Base.policy_resolver": {"tf": 1}, "etl.pkg.workflows.Base.execute": {"tf": 1}, "etl.pkg.workflows.Generic": {"tf": 1}, "etl.pkg.workflows.Generic.__init__": {"tf": 1}, "etl.pkg.workflows.Generic.read_csv": {"tf": 1}, "etl.pkg.workflows.Generic.execute": {"tf": 1}, "etl.pkg.workflows.Generic.did_produce_recyclable": {"tf": 1}}, "df": 337}}, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.checkers.SchemaChecker.pipe": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}, "etl.pkg.components.historian.HistoryBuilder.pipe": {"tf": 1}, "etl.pkg.components.identifiers.Identifier.pipe": {"tf": 1}, "etl.pkg.components.interface.Pipable.pipe": {"tf": 1}, "etl.pkg.components.interface.NopPipe.pipe": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper.pipe": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.pipe": {"tf": 1}}, "df": 8}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.interface.Pipable": {"tf": 1}, "etl.pkg.components.interface.Pipable.pipe": {"tf": 1}}, "df": 2}}}}}, "v": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.components.checkers.ContentChecker.policy": {"tf": 1}, "etl.pkg.policy": {"tf": 1}, "etl.pkg.policy.ActionOnIssue": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.FAIL": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.TO_RECYCLE_BIN": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.SKIP": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.IGNORE": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.CREATE": {"tf": 1}, "etl.pkg.policy.PolicyDict": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_is_not_identified": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_is_not_valid": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_taxonomy_is_not_mapped": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_is_not_identified": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_is_not_valid": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_taxonomy_is_not_mapped": {"tf": 1}, "etl.pkg.policy.Policy": {"tf": 1.4142135623730951}, "etl.pkg.policy.Policy.__init__": {"tf": 1.4142135623730951}, "etl.pkg.policy.Policy.dict": {"tf": 1.4142135623730951}, "etl.pkg.policy.Policy.action_on_invalid_field": {"tf": 1.4142135623730951}, "etl.pkg.policy.PolicyResolver": {"tf": 1}, "etl.pkg.policy.PolicyResolver.__init__": {"tf": 1}, "etl.pkg.policy.PolicyResolver.policy": {"tf": 1.4142135623730951}, "etl.pkg.policy.PolicyResolver.tolerates_data_issues": {"tf": 1}, "etl.pkg.policy.strict": {"tf": 1}, "etl.pkg.policy.skip": {"tf": 1}, "etl.pkg.policy.from_config": {"tf": 1}, "etl.pkg.workflows.Base.policy_resolver": {"tf": 1}}, "df": 27, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.policy.PolicyDict": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_is_not_identified": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_is_not_valid": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_taxonomy_is_not_mapped": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_is_not_identified": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_is_not_valid": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_taxonomy_is_not_mapped": {"tf": 1}}, "df": 7}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.policy.PolicyResolver": {"tf": 1}, "etl.pkg.policy.PolicyResolver.__init__": {"tf": 1}, "etl.pkg.policy.PolicyResolver.policy": {"tf": 1}, "etl.pkg.policy.PolicyResolver.tolerates_data_issues": {"tf": 1}}, "df": 4}}}}}}}}}}}}, "p": {"docs": {"etl.pkg.dataframe.DataFrame.pop": {"tf": 1}}, "df": 1}, "w": {"docs": {"etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}}, "df": 2}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.postgres": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"etl.pkg.config.DEFAULT_ENV_PREFIX": {"tf": 1}, "etl.pkg.config.Registry.env_prefix": {"tf": 1}, "etl.pkg.io.ISO_DATE_PREFIX": {"tf": 1}, "etl.pkg.io.FileResolver.name_prefix": {"tf": 1}, "etl.pkg.io.FileResolverIterator.name_prefix": {"tf": 1}, "etl.tests.utils_test.FIXTURE_PREFIX": {"tf": 1}}, "df": 6}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.config.Registry.preload_defaults": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.workflows.Generic.did_produce_recyclable": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"etl.pkg.config.DEFAULT_SETTING_ROOT_PATH_ENV": {"tf": 1}, "etl.pkg.config.DEFAULT_SETTING_ROOT_PATH": {"tf": 1}, "etl.pkg.io.FileResolver.bad_path": {"tf": 1}, "etl.pkg.io.FileResolver.archive_path": {"tf": 1}, "etl.pkg.io.FileResolver.recyclable_path": {"tf": 1}, "etl.pkg.io.FileResolver.report_path": {"tf": 1}, "etl.pkg.io.FileResolverIterator.bad_path": {"tf": 1}, "etl.pkg.io.FileResolverIterator.archive_path": {"tf": 1}, "etl.pkg.io.FileResolverIterator.recyclable_path": {"tf": 1}, "etl.pkg.io.FileResolverIterator.report_path": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_happy_path": {"tf": 1}}, "df": 11}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.io.FileResolver.date_pattern": {"tf": 1}, "etl.pkg.io.FileResolverIterator.radix_pattern": {"tf": 1}, "etl.pkg.io.FileResolverIterator.date_pattern": {"tf": 1}}, "df": 3}}}}}, "r": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1}}, "df": 1, "r": {"docs": {"etl.tests.flags_test.TestArgumentParser.parser": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.components": {"tf": 1}, "etl.pkg.components.checkers": {"tf": 1}, "etl.pkg.components.checkers.SchemaChecker": {"tf": 1}, "etl.pkg.components.checkers.SchemaChecker.__init__": {"tf": 1}, "etl.pkg.components.checkers.SchemaChecker.schema_resolver": {"tf": 1}, "etl.pkg.components.checkers.SchemaChecker.pipe": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.__init__": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.fields_validator": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.policy": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}, "etl.pkg.components.historian": {"tf": 1}, "etl.pkg.components.historian.HistoryBuilder": {"tf": 1}, "etl.pkg.components.historian.HistoryBuilder.pipe": {"tf": 1}, "etl.pkg.components.identifiers": {"tf": 1}, "etl.pkg.components.identifiers.Identifier": {"tf": 1}, "etl.pkg.components.identifiers.Identifier.pipe": {"tf": 1}, "etl.pkg.components.interface": {"tf": 1}, "etl.pkg.components.interface.ResultWithReport": {"tf": 1}, "etl.pkg.components.interface.Executable": {"tf": 1}, "etl.pkg.components.interface.Executable.execute": {"tf": 1}, "etl.pkg.components.interface.Pipable": {"tf": 1}, "etl.pkg.components.interface.Pipable.pipe": {"tf": 1}, "etl.pkg.components.interface.NopPipe": {"tf": 1}, "etl.pkg.components.interface.NopPipe.pipe": {"tf": 1}, "etl.pkg.components.mappers": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper.pipe": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper.check_taxonomies": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.pipe": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.map_remainder": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.map_target_entities": {"tf": 1}, "etl.pkg.components.recycler": {"tf": 1}, "etl.pkg.components.recycler.output_recyclable_file": {"tf": 1}, "etl.pkg.components.transformers": {"tf": 1}}, "df": 36}}}}}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}}, "df": 2}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.components.checkers.ContentChecker": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.__init__": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.fields_validator": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.policy": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}}, "df": 5}}}}}}}}}, "x": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.config.DEFAULT_CONTEXT_ENV": {"tf": 1}, "etl.pkg.config.DEFAULT_CONTEXT": {"tf": 1}, "etl.pkg.config.DEFAULT_SETTING_CONTEXT_FOLDER": {"tf": 1}, "etl.pkg.config.Registry.context_var": {"tf": 1}, "etl.pkg.config.Registry.config_context_folder": {"tf": 1}, "etl.pkg.config.Registry.context_folder": {"tf": 1}, "etl.pkg.config.Registry.context": {"tf": 1}, "etl.pkg.io.file_resolver_context": {"tf": 1}, "etl.pkg.runtime.context": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_success": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_failure": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_other_failure": {"tf": 1}}, "df": 12, "s": {"docs": {"etl.pkg.config.SUPPORTED_CONTEXTS": {"tf": 1}}, "df": 1}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.config": {"tf": 1}, "etl.pkg.config.DEFAULT_ENV_PREFIX": {"tf": 1}, "etl.pkg.config.DEFAULT_CONTEXT_ENV": {"tf": 1}, "etl.pkg.config.SUPPORTED_CONTEXTS": {"tf": 1}, "etl.pkg.config.DEFAULT_CONTEXT": {"tf": 1}, "etl.pkg.config.DEFAULTS_SETTINGS": {"tf": 1}, "etl.pkg.config.DEFAULT_SETTING_ROOT_PATH_ENV": {"tf": 1}, "etl.pkg.config.DEFAULT_SETTING_ROOT_PATH": {"tf": 1}, "etl.pkg.config.DEFAULT_SETTING_CONTEXT_FOLDER": {"tf": 1}, "etl.pkg.config.DEFAULT_SETTING_CONFIG_NAME": {"tf": 1.4142135623730951}, "etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.config.Registry.context_var": {"tf": 1}, "etl.pkg.config.Registry.root_var": {"tf": 1}, "etl.pkg.config.Registry.env_prefix": {"tf": 1}, "etl.pkg.config.Registry.config_context_folder": {"tf": 1.4142135623730951}, "etl.pkg.config.Registry.config_name": {"tf": 1.4142135623730951}, "etl.pkg.config.Registry.context_folder": {"tf": 1}, "etl.pkg.config.Registry.defaults": {"tf": 1}, "etl.pkg.config.Registry.root": {"tf": 1}, "etl.pkg.config.Registry.context": {"tf": 1}, "etl.pkg.config.Registry.preload_defaults": {"tf": 1}, "etl.pkg.config.Registry.settings_files": {"tf": 1}, "etl.pkg.config.Registry.include_files": {"tf": 1}, "etl.pkg.config.Registry.secret_suffix": {"tf": 1}, "etl.pkg.config.Registry.config_ext": {"tf": 1.4142135623730951}, "etl.pkg.config.Registry.load": {"tf": 1}, "etl.pkg.config.Registry.get": {"tf": 1}, "etl.pkg.config.Registry.dump": {"tf": 1}, "etl.pkg.policy.from_config": {"tf": 1}, "etl.pkg.runtime.Runtime.get_config": {"tf": 1}}, "df": 30, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.exceptions.ConfigError": {"tf": 1}}, "df": 1}}}}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.runtime.Runtime.get_target_db_connection": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.tests.io_test.TestFileResolver.test_guard_constructor": {"tf": null}}, "df": 1}}}}}}}}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.columns": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.Series.count": {"tf": 1}}, "df": 1, "s": {"docs": {"etl.pkg.dataframe.DataFrame.get_dtype_counts": {"tf": 1}, "etl.pkg.dataframe.DataFrame.get_ftype_counts": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}}, "df": 3}}}}, "v": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}}, "df": 2}, "r": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}}, "df": 2}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"etl.pkg.components.mappers.TaxonomyMapper.check_taxonomies": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.components.checkers": {"tf": 1}, "etl.pkg.components.checkers.SchemaChecker": {"tf": 1}, "etl.pkg.components.checkers.SchemaChecker.__init__": {"tf": 1}, "etl.pkg.components.checkers.SchemaChecker.schema_resolver": {"tf": 1}, "etl.pkg.components.checkers.SchemaChecker.pipe": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.__init__": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.fields_validator": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.policy": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}}, "df": 10}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.Series.cat": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}}, "df": 1}}}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip_lower": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip_upper": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.clip_lower": {"tf": 1}, "etl.pkg.dataframe.Series.clip_upper": {"tf": 1}}, "df": 6}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.policy.ActionOnIssue.CREATE": {"tf": 1}, "etl.tests.utils_test.create_test_file": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "v": {"docs": {"etl.pkg.workflows.Generic.read_csv": {"tf": 1}, "etl.sample_generic_etl.CSV_SCHEMA": {"tf": 1}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {"etl.pkg.components.checkers.SchemaChecker.schema_resolver": {"tf": 1}, "etl.pkg.workflows.Base.schema_resolver": {"tf": 1}, "etl.sample_generic_etl.CSV_SCHEMA": {"tf": 1}}, "df": 3, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.components.checkers.SchemaChecker": {"tf": 1}, "etl.pkg.components.checkers.SchemaChecker.__init__": {"tf": 1}, "etl.pkg.components.checkers.SchemaChecker.schema_resolver": {"tf": 1}, "etl.pkg.components.checkers.SchemaChecker.pipe": {"tf": 1}}, "df": 4}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.resolvers.SchemaResolver": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.config.SUPPORTED_CONTEXTS": {"tf": 1}}, "df": 1}}}}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"etl.pkg.config.Registry.secret_suffix": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {"etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}}, "df": 2}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_success": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 1}}, "df": 2, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.config.DEFAULT_SETTING_ROOT_PATH_ENV": {"tf": 1}, "etl.pkg.config.DEFAULT_SETTING_ROOT_PATH": {"tf": 1}, "etl.pkg.config.DEFAULT_SETTING_CONTEXT_FOLDER": {"tf": 1}, "etl.pkg.config.DEFAULT_SETTING_CONFIG_NAME": {"tf": 1}}, "df": 4, "s": {"docs": {"etl.pkg.config.DEFAULTS_SETTINGS": {"tf": 1}, "etl.pkg.config.Registry.settings_files": {"tf": 1}}, "df": 2}}}}}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.config.Registry.secret_suffix": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.axes": {"tf": 1}, "etl.pkg.dataframe.Series.name": {"tf": 1}, "etl.pkg.dataframe.Series.ndim": {"tf": 1}, "etl.pkg.dataframe.Series.shape": {"tf": 1}, "etl.pkg.dataframe.Series.dtype": {"tf": 1}, "etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}, "etl.pkg.dataframe.Series.nbytes": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.quantile": {"tf": 1}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.unique": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.clip_lower": {"tf": 1}, "etl.pkg.dataframe.Series.clip_upper": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.to_bag": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 70, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.validators.SeriesValidator": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.shape": {"tf": 1}, "etl.pkg.dataframe.Series.shape": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}}, "df": 1}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}}, "df": 2}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.Series.str": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}}, "df": 2}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.policy.strict": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.io.FileResolver.start_date": {"tf": 1}, "etl.pkg.io.FileResolverIterator.start_date": {"tf": 1}, "etl.pkg.runtime.Runtime.start": {"tf": 1}, "etl.pkg.workflows.Base.start_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_start_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_override_start_date": {"tf": 1}}, "df": 6}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"etl.tests.flags_test.TestArgumentParser.test_valid_standalone_end_date": {"tf": 1}}, "df": 1}}}}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.runtime.Runtime.stop": {"tf": 1}}, "df": 1}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.policy.ActionOnIssue.SKIP": {"tf": 1}, "etl.pkg.policy.skip": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.sample_generic_etl": {"tf": 1}, "etl.sample_generic_etl.FIELDS_WITH_EXTERNAL_IDENTIFIERS": {"tf": 1}, "etl.sample_generic_etl.FIELDS_WITH_TAXONOMIES": {"tf": 1}, "etl.sample_generic_etl.FIELDS_WITH_VALIDATION": {"tf": 1}, "etl.sample_generic_etl.CSV_SCHEMA": {"tf": 1}, "etl.sample_generic_etl.execute": {"tf": 1}, "etl.sample_generic_etl.main": {"tf": 1}}, "df": 7}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.components.checkers.SchemaChecker.__init__": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.__init__": {"tf": 1}, "etl.pkg.dataframe.DataFrame.__init__": {"tf": 1}, "etl.pkg.flags.Namespace.__init__": {"tf": 1}, "etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}, "etl.pkg.io.FileResolver.__init__": {"tf": 1}, "etl.pkg.io.FileResolverIterator.__init__": {"tf": 1}, "etl.pkg.policy.Policy.__init__": {"tf": 1}, "etl.pkg.policy.PolicyResolver.__init__": {"tf": 1}, "etl.pkg.runtime.Runtime.__init__": {"tf": 1}, "etl.pkg.workflows.Base.__init__": {"tf": 1}, "etl.pkg.workflows.Generic.__init__": {"tf": 1}}, "df": 12}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.interface": {"tf": 1}, "etl.pkg.components.interface.ResultWithReport": {"tf": 1}, "etl.pkg.components.interface.Executable": {"tf": 1}, "etl.pkg.components.interface.Executable.execute": {"tf": 1}, "etl.pkg.components.interface.Pipable": {"tf": 1}, "etl.pkg.components.interface.Pipable.pipe": {"tf": 1}, "etl.pkg.components.interface.NopPipe": {"tf": 1}, "etl.pkg.components.interface.NopPipe.pipe": {"tf": 1}}, "df": 8}}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.config.Registry.include_files": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1}}, "df": 1}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {"etl.pkg.dataframe.DataFrame.info": {"tf": 1}}, "df": 1}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.policy.Policy.action_on_invalid_field": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_args": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_start_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_no_input": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_not_existing": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_is_a_dir": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_existing": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_folder": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_invalid_date": {"tf": 1}}, "df": 10, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.exceptions.InvalidFileError": {"tf": 1}}, "df": 1}}}}}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.exceptions.InvalidDataError": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.io.FileResolverIterator.input_files": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_no_input": {"tf": 1}}, "df": 2}}}}, "d": {"docs": {"etl.pkg.resolvers.FieldResolver.get_id": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.components.identifiers.Identifier": {"tf": 1}, "etl.pkg.components.identifiers.Identifier.pipe": {"tf": 1}, "etl.pkg.workflows.Base.identifier_resolver": {"tf": 1}}, "df": 3, "s": {"docs": {"etl.pkg.components.identifiers": {"tf": 1}, "etl.pkg.components.identifiers.Identifier": {"tf": 1}, "etl.pkg.components.identifiers.Identifier.pipe": {"tf": 1}, "etl.sample_generic_etl.FIELDS_WITH_EXTERNAL_IDENTIFIERS": {"tf": 1}}, "df": 4}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.resolvers.IdentifierResolver": {"tf": 1}}, "df": 1}}}}}}}}}, "d": {"docs": {"etl.pkg.policy.PolicyDict.when_any_is_not_identified": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_is_not_identified": {"tf": 1}}, "df": 2}}}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {"etl.pkg.dataframe.DataFrame.iloc": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.tests.io_test.TestFileResolverIterator.test_iterator_from_dir": {"tf": 1}}, "df": 1}}}}}, "m": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.items": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {"etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_is_not_identified": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_is_not_valid": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_taxonomy_is_not_mapped": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_is_not_identified": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_is_not_valid": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_taxonomy_is_not_mapped": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_is_a_dir": {"tf": 1}}, "df": 9, "i": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.Series.isin": {"tf": 1}}, "df": 1}}, "o": {"docs": {"etl.pkg.flags.iso_date": {"tf": 1}, "etl.pkg.io.ISO_DATE_PREFIX": {"tf": 1}}, "df": 2}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.policy.PolicyResolver.tolerates_data_issues": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {"etl.pkg.io": {"tf": 1}, "etl.pkg.io.ISO_DATE_PREFIX": {"tf": 1}, "etl.pkg.io.BAD_FOLDER": {"tf": 1}, "etl.pkg.io.ARCHIVE_FOLDER": {"tf": 1}, "etl.pkg.io.RECYCLABLE_FOLDER": {"tf": 1}, "etl.pkg.io.REPORT_FOLDER": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 1}, "etl.pkg.io.FileResolver.__init__": {"tf": 1}, "etl.pkg.io.FileResolver.file_name": {"tf": 1}, "etl.pkg.io.FileResolver.start_date": {"tf": 1}, "etl.pkg.io.FileResolver.date_pattern": {"tf": 1}, "etl.pkg.io.FileResolver.name_prefix": {"tf": 1}, "etl.pkg.io.FileResolver.bad_path": {"tf": 1}, "etl.pkg.io.FileResolver.archive_path": {"tf": 1}, "etl.pkg.io.FileResolver.recyclable_path": {"tf": 1}, "etl.pkg.io.FileResolver.report_path": {"tf": 1}, "etl.pkg.io.FileResolver.get_file_name": {"tf": 1}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 1}, "etl.pkg.io.FileResolver.output_report": {"tf": 1}, "etl.pkg.io.FileResolver.output_recyclable": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_archive": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_bad": {"tf": 1}, "etl.pkg.io.file_resolver_context": {"tf": 1}, "etl.pkg.io.FileResolverIterator": {"tf": 1}, "etl.pkg.io.FileResolverIterator.__init__": {"tf": 1}, "etl.pkg.io.FileResolverIterator.dir_name": {"tf": 1}, "etl.pkg.io.FileResolverIterator.recurse": {"tf": 1}, "etl.pkg.io.FileResolverIterator.radix_pattern": {"tf": 1}, "etl.pkg.io.FileResolverIterator.input_files": {"tf": 1}, "etl.pkg.io.FileResolverIterator.start_date": {"tf": 1}, "etl.pkg.io.FileResolverIterator.date_pattern": {"tf": 1}, "etl.pkg.io.FileResolverIterator.name_prefix": {"tf": 1}, "etl.pkg.io.FileResolverIterator.bad_path": {"tf": 1}, "etl.pkg.io.FileResolverIterator.archive_path": {"tf": 1}, "etl.pkg.io.FileResolverIterator.recyclable_path": {"tf": 1}, "etl.pkg.io.FileResolverIterator.report_path": {"tf": 1}, "etl.tests.io_test": {"tf": 1}, "etl.tests.io_test.TestFileResolver": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_archive": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_bad": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_report": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_recyclable": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_override_start_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_guard_constructor": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_no_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_invalid_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_many_dates": {"tf": 1}, "etl.tests.io_test.TestFileResolverIterator": {"tf": 1}, "etl.tests.io_test.TestFileResolverIterator.test_iterator_from_dir": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_success": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_failure": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_other_failure": {"tf": 1}}, "df": 53, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.exceptions.IOEtlError": {"tf": 1}}, "df": 1}}}}}}}}}, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.policy.ActionOnIssue.IGNORE": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.components.checkers.SchemaChecker.schema_resolver": {"tf": 1}, "etl.pkg.io.file_resolver_context": {"tf": 1}, "etl.pkg.workflows.Base.identifier_resolver": {"tf": 1}, "etl.pkg.workflows.Base.taxonomy_resolver": {"tf": 1}, "etl.pkg.workflows.Base.schema_resolver": {"tf": 1}, "etl.pkg.workflows.Base.policy_resolver": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_archive": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_bad": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_success": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_failure": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_other_failure": {"tf": 1}}, "df": 11, "s": {"docs": {"etl.pkg.resolvers": {"tf": 1}, "etl.pkg.resolvers.FieldResolver": {"tf": 1}, "etl.pkg.resolvers.FieldResolver.get_mnemonic": {"tf": 1}, "etl.pkg.resolvers.FieldResolver.get_id": {"tf": 1}, "etl.pkg.resolvers.IdentifierResolver": {"tf": 1}, "etl.pkg.resolvers.TaxonomyResolver": {"tf": 1}, "etl.pkg.resolvers.SchemaResolver": {"tf": 1}}, "df": 7}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.runtime.Runtime.resources": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.components.interface.ResultWithReport": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.components.mappers.EntityMapper.map_remainder": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.policy.ActionOnIssue.TO_RECYCLE_BIN": {"tf": 1}}, "df": 1, "r": {"docs": {"etl.pkg.components.recycler": {"tf": 1}, "etl.pkg.components.recycler.output_recyclable_file": {"tf": 1}}, "df": 2}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.recycler.output_recyclable_file": {"tf": 1}, "etl.pkg.io.RECYCLABLE_FOLDER": {"tf": 1}, "etl.pkg.io.FileResolver.recyclable_path": {"tf": 1}, "etl.pkg.io.FileResolver.output_recyclable": {"tf": 1}, "etl.pkg.io.FileResolverIterator.recyclable_path": {"tf": 1}, "etl.pkg.workflows.Generic.did_produce_recyclable": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_recyclable": {"tf": 1}}, "df": 7}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_records": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.io.FileResolverIterator.recurse": {"tf": 1}}, "df": 1}}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.config.Registry.context_var": {"tf": 1}, "etl.pkg.config.Registry.root_var": {"tf": 1}, "etl.pkg.config.Registry.env_prefix": {"tf": 1}, "etl.pkg.config.Registry.config_context_folder": {"tf": 1}, "etl.pkg.config.Registry.config_name": {"tf": 1}, "etl.pkg.config.Registry.context_folder": {"tf": 1}, "etl.pkg.config.Registry.defaults": {"tf": 1}, "etl.pkg.config.Registry.root": {"tf": 1}, "etl.pkg.config.Registry.context": {"tf": 1}, "etl.pkg.config.Registry.preload_defaults": {"tf": 1}, "etl.pkg.config.Registry.settings_files": {"tf": 1}, "etl.pkg.config.Registry.include_files": {"tf": 1}, "etl.pkg.config.Registry.secret_suffix": {"tf": 1}, "etl.pkg.config.Registry.config_ext": {"tf": 1}, "etl.pkg.config.Registry.load": {"tf": 1}, "etl.pkg.config.Registry.get": {"tf": 1}, "etl.pkg.config.Registry.dump": {"tf": 1}}, "df": 18}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.validators.regexp_validator": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}}, "df": 2}}}}, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.io.REPORT_FOLDER": {"tf": 1}, "etl.pkg.io.FileResolver.report_path": {"tf": 1}, "etl.pkg.io.FileResolver.output_report": {"tf": 1}, "etl.pkg.io.FileResolverIterator.report_path": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_report": {"tf": 1}}, "df": 5}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.workflows.Generic.read_csv": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.config.DEFAULT_SETTING_ROOT_PATH_ENV": {"tf": 1}, "etl.pkg.config.DEFAULT_SETTING_ROOT_PATH": {"tf": 1}, "etl.pkg.config.Registry.root_var": {"tf": 1}, "etl.pkg.config.Registry.root": {"tf": 1}}, "df": 4}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}}, "df": 2}, "i": {"docs": {}, "df": 0, "x": {"docs": {"etl.pkg.io.FileResolverIterator.radix_pattern": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "b": {"docs": {"etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}}, "df": 2}}}, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}}, "df": 2}}, "o": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}}, "df": 2}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {"etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}}, "df": 2}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {"etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}}, "df": 2}}}}}}}, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {"etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}}, "df": 2}}}}}}}}, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.runtime": {"tf": 1}, "etl.pkg.runtime.Runtime": {"tf": 1.4142135623730951}, "etl.pkg.runtime.Runtime.__init__": {"tf": 1.4142135623730951}, "etl.pkg.runtime.Runtime.resources": {"tf": 1.4142135623730951}, "etl.pkg.runtime.Runtime.start": {"tf": 1.4142135623730951}, "etl.pkg.runtime.Runtime.stop": {"tf": 1.4142135623730951}, "etl.pkg.runtime.Runtime.get_config": {"tf": 1.4142135623730951}, "etl.pkg.runtime.Runtime.get_logger": {"tf": 1.4142135623730951}, "etl.pkg.runtime.Runtime.get_target_db_connection": {"tf": 1.4142135623730951}, "etl.pkg.runtime.context": {"tf": 1}, "etl.pkg.workflows.Base.runtime": {"tf": 1}}, "df": 11, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.exceptions.RuntimeEtlError": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.policy.PolicyDict.when_field_is_not_identified": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_is_not_valid": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_taxonomy_is_not_mapped": {"tf": 1}, "etl.pkg.policy.Policy.action_on_invalid_field": {"tf": 1}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1}}, "df": 5, "s": {"docs": {"etl.pkg.components.checkers.ContentChecker.fields_validator": {"tf": 1}, "etl.pkg.workflows.Base.fields_validator": {"tf": 1}, "etl.sample_generic_etl.FIELDS_WITH_EXTERNAL_IDENTIFIERS": {"tf": 1}, "etl.sample_generic_etl.FIELDS_WITH_TAXONOMIES": {"tf": 1}, "etl.sample_generic_etl.FIELDS_WITH_VALIDATION": {"tf": 1}}, "df": 5, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.validators.FieldsValidator": {"tf": 1}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1}}, "df": 2}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.resolvers.FieldResolver": {"tf": 1}, "etl.pkg.resolvers.FieldResolver.get_mnemonic": {"tf": 1}, "etl.pkg.resolvers.FieldResolver.get_id": {"tf": 1}}, "df": 3}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.recycler.output_recyclable_file": {"tf": 1}, "etl.pkg.io.FileResolver.file_name": {"tf": 1}, "etl.pkg.io.FileResolver.get_file_name": {"tf": 1}, "etl.pkg.io.file_resolver_context": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_not_existing": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_is_a_dir": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_archive": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_bad": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_success": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_failure": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_other_failure": {"tf": 1}, "etl.tests.utils_test.create_test_file": {"tf": 1}}, "df": 12, "s": {"docs": {"etl.pkg.config.Registry.settings_files": {"tf": 1}, "etl.pkg.config.Registry.include_files": {"tf": 1}, "etl.pkg.io.FileResolverIterator.input_files": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_happy_with_files": {"tf": 1}}, "df": 4}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.io.FileResolver": {"tf": 1}, "etl.pkg.io.FileResolver.__init__": {"tf": 1}, "etl.pkg.io.FileResolver.file_name": {"tf": 1}, "etl.pkg.io.FileResolver.start_date": {"tf": 1}, "etl.pkg.io.FileResolver.date_pattern": {"tf": 1}, "etl.pkg.io.FileResolver.name_prefix": {"tf": 1}, "etl.pkg.io.FileResolver.bad_path": {"tf": 1}, "etl.pkg.io.FileResolver.archive_path": {"tf": 1}, "etl.pkg.io.FileResolver.recyclable_path": {"tf": 1}, "etl.pkg.io.FileResolver.report_path": {"tf": 1}, "etl.pkg.io.FileResolver.get_file_name": {"tf": 1}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 1}, "etl.pkg.io.FileResolver.output_report": {"tf": 1}, "etl.pkg.io.FileResolver.output_recyclable": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_archive": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_bad": {"tf": 1}}, "df": 16, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.io.FileResolverIterator": {"tf": 1}, "etl.pkg.io.FileResolverIterator.__init__": {"tf": 1}, "etl.pkg.io.FileResolverIterator.dir_name": {"tf": 1}, "etl.pkg.io.FileResolverIterator.recurse": {"tf": 1}, "etl.pkg.io.FileResolverIterator.radix_pattern": {"tf": 1}, "etl.pkg.io.FileResolverIterator.input_files": {"tf": 1}, "etl.pkg.io.FileResolverIterator.start_date": {"tf": 1}, "etl.pkg.io.FileResolverIterator.date_pattern": {"tf": 1}, "etl.pkg.io.FileResolverIterator.name_prefix": {"tf": 1}, "etl.pkg.io.FileResolverIterator.bad_path": {"tf": 1}, "etl.pkg.io.FileResolverIterator.archive_path": {"tf": 1}, "etl.pkg.io.FileResolverIterator.recyclable_path": {"tf": 1}, "etl.pkg.io.FileResolverIterator.report_path": {"tf": 1}}, "df": 13}}}}}}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.Series.combine_first": {"tf": 1}}, "df": 1}}}, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"etl.tests.utils_test.FIXTURE_PREFIX": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.config.DEFAULT_SETTING_CONTEXT_FOLDER": {"tf": 1}, "etl.pkg.config.Registry.config_context_folder": {"tf": 1}, "etl.pkg.config.Registry.context_folder": {"tf": 1}, "etl.pkg.io.BAD_FOLDER": {"tf": 1}, "etl.pkg.io.ARCHIVE_FOLDER": {"tf": 1}, "etl.pkg.io.RECYCLABLE_FOLDER": {"tf": 1}, "etl.pkg.io.REPORT_FOLDER": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_folder": {"tf": 1}}, "df": 8}}}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.get_ftype_counts": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"etl.pkg.dataframe.DataFrame.from_dict": {"tf": 1}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 1}, "etl.pkg.policy.from_config": {"tf": 1}, "etl.tests.io_test.TestFileResolverIterator.test_iterator_from_dir": {"tf": 1}}, "df": 4}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.Series.to_frame": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {"etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}}, "df": 2}}}}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.flags": {"tf": 1}, "etl.pkg.flags.Namespace": {"tf": 1}, "etl.pkg.flags.Namespace.__init__": {"tf": 1}, "etl.pkg.flags.ArgumentParser": {"tf": 1}, "etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}, "etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1}, "etl.pkg.flags.iso_date": {"tf": 1}, "etl.tests.flags_test": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.parser": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_happy_path": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_happy_with_files": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_args": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_start_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_valid_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_valid_standalone_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_no_input": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_not_existing": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_is_a_dir": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_existing": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_folder": {"tf": 1}}, "df": 22, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.exceptions.FlagsError": {"tf": 1}}, "df": 1}}}}}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.policy.ActionOnIssue.FAIL": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_failure": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_other_failure": {"tf": 1}}, "df": 2}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.policy.PolicyDict.when_any_is_not_valid": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_is_not_valid": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_valid_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_valid_standalone_end_date": {"tf": 1}}, "df": 4, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.components.checkers.ContentChecker.fields_validator": {"tf": 1}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1}, "etl.pkg.validators.regexp_validator": {"tf": 1}, "etl.pkg.validators.na_validator": {"tf": 1}, "etl.pkg.validators.minmax_validator": {"tf": 1}, "etl.pkg.validators.date_validator": {"tf": 1}, "etl.pkg.workflows.Base.fields_validator": {"tf": 1}}, "df": 7, "s": {"docs": {"etl.pkg.validators": {"tf": 1}, "etl.pkg.validators.SeriesValidator": {"tf": 1}, "etl.pkg.validators.FieldsValidator": {"tf": 1}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1}, "etl.pkg.validators.regexp_validator": {"tf": 1}, "etl.pkg.validators.na_validator": {"tf": 1}, "etl.pkg.validators.minmax_validator": {"tf": 1}, "etl.pkg.validators.date_validator": {"tf": 1}}, "df": 8}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.sample_generic_etl.FIELDS_WITH_VALIDATION": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.Series.value_counts": {"tf": 1}}, "df": 1, "s": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {"etl.pkg.config.Registry.context_var": {"tf": 1}, "etl.pkg.config.Registry.root_var": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"etl.pkg.dataframe.Series.view": {"tf": 1}}, "df": 1}}}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.components.historian": {"tf": 1}, "etl.pkg.components.historian.HistoryBuilder": {"tf": 1}, "etl.pkg.components.historian.HistoryBuilder.pipe": {"tf": 1}}, "df": 3}}}, "y": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.components.historian.HistoryBuilder": {"tf": 1}, "etl.pkg.components.historian.HistoryBuilder.pipe": {"tf": 1}}, "df": 2}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"etl.tests.flags_test.TestArgumentParser.test_happy_path": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_happy_with_files": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_archive": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_bad": {"tf": 1}}, "df": 4}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {"etl.tests.flags_test.TestArgumentParser.test_invalid_no_input": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_no_date": {"tf": 1}}, "df": 2, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.interface.NopPipe": {"tf": 1}, "etl.pkg.components.interface.NopPipe.pipe": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {"etl.pkg.policy.PolicyDict.when_any_is_not_identified": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_is_not_valid": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_taxonomy_is_not_mapped": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_is_not_identified": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_is_not_valid": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_taxonomy_is_not_mapped": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_not_existing": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_existing": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_folder": {"tf": 1}}, "df": 9}}, "a": {"docs": {"etl.pkg.validators.na_validator": {"tf": 1}}, "df": 1, "m": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.config.DEFAULT_SETTING_CONFIG_NAME": {"tf": 1}, "etl.pkg.config.Registry.config_name": {"tf": 1}, "etl.pkg.dataframe.Series.name": {"tf": 1}, "etl.pkg.io.FileResolver.file_name": {"tf": 1}, "etl.pkg.io.FileResolver.name_prefix": {"tf": 1}, "etl.pkg.io.FileResolver.get_file_name": {"tf": 1}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 1}, "etl.pkg.io.FileResolverIterator.dir_name": {"tf": 1}, "etl.pkg.io.FileResolverIterator.name_prefix": {"tf": 1}}, "df": 9, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.flags.Namespace": {"tf": 1}, "etl.pkg.flags.Namespace.__init__": {"tf": 1}}, "df": 2}}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {"etl.pkg.dataframe.DataFrame.ndim": {"tf": 1}, "etl.pkg.dataframe.Series.ndim": {"tf": 1}}, "df": 2}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}}, "df": 2}}}}}}}, "s": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}}, "df": 2}}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {"etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}}, "df": 2}, "b": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.Series.nbytes": {"tf": 1}}, "df": 1}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.components.mappers.EntityMapper.map_remainder": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.map_target_entities": {"tf": 1}, "etl.pkg.dataframe.DataFrame.map": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}}, "df": 4, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.components.mappers": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper.pipe": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper.check_taxonomies": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.pipe": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.map_remainder": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.map_target_entities": {"tf": 1}}, "df": 8}}, "d": {"docs": {"etl.pkg.policy.PolicyDict.when_any_taxonomy_is_not_mapped": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_taxonomy_is_not_mapped": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"etl.sample_generic_etl.main": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "y": {"docs": {"etl.tests.io_test.TestFileResolver.test_date_extraction_many_dates": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}}, "df": 2}}}}, "l": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.melt": {"tf": 1}}, "df": 1}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.Series.median_approximate": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}}, "df": 2}}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}}, "df": 2, "e": {"docs": {"etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}}, "df": 2}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1}}, "df": 2}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.io.FileResolver.move_to_archive": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_bad": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}}, "df": 2}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"etl.pkg.resolvers.FieldResolver.get_mnemonic": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {"etl.pkg.validators.minmax_validator": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.policy.PolicyDict.when_any_taxonomy_is_not_mapped": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_taxonomy_is_not_mapped": {"tf": 1}, "etl.pkg.workflows.Base.taxonomy_resolver": {"tf": 1}}, "df": 3, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.components.mappers.TaxonomyMapper": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper.pipe": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper.check_taxonomies": {"tf": 1}}, "df": 3}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.resolvers.TaxonomyResolver": {"tf": 1}}, "df": 1}}}}}}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.components.mappers.TaxonomyMapper.check_taxonomies": {"tf": 1}, "etl.sample_generic_etl.FIELDS_WITH_TAXONOMIES": {"tf": 1}}, "df": 2}}}}}}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.components.mappers.EntityMapper.map_target_entities": {"tf": 1}, "etl.pkg.runtime.Runtime.get_target_db_connection": {"tf": 1}}, "df": 2}}}}, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.components.transformers": {"tf": 1}}, "df": 1}}}}}}}}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {"etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}}, "df": 2}}}}}}, "o": {"docs": {"etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_orc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.to_bag": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_archive": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_bad": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.TO_RECYCLE_BIN": {"tf": 1}}, "df": 14, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.policy.PolicyResolver.tolerates_data_issues": {"tf": 1}}, "df": 1}}}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}}, "df": 2}}}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.tests.flags_test": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.parser": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_happy_path": {"tf": 1.4142135623730951}, "etl.tests.flags_test.TestArgumentParser.test_happy_with_files": {"tf": 1.4142135623730951}, "etl.tests.flags_test.TestArgumentParser.test_invalid_args": {"tf": 1.4142135623730951}, "etl.tests.flags_test.TestArgumentParser.test_invalid_start_date": {"tf": 1.4142135623730951}, "etl.tests.flags_test.TestArgumentParser.test_valid_end_date": {"tf": 1.4142135623730951}, "etl.tests.flags_test.TestArgumentParser.test_valid_standalone_end_date": {"tf": 1.4142135623730951}, "etl.tests.flags_test.TestArgumentParser.test_invalid_end_date": {"tf": 1.4142135623730951}, "etl.tests.flags_test.TestArgumentParser.test_invalid_no_input": {"tf": 1.4142135623730951}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_not_existing": {"tf": 1.4142135623730951}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_is_a_dir": {"tf": 1.4142135623730951}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_existing": {"tf": 1.4142135623730951}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_folder": {"tf": 1.4142135623730951}, "etl.tests.io_test": {"tf": 1}, "etl.tests.io_test.TestFileResolver": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_archive": {"tf": 1.4142135623730951}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_bad": {"tf": 1.4142135623730951}, "etl.tests.io_test.TestFileResolver.test_ouput_report": {"tf": 1.4142135623730951}, "etl.tests.io_test.TestFileResolver.test_ouput_recyclable": {"tf": 1.4142135623730951}, "etl.tests.io_test.TestFileResolver.test_override_start_date": {"tf": 1.4142135623730951}, "etl.tests.io_test.TestFileResolver.test_guard_constructor": {"tf": 1.4142135623730951}, "etl.tests.io_test.TestFileResolver.test_date_extraction_no_date": {"tf": 1.4142135623730951}, "etl.tests.io_test.TestFileResolver.test_date_extraction_invalid_date": {"tf": 1.4142135623730951}, "etl.tests.io_test.TestFileResolver.test_date_extraction_many_dates": {"tf": 1.4142135623730951}, "etl.tests.io_test.TestFileResolverIterator": {"tf": 1}, "etl.tests.io_test.TestFileResolverIterator.test_iterator_from_dir": {"tf": 1.4142135623730951}, "etl.tests.io_test.TestFileResolverContext": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_success": {"tf": 1.4142135623730951}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_failure": {"tf": 1.4142135623730951}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_other_failure": {"tf": 1.4142135623730951}, "etl.tests.utils_test": {"tf": 1}, "etl.tests.utils_test.FIXTURE_PREFIX": {"tf": 1}, "etl.tests.utils_test.TEST_DATE": {"tf": 1.4142135623730951}, "etl.tests.utils_test.create_test_file": {"tf": 1.4142135623730951}}, "df": 36, "s": {"docs": {"etl.tests": {"tf": 1}, "etl.tests.flags_test": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.parser": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_happy_path": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_happy_with_files": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_args": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_start_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_valid_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_valid_standalone_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_no_input": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_not_existing": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_is_a_dir": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_existing": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_folder": {"tf": 1}, "etl.tests.io_test": {"tf": 1}, "etl.tests.io_test.TestFileResolver": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_archive": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_bad": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_report": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_recyclable": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_override_start_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_guard_constructor": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_no_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_invalid_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_many_dates": {"tf": 1}, "etl.tests.io_test.TestFileResolverIterator": {"tf": 1}, "etl.tests.io_test.TestFileResolverIterator.test_iterator_from_dir": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_success": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_failure": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_other_failure": {"tf": 1}, "etl.tests.utils_test": {"tf": 1}, "etl.tests.utils_test.FIXTURE_PREFIX": {"tf": 1}, "etl.tests.utils_test.TEST_DATE": {"tf": 1}, "etl.tests.utils_test.create_test_file": {"tf": 1}}, "df": 37}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.tests.flags_test.TestArgumentParser": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.parser": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_happy_path": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_happy_with_files": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_args": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_start_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_valid_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_valid_standalone_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_no_input": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_not_existing": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_is_a_dir": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_existing": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_folder": {"tf": 1}}, "df": 14}}}}}}}}}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.tests.io_test.TestFileResolver": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_archive": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_bad": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_report": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_recyclable": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_override_start_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_guard_constructor": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_no_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_invalid_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_many_dates": {"tf": 1}}, "df": 10, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.tests.io_test.TestFileResolverIterator": {"tf": 1}, "etl.tests.io_test.TestFileResolverIterator.test_iterator_from_dir": {"tf": 1}}, "df": 2}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"etl.tests.io_test.TestFileResolverContext": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_success": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_failure": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_other_failure": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.components.recycler.output_recyclable_file": {"tf": 1}, "etl.pkg.io.FileResolver.output_report": {"tf": 1}, "etl.pkg.io.FileResolver.output_recyclable": {"tf": 1}}, "df": 3}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"etl.tests.io_test.TestFileResolver.test_ouput_report": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_recyclable": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "c": {"docs": {"etl.pkg.dataframe.DataFrame.to_orc": {"tf": 1}}, "df": 1}}, "n": {"docs": {"etl.pkg.policy.Policy.action_on_invalid_field": {"tf": 1}}, "df": 1}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"etl.tests.io_test.TestFileResolver.test_override_start_date": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_other_failure": {"tf": 1}}, "df": 1}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.config.DEFAULT_ENV_PREFIX": {"tf": 1}, "etl.pkg.config.DEFAULT_CONTEXT_ENV": {"tf": 1}, "etl.pkg.config.DEFAULT_CONTEXT": {"tf": 1}, "etl.pkg.config.DEFAULT_SETTING_ROOT_PATH_ENV": {"tf": 1}, "etl.pkg.config.DEFAULT_SETTING_ROOT_PATH": {"tf": 1}, "etl.pkg.config.DEFAULT_SETTING_CONTEXT_FOLDER": {"tf": 1}, "etl.pkg.config.DEFAULT_SETTING_CONFIG_NAME": {"tf": 1}}, "df": 7, "s": {"docs": {"etl.pkg.config.DEFAULTS_SETTINGS": {"tf": 1}, "etl.pkg.config.Registry.defaults": {"tf": 1}, "etl.pkg.config.Registry.preload_defaults": {"tf": 1}}, "df": 3}}}}}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1}}, "df": 1}}}}}}}}, "v": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.exceptions.DevMistakeError": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.config.Registry.dump": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"etl.pkg.policy.PolicyResolver.tolerates_data_issues": {"tf": 1}}, "df": 1, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.database": {"tf": 1}, "etl.pkg.database.DBJob": {"tf": 1}, "etl.pkg.database.DBJob.execute": {"tf": 1}}, "df": 3}}}}, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe": {"tf": 1}, "etl.pkg.dataframe.DataFrame": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.__init__": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.axes": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.columns": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.iloc": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.empty": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ndim": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.shape": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.dtypes": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.get_dtype_counts": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.get_ftype_counts": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.clip_lower": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.clip_upper": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_orc": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.map": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.info": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.from_dict": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.axes": {"tf": 1}, "etl.pkg.dataframe.Series.name": {"tf": 1}, "etl.pkg.dataframe.Series.ndim": {"tf": 1}, "etl.pkg.dataframe.Series.shape": {"tf": 1}, "etl.pkg.dataframe.Series.dtype": {"tf": 1}, "etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}, "etl.pkg.dataframe.Series.nbytes": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.quantile": {"tf": 1}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.unique": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.clip_lower": {"tf": 1}, "etl.pkg.dataframe.Series.clip_upper": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.to_bag": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 149}}}}}}, "e": {"docs": {"etl.pkg.flags.iso_date": {"tf": 1}, "etl.pkg.io.ISO_DATE_PREFIX": {"tf": 1}, "etl.pkg.io.FileResolver.start_date": {"tf": 1}, "etl.pkg.io.FileResolver.date_pattern": {"tf": 1}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 1}, "etl.pkg.io.FileResolverIterator.start_date": {"tf": 1}, "etl.pkg.io.FileResolverIterator.date_pattern": {"tf": 1}, "etl.pkg.validators.date_validator": {"tf": 1}, "etl.pkg.workflows.Base.start_date": {"tf": 1}, "etl.pkg.workflows.Base.end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_start_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_valid_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_valid_standalone_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_end_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_override_start_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_no_date": {"tf": 1.4142135623730951}, "etl.tests.io_test.TestFileResolver.test_date_extraction_invalid_date": {"tf": 1.4142135623730951}, "etl.tests.io_test.TestFileResolver.test_date_extraction_many_dates": {"tf": 1}, "etl.tests.utils_test.TEST_DATE": {"tf": 1}}, "df": 19, "s": {"docs": {"etl.tests.io_test.TestFileResolver.test_date_extraction_many_dates": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {"etl.pkg.runtime.Runtime.get_target_db_connection": {"tf": 1}}, "df": 1, "j": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {"etl.pkg.database.DBJob": {"tf": 1}, "etl.pkg.database.DBJob.execute": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {"etl.pkg.dataframe.Series.dt": {"tf": 1}}, "df": 1, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.get_dtype_counts": {"tf": 1}, "etl.pkg.dataframe.Series.dtype": {"tf": 1}}, "df": 2, "s": {"docs": {"etl.pkg.dataframe.DataFrame.dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.dataframe.DataFrame.drop": {"tf": 1}}, "df": 1, "n": {"docs": {}, "df": 0, "a": {"docs": {"etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.from_dict": {"tf": 1}, "etl.pkg.policy.Policy.dict": {"tf": 1}}, "df": 2}}, "v": {"docs": {"etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {"etl.pkg.io.FileResolverIterator.dir_name": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_is_a_dir": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_existing": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_folder": {"tf": 1}, "etl.tests.io_test.TestFileResolverIterator.test_iterator_from_dir": {"tf": 1}}, "df": 5}, "d": {"docs": {"etl.pkg.workflows.Generic.did_produce_recyclable": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.config.Registry.load": {"tf": 1}}, "df": 1}}, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.clip_lower": {"tf": 1}, "etl.pkg.dataframe.Series.clip_lower": {"tf": 1}}, "df": 2}}}, "g": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.runtime.Runtime.get_logger": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {"etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}}, "df": 2}, "e": {"docs": {"etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}}, "df": 2}}, "g": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}}, "df": 2, "t": {"docs": {"etl.pkg.config.Registry.get": {"tf": 1}, "etl.pkg.dataframe.DataFrame.get_dtype_counts": {"tf": 1}, "etl.pkg.dataframe.DataFrame.get_ftype_counts": {"tf": 1}, "etl.pkg.io.FileResolver.get_file_name": {"tf": 1}, "etl.pkg.resolvers.FieldResolver.get_mnemonic": {"tf": 1}, "etl.pkg.resolvers.FieldResolver.get_id": {"tf": 1}, "etl.pkg.runtime.Runtime.get_config": {"tf": 1}, "etl.pkg.runtime.Runtime.get_logger": {"tf": 1}, "etl.pkg.runtime.Runtime.get_target_db_connection": {"tf": 1}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1}}, "df": 10}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"etl.pkg.workflows.Generic": {"tf": 1}, "etl.pkg.workflows.Generic.__init__": {"tf": 1}, "etl.pkg.workflows.Generic.read_csv": {"tf": 1}, "etl.pkg.workflows.Generic.execute": {"tf": 1}, "etl.pkg.workflows.Generic.did_produce_recyclable": {"tf": 1}, "etl.sample_generic_etl": {"tf": 1}, "etl.sample_generic_etl.FIELDS_WITH_EXTERNAL_IDENTIFIERS": {"tf": 1}, "etl.sample_generic_etl.FIELDS_WITH_TAXONOMIES": {"tf": 1}, "etl.sample_generic_etl.FIELDS_WITH_VALIDATION": {"tf": 1}, "etl.sample_generic_etl.CSV_SCHEMA": {"tf": 1}, "etl.sample_generic_etl.execute": {"tf": 1}, "etl.sample_generic_etl.main": {"tf": 1}}, "df": 12}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 2}}}}}}, "t": {"docs": {"etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}}, "df": 2}, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"etl.tests.io_test.TestFileResolver.test_guard_constructor": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {"etl.tests.flags_test.TestArgumentParser.test_invalid_file_is_a_dir": {"tf": 1}}, "df": 1, "x": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.axes": {"tf": 1}, "etl.pkg.dataframe.Series.axes": {"tf": 1}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 2, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.Series.median_approximate": {"tf": 1}}, "df": 1}}}}}}}}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}}, "df": 2}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.Series.align": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.Series.autocorr": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.flags.ArgumentParser": {"tf": 1}, "etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}, "etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1}}, "df": 3}}}}}}}}}}}, "s": {"docs": {"etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_args": {"tf": 1}}, "df": 2}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.io.ARCHIVE_FOLDER": {"tf": 1}, "etl.pkg.io.FileResolver.archive_path": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_archive": {"tf": 1}, "etl.pkg.io.FileResolverIterator.archive_path": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_archive": {"tf": 1}}, "df": 5}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.policy.Policy.action_on_invalid_field": {"tf": 1}}, "df": 1, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.policy.ActionOnIssue": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.FAIL": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.TO_RECYCLE_BIN": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.SKIP": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.IGNORE": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.CREATE": {"tf": 1}}, "df": 6}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.policy.PolicyDict.when_any_is_not_identified": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_is_not_valid": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_taxonomy_is_not_mapped": {"tf": 1}}, "df": 3}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.query": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.Series.quantile": {"tf": 1}}, "df": 1}}}}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.clip_upper": {"tf": 1}, "etl.pkg.dataframe.Series.clip_upper": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}}, "df": 2}}}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.Series.unique": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.exceptions.UndeclaredFieldError": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"etl.tests.utils_test": {"tf": 1}, "etl.tests.utils_test.FIXTURE_PREFIX": {"tf": 1}, "etl.tests.utils_test.TEST_DATE": {"tf": 1}, "etl.tests.utils_test.create_test_file": {"tf": 1}}, "df": 4}}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.Series.to_bag": {"tf": 1}}, "df": 2}, "d": {"docs": {"etl.pkg.io.BAD_FOLDER": {"tf": 1}, "etl.pkg.io.FileResolver.bad_path": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_bad": {"tf": 1}, "etl.pkg.io.FileResolverIterator.bad_path": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_bad": {"tf": 1}}, "df": 5}, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.workflows.Base": {"tf": 1}, "etl.pkg.workflows.Base.__init__": {"tf": 1}, "etl.pkg.workflows.Base.runtime": {"tf": 1}, "etl.pkg.workflows.Base.start_date": {"tf": 1}, "etl.pkg.workflows.Base.end_date": {"tf": 1}, "etl.pkg.workflows.Base.identifier_resolver": {"tf": 1}, "etl.pkg.workflows.Base.taxonomy_resolver": {"tf": 1}, "etl.pkg.workflows.Base.schema_resolver": {"tf": 1}, "etl.pkg.workflows.Base.fields_validator": {"tf": 1}, "etl.pkg.workflows.Base.policy_resolver": {"tf": 1}, "etl.pkg.workflows.Base.execute": {"tf": 1}}, "df": 11}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.Series.between": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.policy.ActionOnIssue.TO_RECYCLE_BIN": {"tf": 1}}, "df": 1}}}, "j": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 1}}, "df": 1}}}}, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.policy.PolicyDict.when_any_is_not_identified": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_is_not_valid": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_taxonomy_is_not_mapped": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_is_not_identified": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_is_not_valid": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_taxonomy_is_not_mapped": {"tf": 1}}, "df": 6}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.workflows": {"tf": 1}, "etl.pkg.workflows.Base": {"tf": 1}, "etl.pkg.workflows.Base.__init__": {"tf": 1}, "etl.pkg.workflows.Base.runtime": {"tf": 1}, "etl.pkg.workflows.Base.start_date": {"tf": 1}, "etl.pkg.workflows.Base.end_date": {"tf": 1}, "etl.pkg.workflows.Base.identifier_resolver": {"tf": 1}, "etl.pkg.workflows.Base.taxonomy_resolver": {"tf": 1}, "etl.pkg.workflows.Base.schema_resolver": {"tf": 1}, "etl.pkg.workflows.Base.fields_validator": {"tf": 1}, "etl.pkg.workflows.Base.policy_resolver": {"tf": 1}, "etl.pkg.workflows.Base.execute": {"tf": 1}, "etl.pkg.workflows.Generic": {"tf": 1}, "etl.pkg.workflows.Generic.__init__": {"tf": 1}, "etl.pkg.workflows.Generic.read_csv": {"tf": 1}, "etl.pkg.workflows.Generic.execute": {"tf": 1}, "etl.pkg.workflows.Generic.did_produce_recyclable": {"tf": 1}}, "df": 17}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"etl.sample_generic_etl.FIELDS_WITH_EXTERNAL_IDENTIFIERS": {"tf": 1}, "etl.sample_generic_etl.FIELDS_WITH_TAXONOMIES": {"tf": 1}, "etl.sample_generic_etl.FIELDS_WITH_VALIDATION": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_happy_with_files": {"tf": 1}}, "df": 4}}}}}}, "annotation": {"root": {"docs": {"etl.pkg.components.checkers.SchemaChecker.schema_resolver": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.fields_validator": {"tf": 1.4142135623730951}, "etl.pkg.components.checkers.ContentChecker.policy": {"tf": 1}, "etl.pkg.config.Registry.context_var": {"tf": 1}, "etl.pkg.config.Registry.root_var": {"tf": 1}, "etl.pkg.config.Registry.config_name": {"tf": 1}, "etl.pkg.config.Registry.context_folder": {"tf": 1}, "etl.pkg.config.Registry.defaults": {"tf": 1}, "etl.pkg.config.Registry.root": {"tf": 1}, "etl.pkg.config.Registry.context": {"tf": 1}, "etl.pkg.config.Registry.preload_defaults": {"tf": 1}, "etl.pkg.config.Registry.settings_files": {"tf": 1}, "etl.pkg.config.Registry.include_files": {"tf": 1}, "etl.pkg.config.Registry.secret_suffix": {"tf": 1}, "etl.pkg.config.Registry.config_ext": {"tf": 1}, "etl.pkg.io.FileResolver.file_name": {"tf": 1}, "etl.pkg.io.FileResolver.start_date": {"tf": 1}, "etl.pkg.io.FileResolver.date_pattern": {"tf": 1}, "etl.pkg.io.FileResolver.name_prefix": {"tf": 1}, "etl.pkg.io.FileResolver.bad_path": {"tf": 1}, "etl.pkg.io.FileResolver.archive_path": {"tf": 1}, "etl.pkg.io.FileResolver.recyclable_path": {"tf": 1}, "etl.pkg.io.FileResolver.report_path": {"tf": 1}, "etl.pkg.io.FileResolverIterator.dir_name": {"tf": 1}, "etl.pkg.io.FileResolverIterator.recurse": {"tf": 1}, "etl.pkg.io.FileResolverIterator.radix_pattern": {"tf": 1}, "etl.pkg.io.FileResolverIterator.input_files": {"tf": 1}, "etl.pkg.io.FileResolverIterator.start_date": {"tf": 1}, "etl.pkg.io.FileResolverIterator.date_pattern": {"tf": 1}, "etl.pkg.io.FileResolverIterator.name_prefix": {"tf": 1}, "etl.pkg.io.FileResolverIterator.bad_path": {"tf": 1}, "etl.pkg.io.FileResolverIterator.archive_path": {"tf": 1}, "etl.pkg.io.FileResolverIterator.recyclable_path": {"tf": 1}, "etl.pkg.io.FileResolverIterator.report_path": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_is_not_identified": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_is_not_valid": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_taxonomy_is_not_mapped": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_is_not_identified": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_is_not_valid": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_taxonomy_is_not_mapped": {"tf": 1}, "etl.pkg.policy.Policy.dict": {"tf": 1}, "etl.pkg.policy.PolicyResolver.policy": {"tf": 1}, "etl.pkg.runtime.Runtime.resources": {"tf": 1}, "etl.pkg.workflows.Base.runtime": {"tf": 1}, "etl.pkg.workflows.Base.start_date": {"tf": 1}, "etl.pkg.workflows.Base.end_date": {"tf": 1}, "etl.pkg.workflows.Base.identifier_resolver": {"tf": 1}, "etl.pkg.workflows.Base.taxonomy_resolver": {"tf": 1}, "etl.pkg.workflows.Base.schema_resolver": {"tf": 1}, "etl.pkg.workflows.Base.fields_validator": {"tf": 1}, "etl.pkg.workflows.Base.policy_resolver": {"tf": 1}}, "df": 51, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.components.checkers.SchemaChecker.schema_resolver": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.policy": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_is_not_identified": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_is_not_valid": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_taxonomy_is_not_mapped": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_is_not_identified": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_is_not_valid": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_taxonomy_is_not_mapped": {"tf": 1}, "etl.pkg.policy.Policy.dict": {"tf": 1}, "etl.pkg.policy.PolicyResolver.policy": {"tf": 1}, "etl.pkg.workflows.Base.runtime": {"tf": 1}, "etl.pkg.workflows.Base.identifier_resolver": {"tf": 1}, "etl.pkg.workflows.Base.taxonomy_resolver": {"tf": 1}, "etl.pkg.workflows.Base.schema_resolver": {"tf": 1}, "etl.pkg.workflows.Base.fields_validator": {"tf": 1}, "etl.pkg.workflows.Base.policy_resolver": {"tf": 1}}, "df": 16}}}, "p": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.components.checkers.SchemaChecker.schema_resolver": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.policy": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_is_not_identified": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_is_not_valid": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_taxonomy_is_not_mapped": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_is_not_identified": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_is_not_valid": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_taxonomy_is_not_mapped": {"tf": 1}, "etl.pkg.policy.Policy.dict": {"tf": 1}, "etl.pkg.policy.PolicyResolver.policy": {"tf": 1}, "etl.pkg.workflows.Base.runtime": {"tf": 1}, "etl.pkg.workflows.Base.identifier_resolver": {"tf": 1}, "etl.pkg.workflows.Base.taxonomy_resolver": {"tf": 1}, "etl.pkg.workflows.Base.schema_resolver": {"tf": 1}, "etl.pkg.workflows.Base.fields_validator": {"tf": 1}, "etl.pkg.workflows.Base.policy_resolver": {"tf": 1}}, "df": 16}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.components.checkers.ContentChecker.policy": {"tf": 1.4142135623730951}, "etl.pkg.policy.PolicyDict.when_any_is_not_identified": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_is_not_valid": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_taxonomy_is_not_mapped": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_is_not_identified": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_is_not_valid": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_taxonomy_is_not_mapped": {"tf": 1}, "etl.pkg.policy.Policy.dict": {"tf": 1}, "etl.pkg.policy.PolicyResolver.policy": {"tf": 1.4142135623730951}, "etl.pkg.workflows.Base.policy_resolver": {"tf": 1}}, "df": 10, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.policy.Policy.dict": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.workflows.Base.policy_resolver": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.components.checkers.SchemaChecker.schema_resolver": {"tf": 1}, "etl.pkg.workflows.Base.identifier_resolver": {"tf": 1}, "etl.pkg.workflows.Base.taxonomy_resolver": {"tf": 1}, "etl.pkg.workflows.Base.schema_resolver": {"tf": 1}}, "df": 4}}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.workflows.Base.runtime": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.components.checkers.SchemaChecker.schema_resolver": {"tf": 1}, "etl.pkg.workflows.Base.schema_resolver": {"tf": 1}}, "df": 2}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.config.Registry.context_var": {"tf": 1}, "etl.pkg.config.Registry.root_var": {"tf": 1}, "etl.pkg.config.Registry.config_name": {"tf": 1}, "etl.pkg.config.Registry.context_folder": {"tf": 1}, "etl.pkg.config.Registry.defaults": {"tf": 1}, "etl.pkg.config.Registry.root": {"tf": 1}, "etl.pkg.config.Registry.context": {"tf": 1}, "etl.pkg.config.Registry.secret_suffix": {"tf": 1}, "etl.pkg.io.FileResolver.file_name": {"tf": 1}, "etl.pkg.io.FileResolver.date_pattern": {"tf": 1}, "etl.pkg.io.FileResolver.name_prefix": {"tf": 1}, "etl.pkg.io.FileResolver.bad_path": {"tf": 1}, "etl.pkg.io.FileResolver.archive_path": {"tf": 1}, "etl.pkg.io.FileResolver.recyclable_path": {"tf": 1}, "etl.pkg.io.FileResolver.report_path": {"tf": 1}, "etl.pkg.io.FileResolverIterator.dir_name": {"tf": 1}, "etl.pkg.io.FileResolverIterator.radix_pattern": {"tf": 1}, "etl.pkg.io.FileResolverIterator.date_pattern": {"tf": 1}, "etl.pkg.io.FileResolverIterator.name_prefix": {"tf": 1}, "etl.pkg.io.FileResolverIterator.bad_path": {"tf": 1}, "etl.pkg.io.FileResolverIterator.archive_path": {"tf": 1}, "etl.pkg.io.FileResolverIterator.recyclable_path": {"tf": 1}, "etl.pkg.io.FileResolverIterator.report_path": {"tf": 1}}, "df": 23}}}, "x": {"2": {"7": {"docs": {"etl.pkg.components.checkers.ContentChecker.fields_validator": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.components.checkers.ContentChecker.fields_validator": {"tf": 1}, "etl.pkg.workflows.Base.fields_validator": {"tf": 1}}, "df": 2}}}}}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.components.checkers.ContentChecker.fields_validator": {"tf": 1}}, "df": 1}}}}}}}}}, "s": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.workflows.Base.fields_validator": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.config.Registry.preload_defaults": {"tf": 1}, "etl.pkg.config.Registry.settings_files": {"tf": 1}, "etl.pkg.config.Registry.include_files": {"tf": 1}, "etl.pkg.config.Registry.config_ext": {"tf": 1}, "etl.pkg.io.FileResolverIterator.input_files": {"tf": 1}}, "df": 5}}}}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.io.FileResolver.start_date": {"tf": 1}, "etl.pkg.io.FileResolverIterator.start_date": {"tf": 1}, "etl.pkg.workflows.Base.start_date": {"tf": 1}, "etl.pkg.workflows.Base.end_date": {"tf": 1}}, "df": 4, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.io.FileResolver.start_date": {"tf": 1}, "etl.pkg.io.FileResolverIterator.start_date": {"tf": 1}, "etl.pkg.workflows.Base.start_date": {"tf": 1}, "etl.pkg.workflows.Base.end_date": {"tf": 1}}, "df": 4}}}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.policy.PolicyDict.when_field_is_not_identified": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_is_not_valid": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_taxonomy_is_not_mapped": {"tf": 1}}, "df": 3}}}}}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.io.FileResolverIterator.recurse": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.policy.PolicyDict.when_any_is_not_identified": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_is_not_valid": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_any_taxonomy_is_not_mapped": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_is_not_identified": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_is_not_valid": {"tf": 1}, "etl.pkg.policy.PolicyDict.when_field_taxonomy_is_not_mapped": {"tf": 1}}, "df": 6}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.runtime.Runtime.resources": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.workflows.Base.identifier_resolver": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.workflows.Base.taxonomy_resolver": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}, "default_value": {"root": {"0": {"docs": {"etl.pkg.policy.ActionOnIssue.FAIL": {"tf": 1}, "etl.pkg.workflows.Base.policy_resolver": {"tf": 1.7320508075688772}}, "df": 2}, "1": {"3": {"docs": {"etl.pkg.workflows.Base.start_date": {"tf": 1}}, "df": 1}, "docs": {"etl.pkg.policy.ActionOnIssue.TO_RECYCLE_BIN": {"tf": 1}}, "df": 1}, "2": {"0": {"2": {"3": {"0": {"9": {"0": {"5": {"docs": {"etl.tests.utils_test.TEST_DATE": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"etl.pkg.workflows.Base.start_date": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"etl.pkg.policy.ActionOnIssue.SKIP": {"tf": 1}}, "df": 1}, "3": {"docs": {"etl.pkg.policy.ActionOnIssue.IGNORE": {"tf": 1}}, "df": 1}, "4": {"docs": {"etl.pkg.policy.ActionOnIssue.CREATE": {"tf": 1}}, "df": 1}, "9": {"docs": {"etl.pkg.workflows.Base.start_date": {"tf": 1}}, "df": 1}, "docs": {"etl.pkg.config.DEFAULT_ENV_PREFIX": {"tf": 1.4142135623730951}, "etl.pkg.config.DEFAULT_CONTEXT_ENV": {"tf": 1.4142135623730951}, "etl.pkg.config.SUPPORTED_CONTEXTS": {"tf": 2.449489742783178}, "etl.pkg.config.DEFAULT_CONTEXT": {"tf": 1.4142135623730951}, "etl.pkg.config.DEFAULTS_SETTINGS": {"tf": 1.4142135623730951}, "etl.pkg.config.DEFAULT_SETTING_ROOT_PATH_ENV": {"tf": 1.4142135623730951}, "etl.pkg.config.DEFAULT_SETTING_ROOT_PATH": {"tf": 1.4142135623730951}, "etl.pkg.config.DEFAULT_SETTING_CONTEXT_FOLDER": {"tf": 1.4142135623730951}, "etl.pkg.config.DEFAULT_SETTING_CONFIG_NAME": {"tf": 1.4142135623730951}, "etl.pkg.config.Registry.context_var": {"tf": 1.4142135623730951}, "etl.pkg.config.Registry.root_var": {"tf": 1.4142135623730951}, "etl.pkg.config.Registry.env_prefix": {"tf": 1.4142135623730951}, "etl.pkg.config.Registry.config_context_folder": {"tf": 1.4142135623730951}, "etl.pkg.config.Registry.config_name": {"tf": 1.4142135623730951}, "etl.pkg.config.Registry.context_folder": {"tf": 1.4142135623730951}, "etl.pkg.config.Registry.defaults": {"tf": 1.4142135623730951}, "etl.pkg.config.Registry.root": {"tf": 1.4142135623730951}, "etl.pkg.config.Registry.context": {"tf": 1.4142135623730951}, "etl.pkg.config.Registry.preload_defaults": {"tf": 1.4142135623730951}, "etl.pkg.config.Registry.settings_files": {"tf": 1.4142135623730951}, "etl.pkg.config.Registry.include_files": {"tf": 1.4142135623730951}, "etl.pkg.config.Registry.secret_suffix": {"tf": 1.4142135623730951}, "etl.pkg.config.Registry.config_ext": {"tf": 1.4142135623730951}, "etl.pkg.io.ISO_DATE_PREFIX": {"tf": 1.4142135623730951}, "etl.pkg.io.BAD_FOLDER": {"tf": 1.4142135623730951}, "etl.pkg.io.ARCHIVE_FOLDER": {"tf": 1.4142135623730951}, "etl.pkg.io.RECYCLABLE_FOLDER": {"tf": 1.4142135623730951}, "etl.pkg.io.REPORT_FOLDER": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolver.date_pattern": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolver.name_prefix": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolver.bad_path": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolver.archive_path": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolver.recyclable_path": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolver.report_path": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolverIterator.date_pattern": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolverIterator.name_prefix": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolverIterator.bad_path": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolverIterator.archive_path": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolverIterator.recyclable_path": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolverIterator.report_path": {"tf": 1.4142135623730951}, "etl.pkg.policy.ActionOnIssue.FAIL": {"tf": 1.4142135623730951}, "etl.pkg.policy.ActionOnIssue.TO_RECYCLE_BIN": {"tf": 1.4142135623730951}, "etl.pkg.policy.ActionOnIssue.SKIP": {"tf": 1.4142135623730951}, "etl.pkg.policy.ActionOnIssue.IGNORE": {"tf": 1.4142135623730951}, "etl.pkg.policy.ActionOnIssue.CREATE": {"tf": 1.4142135623730951}, "etl.pkg.workflows.Base.start_date": {"tf": 1}, "etl.pkg.workflows.Base.policy_resolver": {"tf": 3.3166247903554}, "etl.sample_generic_etl.FIELDS_WITH_EXTERNAL_IDENTIFIERS": {"tf": 1.7320508075688772}, "etl.sample_generic_etl.FIELDS_WITH_TAXONOMIES": {"tf": 2}, "etl.sample_generic_etl.FIELDS_WITH_VALIDATION": {"tf": 1}, "etl.sample_generic_etl.CSV_SCHEMA": {"tf": 1.4142135623730951}, "etl.tests.utils_test.FIXTURE_PREFIX": {"tf": 1.4142135623730951}, "etl.tests.utils_test.TEST_DATE": {"tf": 1.4142135623730951}}, "df": 53, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.components.interface.ResultWithReport": {"tf": 1}, "etl.pkg.validators.SeriesValidator": {"tf": 1}}, "df": 2}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "k": {"docs": {"etl.pkg.components.interface.ResultWithReport": {"tf": 1}}, "df": 1}}}}}}}}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.config.SUPPORTED_CONTEXTS": {"tf": 2.23606797749979}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.tests.utils_test.FIXTURE_PREFIX": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.config.SUPPORTED_CONTEXTS": {"tf": 1.4142135623730951}, "etl.pkg.config.DEFAULT_CONTEXT": {"tf": 1}}, "df": 2}}}}}}, "o": {"docs": {"etl.pkg.policy.ActionOnIssue.TO_RECYCLE_BIN": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "o": {"1": {"docs": {"etl.sample_generic_etl.FIELDS_WITH_TAXONOMIES": {"tf": 1}, "etl.sample_generic_etl.CSV_SCHEMA": {"tf": 1}}, "df": 2}, "2": {"docs": {"etl.sample_generic_etl.FIELDS_WITH_TAXONOMIES": {"tf": 1}, "etl.sample_generic_etl.CSV_SCHEMA": {"tf": 1}}, "df": 2}, "docs": {"etl.sample_generic_etl.FIELDS_WITH_TAXONOMIES": {"tf": 1.4142135623730951}}, "df": 1, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.workflows.Base.policy_resolver": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "d": {"docs": {"etl.pkg.config.DEFAULT_SETTING_CONTEXT_FOLDER": {"tf": 1}, "etl.pkg.config.Registry.config_context_folder": {"tf": 1}, "etl.pkg.config.Registry.context_folder": {"tf": 1}}, "df": 3, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.interface.ResultWithReport": {"tf": 2}, "etl.pkg.validators.SeriesValidator": {"tf": 1.7320508075688772}}, "df": 2}}}}}}, "e": {"docs": {"etl.pkg.workflows.Base.start_date": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.workflows.Base.start_date": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "k": {"docs": {"etl.pkg.components.interface.ResultWithReport": {"tf": 1}, "etl.pkg.validators.SeriesValidator": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "v": {"docs": {"etl.pkg.config.SUPPORTED_CONTEXTS": {"tf": 1}}, "df": 1}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.config.DEFAULTS_SETTINGS": {"tf": 1}, "etl.pkg.config.Registry.defaults": {"tf": 1}}, "df": 2}}}}}}, "{": {"2": {"docs": {"etl.pkg.io.ISO_DATE_PREFIX": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolver.date_pattern": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolverIterator.date_pattern": {"tf": 1.4142135623730951}}, "df": 3}, "4": {"docs": {"etl.pkg.io.ISO_DATE_PREFIX": {"tf": 1}, "etl.pkg.io.FileResolver.date_pattern": {"tf": 1}, "etl.pkg.io.FileResolverIterator.date_pattern": {"tf": 1}}, "df": 3}, "docs": {}, "df": 0}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.workflows.Base.policy_resolver": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.interface.ResultWithReport": {"tf": 1.4142135623730951}, "etl.pkg.validators.SeriesValidator": {"tf": 1.4142135623730951}}, "df": 2}}, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.config.DEFAULT_SETTING_ROOT_PATH_ENV": {"tf": 1}, "etl.pkg.config.DEFAULT_SETTING_CONTEXT_FOLDER": {"tf": 1}, "etl.pkg.config.DEFAULT_SETTING_CONFIG_NAME": {"tf": 1}, "etl.pkg.config.Registry.root_var": {"tf": 1}, "etl.pkg.config.Registry.config_context_folder": {"tf": 1}, "etl.pkg.config.Registry.config_name": {"tf": 1}, "etl.pkg.config.Registry.context_folder": {"tf": 1}}, "df": 7}}}}}, "i": {"docs": {"etl.pkg.config.SUPPORTED_CONTEXTS": {"tf": 1}}, "df": 1}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.config.Registry.preload_defaults": {"tf": 1}, "etl.pkg.config.Registry.settings_files": {"tf": 1}, "etl.pkg.config.Registry.include_files": {"tf": 1}, "etl.pkg.config.Registry.config_ext": {"tf": 1}}, "df": 4}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.policy.ActionOnIssue.CREATE": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "k": {"docs": {"etl.pkg.validators.SeriesValidator": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "x": {"2": {"7": {"docs": {"etl.pkg.config.DEFAULT_ENV_PREFIX": {"tf": 1.4142135623730951}, "etl.pkg.config.DEFAULT_CONTEXT_ENV": {"tf": 1.4142135623730951}, "etl.pkg.config.SUPPORTED_CONTEXTS": {"tf": 3.1622776601683795}, "etl.pkg.config.DEFAULT_CONTEXT": {"tf": 1.4142135623730951}, "etl.pkg.config.DEFAULTS_SETTINGS": {"tf": 1.4142135623730951}, "etl.pkg.config.DEFAULT_SETTING_ROOT_PATH_ENV": {"tf": 1.4142135623730951}, "etl.pkg.config.DEFAULT_SETTING_ROOT_PATH": {"tf": 1.4142135623730951}, "etl.pkg.config.DEFAULT_SETTING_CONTEXT_FOLDER": {"tf": 1.4142135623730951}, "etl.pkg.config.DEFAULT_SETTING_CONFIG_NAME": {"tf": 1.4142135623730951}, "etl.pkg.config.Registry.context_var": {"tf": 1.4142135623730951}, "etl.pkg.config.Registry.root_var": {"tf": 1.4142135623730951}, "etl.pkg.config.Registry.env_prefix": {"tf": 1.4142135623730951}, "etl.pkg.config.Registry.config_context_folder": {"tf": 1.4142135623730951}, "etl.pkg.config.Registry.config_name": {"tf": 1.4142135623730951}, "etl.pkg.config.Registry.context_folder": {"tf": 1.4142135623730951}, "etl.pkg.config.Registry.defaults": {"tf": 1.4142135623730951}, "etl.pkg.config.Registry.root": {"tf": 1.4142135623730951}, "etl.pkg.config.Registry.context": {"tf": 1.4142135623730951}, "etl.pkg.config.Registry.preload_defaults": {"tf": 1.4142135623730951}, "etl.pkg.config.Registry.settings_files": {"tf": 1.4142135623730951}, "etl.pkg.config.Registry.include_files": {"tf": 1.4142135623730951}, "etl.pkg.config.Registry.secret_suffix": {"tf": 1.4142135623730951}, "etl.pkg.config.Registry.config_ext": {"tf": 1.4142135623730951}, "etl.pkg.io.ISO_DATE_PREFIX": {"tf": 1.4142135623730951}, "etl.pkg.io.BAD_FOLDER": {"tf": 1.4142135623730951}, "etl.pkg.io.ARCHIVE_FOLDER": {"tf": 1.4142135623730951}, "etl.pkg.io.RECYCLABLE_FOLDER": {"tf": 1.4142135623730951}, "etl.pkg.io.REPORT_FOLDER": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolver.date_pattern": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolver.name_prefix": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolver.bad_path": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolver.archive_path": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolver.recyclable_path": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolver.report_path": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolverIterator.date_pattern": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolverIterator.name_prefix": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolverIterator.bad_path": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolverIterator.archive_path": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolverIterator.recyclable_path": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolverIterator.report_path": {"tf": 1.4142135623730951}, "etl.pkg.workflows.Base.policy_resolver": {"tf": 3.4641016151377544}, "etl.sample_generic_etl.FIELDS_WITH_EXTERNAL_IDENTIFIERS": {"tf": 2}, "etl.sample_generic_etl.FIELDS_WITH_TAXONOMIES": {"tf": 2.8284271247461903}, "etl.sample_generic_etl.CSV_SCHEMA": {"tf": 3.1622776601683795}, "etl.tests.utils_test.FIXTURE_PREFIX": {"tf": 1.4142135623730951}, "etl.tests.utils_test.TEST_DATE": {"tf": 1.4142135623730951}}, "df": 46}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.config.DEFAULT_ENV_PREFIX": {"tf": 1}, "etl.pkg.config.DEFAULT_CONTEXT_ENV": {"tf": 1}, "etl.pkg.config.DEFAULT_SETTING_ROOT_PATH_ENV": {"tf": 1}, "etl.pkg.config.Registry.context_var": {"tf": 1}, "etl.pkg.config.Registry.root_var": {"tf": 1}, "etl.pkg.config.Registry.env_prefix": {"tf": 1}}, "df": 6}}, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.io.ARCHIVE_FOLDER": {"tf": 1}, "etl.pkg.io.FileResolver.archive_path": {"tf": 1}, "etl.pkg.io.FileResolverIterator.archive_path": {"tf": 1}}, "df": 3}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.policy.ActionOnIssue.FAIL": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.TO_RECYCLE_BIN": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.SKIP": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.IGNORE": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.CREATE": {"tf": 1}, "etl.pkg.workflows.Base.policy_resolver": {"tf": 1.7320508075688772}}, "df": 6}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.workflows.Base.policy_resolver": {"tf": 1.7320508075688772}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "v": {"docs": {"etl.pkg.config.DEFAULT_CONTEXT_ENV": {"tf": 1}, "etl.pkg.config.Registry.context_var": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.config.SUPPORTED_CONTEXTS": {"tf": 1}}, "df": 1}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.config.SUPPORTED_CONTEXTS": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"etl.pkg.config.DEFAULT_SETTING_ROOT_PATH_ENV": {"tf": 1}, "etl.pkg.config.Registry.root_var": {"tf": 1}}, "df": 2}}, "y": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"1": {"docs": {"etl.sample_generic_etl.CSV_SCHEMA": {"tf": 1}}, "df": 1}, "2": {"docs": {"etl.sample_generic_etl.CSV_SCHEMA": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.workflows.Base.policy_resolver": {"tf": 1.4142135623730951}}, "df": 1, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.workflows.Base.policy_resolver": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.config.SUPPORTED_CONTEXTS": {"tf": 1}, "etl.pkg.config.DEFAULT_CONTEXT": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {"etl.pkg.config.Registry.preload_defaults": {"tf": 1}, "etl.pkg.config.Registry.settings_files": {"tf": 1}, "etl.pkg.config.Registry.include_files": {"tf": 1}, "etl.pkg.config.Registry.config_ext": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.FAIL": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.TO_RECYCLE_BIN": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.SKIP": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.IGNORE": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.CREATE": {"tf": 1}, "etl.pkg.workflows.Base.policy_resolver": {"tf": 1.7320508075688772}}, "df": 10}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.config.Registry.preload_defaults": {"tf": 1}, "etl.pkg.config.Registry.settings_files": {"tf": 1}, "etl.pkg.config.Registry.include_files": {"tf": 1}, "etl.pkg.config.Registry.config_ext": {"tf": 1}}, "df": 4}}}}, "g": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.config.Registry.preload_defaults": {"tf": 1}, "etl.pkg.config.Registry.settings_files": {"tf": 1}, "etl.pkg.config.Registry.include_files": {"tf": 1}, "etl.pkg.config.Registry.config_ext": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.FAIL": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.TO_RECYCLE_BIN": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.SKIP": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.IGNORE": {"tf": 1}, "etl.pkg.policy.ActionOnIssue.CREATE": {"tf": 1}, "etl.pkg.workflows.Base.policy_resolver": {"tf": 1.7320508075688772}}, "df": 10}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.config.Registry.secret_suffix": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"etl.sample_generic_etl.FIELDS_WITH_EXTERNAL_IDENTIFIERS": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.validators.SeriesValidator": {"tf": 1}}, "df": 1}}}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.policy.ActionOnIssue.SKIP": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.io.BAD_FOLDER": {"tf": 1}, "etl.pkg.io.FileResolver.bad_path": {"tf": 1}, "etl.pkg.io.FileResolverIterator.bad_path": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.policy.ActionOnIssue.TO_RECYCLE_BIN": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.io.RECYCLABLE_FOLDER": {"tf": 1}, "etl.pkg.io.FileResolver.recyclable_path": {"tf": 1}, "etl.pkg.io.FileResolverIterator.recyclable_path": {"tf": 1}}, "df": 3}}}}, "e": {"docs": {"etl.pkg.policy.ActionOnIssue.TO_RECYCLE_BIN": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.io.REPORT_FOLDER": {"tf": 1}, "etl.pkg.io.FileResolver.report_path": {"tf": 1}, "etl.pkg.io.FileResolverIterator.report_path": {"tf": 1}}, "df": 3}}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.io.FileResolver.file_name": {"tf": 1}, "etl.pkg.io.FileResolver.start_date": {"tf": 1}, "etl.pkg.io.FileResolverIterator.dir_name": {"tf": 1}, "etl.pkg.io.FileResolverIterator.radix_pattern": {"tf": 1}, "etl.pkg.io.FileResolverIterator.input_files": {"tf": 1}, "etl.pkg.io.FileResolverIterator.start_date": {"tf": 1}, "etl.pkg.workflows.Base.end_date": {"tf": 1}}, "df": 7}}, "t": {"docs": {"etl.pkg.workflows.Base.policy_resolver": {"tf": 2.449489742783178}}, "df": 1}}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.io.FileResolverIterator.recurse": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.policy.ActionOnIssue.FAIL": {"tf": 1}, "etl.pkg.workflows.Base.policy_resolver": {"tf": 1.7320508075688772}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.workflows.Base.policy_resolver": {"tf": 1.7320508075688772}}, "df": 1}}}, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"etl.tests.utils_test.FIXTURE_PREFIX": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.policy.ActionOnIssue.IGNORE": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {"etl.pkg.workflows.Base.policy_resolver": {"tf": 2.449489742783178}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {"etl.sample_generic_etl.FIELDS_WITH_EXTERNAL_IDENTIFIERS": {"tf": 1}}, "df": 1}}}, "d": {"docs": {"etl.sample_generic_etl.FIELDS_WITH_EXTERNAL_IDENTIFIERS": {"tf": 1}, "etl.sample_generic_etl.CSV_SCHEMA": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.workflows.Base.policy_resolver": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.workflows.Base.policy_resolver": {"tf": 2.449489742783178}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.workflows.Base.policy_resolver": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.workflows.Base.policy_resolver": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"1": {"docs": {"etl.sample_generic_etl.FIELDS_WITH_TAXONOMIES": {"tf": 1}}, "df": 1}, "2": {"docs": {"etl.sample_generic_etl.FIELDS_WITH_TAXONOMIES": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}}}}}}, "signature": {"root": {"0": {"docs": {"etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.quantile": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}, "etl.pkg.workflows.Base.__init__": {"tf": 1.7320508075688772}, "etl.pkg.workflows.Generic.__init__": {"tf": 1.7320508075688772}}, "df": 33}, "1": {"3": {"docs": {"etl.pkg.workflows.Base.__init__": {"tf": 1}, "etl.pkg.workflows.Generic.__init__": {"tf": 1}}, "df": 2}, "docs": {"etl.pkg.dataframe.Series.unique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}}, "df": 3}, "2": {"0": {"2": {"3": {"docs": {"etl.pkg.workflows.Base.__init__": {"tf": 1}, "etl.pkg.workflows.Generic.__init__": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"etl.pkg.io.FileResolver.__init__": {"tf": 2}, "etl.pkg.io.FileResolverIterator.__init__": {"tf": 1.4142135623730951}}, "df": 2}, "3": {"9": {"docs": {"etl.pkg.components.checkers.ContentChecker.__init__": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.join": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.map": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 2}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.from_dict": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.quantile": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.median": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.map": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.between": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.align": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_bag": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.apply": {"tf": 2}, "etl.pkg.dataframe.Series.corr": {"tf": 1.4142135623730951}, "etl.pkg.flags.ArgumentParser.__init__": {"tf": 3.1622776601683795}, "etl.pkg.io.FileResolver.__init__": {"tf": 3.7416573867739413}, "etl.pkg.io.FileResolverIterator.__init__": {"tf": 3.4641016151377544}, "etl.pkg.validators.minmax_validator": {"tf": 1.4142135623730951}, "etl.pkg.validators.date_validator": {"tf": 1.4142135623730951}, "etl.pkg.workflows.Base.__init__": {"tf": 3.4641016151377544}, "etl.pkg.workflows.Generic.__init__": {"tf": 3.4641016151377544}, "etl.tests.utils_test.create_test_file": {"tf": 1.4142135623730951}}, "df": 59}, "docs": {}, "df": 0}, "4": {"docs": {"etl.pkg.io.FileResolver.__init__": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolverIterator.__init__": {"tf": 1}}, "df": 2}, "5": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.quantile": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}}, "df": 8}, "9": {"docs": {"etl.pkg.workflows.Base.__init__": {"tf": 1}, "etl.pkg.workflows.Generic.__init__": {"tf": 1}}, "df": 2}, "docs": {"etl.pkg.components.checkers.SchemaChecker.__init__": {"tf": 4.898979485566356}, "etl.pkg.components.checkers.SchemaChecker.pipe": {"tf": 8.660254037844387}, "etl.pkg.components.checkers.ContentChecker.__init__": {"tf": 7.745966692414834}, "etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 8.660254037844387}, "etl.pkg.components.historian.HistoryBuilder.pipe": {"tf": 3.1622776601683795}, "etl.pkg.components.identifiers.Identifier.pipe": {"tf": 3.1622776601683795}, "etl.pkg.components.interface.Executable.execute": {"tf": 5.477225575051661}, "etl.pkg.components.interface.Pipable.pipe": {"tf": 8.660254037844387}, "etl.pkg.components.interface.NopPipe.pipe": {"tf": 8.660254037844387}, "etl.pkg.components.mappers.TaxonomyMapper.pipe": {"tf": 3.1622776601683795}, "etl.pkg.components.mappers.TaxonomyMapper.check_taxonomies": {"tf": 3.1622776601683795}, "etl.pkg.components.mappers.EntityMapper.pipe": {"tf": 3.1622776601683795}, "etl.pkg.components.mappers.EntityMapper.map_remainder": {"tf": 3.1622776601683795}, "etl.pkg.components.mappers.EntityMapper.map_target_entities": {"tf": 3.1622776601683795}, "etl.pkg.components.recycler.output_recyclable_file": {"tf": 4.242640687119285}, "etl.pkg.config.Registry.load": {"tf": 4.898979485566356}, "etl.pkg.config.Registry.get": {"tf": 5.291502622129181}, "etl.pkg.config.Registry.dump": {"tf": 3.4641016151377544}, "etl.pkg.database.DBJob.execute": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.__init__": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.get_dtype_counts": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.get_ftype_counts": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 5.0990195135927845}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 11.704699910719626}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 10.63014581273465}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 5.830951894845301}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 5.830951894845301}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 7.937253933193772}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 6.324555320336759}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 4}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 5.0990195135927845}, "etl.pkg.dataframe.DataFrame.query": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 5.291502622129181}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 6.164414002968976}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 5.830951894845301}, "etl.pkg.dataframe.DataFrame.clip_lower": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.clip_upper": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 6}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 5.291502622129181}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 5.0990195135927845}, "etl.pkg.dataframe.DataFrame.to_orc": {"tf": 5.0990195135927845}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 6.6332495807108}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 11.489125293076057}, "etl.pkg.dataframe.DataFrame.join": {"tf": 8.717797887081348}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 5.291502622129181}, "etl.pkg.dataframe.DataFrame.items": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 9.486832980505138}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 4.898979485566356}, "etl.pkg.dataframe.DataFrame.map": {"tf": 4.898979485566356}, "etl.pkg.dataframe.DataFrame.round": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 5.830951894845301}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 5.830951894845301}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 6.324555320336759}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 7.14142842854285}, "etl.pkg.dataframe.DataFrame.info": {"tf": 5.830951894845301}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 5.0990195135927845}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 6.6332495807108}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 7.615773105863909}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 5.0990195135927845}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.from_dict": {"tf": 7.483314773547883}, "etl.pkg.dataframe.DataFrame.add": {"tf": 6.324555320336759}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 6.324555320336759}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 6.324555320336759}, "etl.pkg.dataframe.DataFrame.div": {"tf": 6.324555320336759}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 6.324555320336759}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 6.324555320336759}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 6.324555320336759}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 6.324555320336759}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 6.324555320336759}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 6.324555320336759}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 6.324555320336759}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 6.324555320336759}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 6.324555320336759}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 6.324555320336759}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 6.324555320336759}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 6.324555320336759}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 6.324555320336759}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 5.656854249492381}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 5.656854249492381}, "etl.pkg.dataframe.DataFrame.le": {"tf": 5.656854249492381}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 5.656854249492381}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 5.656854249492381}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 5.656854249492381}, "etl.pkg.dataframe.Series.dt": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.cat": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.str": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.rename": {"tf": 5.830951894845301}, "etl.pkg.dataframe.Series.round": {"tf": 4.242640687119285}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 6}, "etl.pkg.dataframe.Series.quantile": {"tf": 5.291502622129181}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 4.47213595499958}, "etl.pkg.dataframe.Series.median": {"tf": 4.47213595499958}, "etl.pkg.dataframe.Series.groupby": {"tf": 7.937253933193772}, "etl.pkg.dataframe.Series.count": {"tf": 4.242640687119285}, "etl.pkg.dataframe.Series.mode": {"tf": 5.0990195135927845}, "etl.pkg.dataframe.Series.explode": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.unique": {"tf": 5.0990195135927845}, "etl.pkg.dataframe.Series.nunique": {"tf": 5.0990195135927845}, "etl.pkg.dataframe.Series.value_counts": {"tf": 8.06225774829855}, "etl.pkg.dataframe.Series.nlargest": {"tf": 5.0990195135927845}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 5.0990195135927845}, "etl.pkg.dataframe.Series.isin": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.Series.map": {"tf": 5.656854249492381}, "etl.pkg.dataframe.Series.dropna": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.between": {"tf": 5.291502622129181}, "etl.pkg.dataframe.Series.clip": {"tf": 5.830951894845301}, "etl.pkg.dataframe.Series.clip_lower": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.Series.clip_upper": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.Series.align": {"tf": 6.324555320336759}, "etl.pkg.dataframe.Series.combine": {"tf": 5.0990195135927845}, "etl.pkg.dataframe.Series.squeeze": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.combine_first": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.Series.to_bag": {"tf": 5.291502622129181}, "etl.pkg.dataframe.Series.to_frame": {"tf": 4.242640687119285}, "etl.pkg.dataframe.Series.to_string": {"tf": 4.242640687119285}, "etl.pkg.dataframe.Series.apply": {"tf": 7.483314773547883}, "etl.pkg.dataframe.Series.cov": {"tf": 5.477225575051661}, "etl.pkg.dataframe.Series.corr": {"tf": 6.324555320336759}, "etl.pkg.dataframe.Series.autocorr": {"tf": 5.0990195135927845}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 5.0990195135927845}, "etl.pkg.dataframe.Series.view": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.Series.add": {"tf": 6.164414002968976}, "etl.pkg.dataframe.Series.sub": {"tf": 6.164414002968976}, "etl.pkg.dataframe.Series.mul": {"tf": 6.164414002968976}, "etl.pkg.dataframe.Series.div": {"tf": 6.164414002968976}, "etl.pkg.dataframe.Series.divide": {"tf": 6.164414002968976}, "etl.pkg.dataframe.Series.truediv": {"tf": 6.164414002968976}, "etl.pkg.dataframe.Series.floordiv": {"tf": 6.164414002968976}, "etl.pkg.dataframe.Series.mod": {"tf": 6.164414002968976}, "etl.pkg.dataframe.Series.pow": {"tf": 6.164414002968976}, "etl.pkg.dataframe.Series.radd": {"tf": 6.164414002968976}, "etl.pkg.dataframe.Series.rsub": {"tf": 6.164414002968976}, "etl.pkg.dataframe.Series.rmul": {"tf": 6.164414002968976}, "etl.pkg.dataframe.Series.rdiv": {"tf": 6.164414002968976}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 6.164414002968976}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 6.164414002968976}, "etl.pkg.dataframe.Series.rmod": {"tf": 6.164414002968976}, "etl.pkg.dataframe.Series.rpow": {"tf": 6.164414002968976}, "etl.pkg.dataframe.Series.lt": {"tf": 6.164414002968976}, "etl.pkg.dataframe.Series.gt": {"tf": 6.164414002968976}, "etl.pkg.dataframe.Series.le": {"tf": 6.164414002968976}, "etl.pkg.dataframe.Series.ge": {"tf": 6.164414002968976}, "etl.pkg.dataframe.Series.ne": {"tf": 6.164414002968976}, "etl.pkg.dataframe.Series.eq": {"tf": 6.164414002968976}, "etl.pkg.flags.Namespace.__init__": {"tf": 3.1622776601683795}, "etl.pkg.flags.ArgumentParser.__init__": {"tf": 7.681145747868608}, "etl.pkg.flags.ArgumentParser.parse_args": {"tf": 6.708203932499369}, "etl.pkg.flags.iso_date": {"tf": 4.47213595499958}, "etl.pkg.io.FileResolver.__init__": {"tf": 14.66287829861518}, "etl.pkg.io.FileResolver.get_file_name": {"tf": 3.4641016151377544}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 3.4641016151377544}, "etl.pkg.io.FileResolver.output_report": {"tf": 4}, "etl.pkg.io.FileResolver.output_recyclable": {"tf": 4}, "etl.pkg.io.FileResolver.move_to_archive": {"tf": 4}, "etl.pkg.io.FileResolver.move_to_bad": {"tf": 4}, "etl.pkg.io.file_resolver_context": {"tf": 8.18535277187245}, "etl.pkg.io.FileResolverIterator.__init__": {"tf": 15.588457268119896}, "etl.pkg.policy.Policy.__init__": {"tf": 6}, "etl.pkg.policy.Policy.action_on_invalid_field": {"tf": 5.656854249492381}, "etl.pkg.policy.PolicyResolver.__init__": {"tf": 4.898979485566356}, "etl.pkg.policy.PolicyResolver.tolerates_data_issues": {"tf": 3.4641016151377544}, "etl.pkg.policy.strict": {"tf": 4.58257569495584}, "etl.pkg.policy.skip": {"tf": 4.58257569495584}, "etl.pkg.policy.from_config": {"tf": 6.4031242374328485}, "etl.pkg.resolvers.FieldResolver.get_mnemonic": {"tf": 4.47213595499958}, "etl.pkg.resolvers.FieldResolver.get_id": {"tf": 4.69041575982343}, "etl.pkg.runtime.Runtime.__init__": {"tf": 7.54983443527075}, "etl.pkg.runtime.Runtime.start": {"tf": 4.898979485566356}, "etl.pkg.runtime.Runtime.stop": {"tf": 3.4641016151377544}, "etl.pkg.runtime.Runtime.get_config": {"tf": 4.898979485566356}, "etl.pkg.runtime.Runtime.get_logger": {"tf": 3.4641016151377544}, "etl.pkg.runtime.Runtime.get_target_db_connection": {"tf": 3.4641016151377544}, "etl.pkg.runtime.context": {"tf": 6.708203932499369}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 7.483314773547883}, "etl.pkg.validators.regexp_validator": {"tf": 7.874007874011811}, "etl.pkg.validators.na_validator": {"tf": 6.557438524302}, "etl.pkg.validators.minmax_validator": {"tf": 8.774964387392123}, "etl.pkg.validators.date_validator": {"tf": 8}, "etl.pkg.workflows.Base.__init__": {"tf": 19.79898987322333}, "etl.pkg.workflows.Base.execute": {"tf": 5.477225575051661}, "etl.pkg.workflows.Generic.__init__": {"tf": 20.273134932713294}, "etl.pkg.workflows.Generic.read_csv": {"tf": 6.164414002968976}, "etl.pkg.workflows.Generic.execute": {"tf": 5.477225575051661}, "etl.pkg.workflows.Generic.did_produce_recyclable": {"tf": 3.4641016151377544}, "etl.sample_generic_etl.execute": {"tf": 4.47213595499958}, "etl.sample_generic_etl.main": {"tf": 3}, "etl.tests.flags_test.TestArgumentParser.parser": {"tf": 4.898979485566356}, "etl.tests.flags_test.TestArgumentParser.test_happy_path": {"tf": 3.1622776601683795}, "etl.tests.flags_test.TestArgumentParser.test_happy_with_files": {"tf": 3.1622776601683795}, "etl.tests.flags_test.TestArgumentParser.test_invalid_args": {"tf": 3.1622776601683795}, "etl.tests.flags_test.TestArgumentParser.test_invalid_start_date": {"tf": 3.1622776601683795}, "etl.tests.flags_test.TestArgumentParser.test_valid_end_date": {"tf": 3.1622776601683795}, "etl.tests.flags_test.TestArgumentParser.test_valid_standalone_end_date": {"tf": 3.1622776601683795}, "etl.tests.flags_test.TestArgumentParser.test_invalid_end_date": {"tf": 3.1622776601683795}, "etl.tests.flags_test.TestArgumentParser.test_invalid_no_input": {"tf": 3.1622776601683795}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_not_existing": {"tf": 3.1622776601683795}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_is_a_dir": {"tf": 3.1622776601683795}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_existing": {"tf": 3.1622776601683795}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_folder": {"tf": 3.1622776601683795}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_archive": {"tf": 3.1622776601683795}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_bad": {"tf": 3.1622776601683795}, "etl.tests.io_test.TestFileResolver.test_ouput_report": {"tf": 3.1622776601683795}, "etl.tests.io_test.TestFileResolver.test_ouput_recyclable": {"tf": 3.1622776601683795}, "etl.tests.io_test.TestFileResolver.test_override_start_date": {"tf": 3.1622776601683795}, "etl.tests.io_test.TestFileResolver.test_guard_constructor": {"tf": 3.1622776601683795}, "etl.tests.io_test.TestFileResolver.test_date_extraction_no_date": {"tf": 3.1622776601683795}, "etl.tests.io_test.TestFileResolver.test_date_extraction_invalid_date": {"tf": 3.1622776601683795}, "etl.tests.io_test.TestFileResolver.test_date_extraction_many_dates": {"tf": 3.1622776601683795}, "etl.tests.io_test.TestFileResolverIterator.test_iterator_from_dir": {"tf": 3.1622776601683795}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_success": {"tf": 3.1622776601683795}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_failure": {"tf": 3.1622776601683795}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_other_failure": {"tf": 3.1622776601683795}, "etl.tests.utils_test.create_test_file": {"tf": 6.324555320336759}}, "df": 219, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {"etl.pkg.components.checkers.SchemaChecker.__init__": {"tf": 1}, "etl.pkg.workflows.Base.__init__": {"tf": 1}, "etl.pkg.workflows.Generic.__init__": {"tf": 1.4142135623730951}}, "df": 3, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.components.checkers.SchemaChecker.__init__": {"tf": 1}, "etl.pkg.workflows.Base.__init__": {"tf": 1}, "etl.pkg.workflows.Generic.__init__": {"tf": 1}}, "df": 3}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "f": {"docs": {"etl.pkg.components.checkers.SchemaChecker.pipe": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}, "etl.pkg.components.interface.Executable.execute": {"tf": 1}, "etl.pkg.components.interface.Pipable.pipe": {"tf": 1}, "etl.pkg.components.interface.NopPipe.pipe": {"tf": 1}, "etl.pkg.config.Registry.load": {"tf": 1}, "etl.pkg.config.Registry.get": {"tf": 1}, "etl.pkg.config.Registry.dump": {"tf": 1}, "etl.pkg.database.DBJob.execute": {"tf": 1}, "etl.pkg.dataframe.DataFrame.get_dtype_counts": {"tf": 1}, "etl.pkg.dataframe.DataFrame.get_ftype_counts": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip_lower": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip_upper": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_orc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.map": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.info": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.quantile": {"tf": 1}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.unique": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.clip_lower": {"tf": 1}, "etl.pkg.dataframe.Series.clip_upper": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.to_bag": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}, "etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1}, "etl.pkg.io.FileResolver.get_file_name": {"tf": 1}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 1}, "etl.pkg.io.FileResolver.output_report": {"tf": 1}, "etl.pkg.io.FileResolver.output_recyclable": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_archive": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_bad": {"tf": 1}, "etl.pkg.policy.Policy.action_on_invalid_field": {"tf": 1}, "etl.pkg.policy.PolicyResolver.tolerates_data_issues": {"tf": 1}, "etl.pkg.resolvers.FieldResolver.get_mnemonic": {"tf": 1}, "etl.pkg.resolvers.FieldResolver.get_id": {"tf": 1}, "etl.pkg.runtime.Runtime.start": {"tf": 1}, "etl.pkg.runtime.Runtime.stop": {"tf": 1}, "etl.pkg.runtime.Runtime.get_config": {"tf": 1}, "etl.pkg.runtime.Runtime.get_logger": {"tf": 1}, "etl.pkg.runtime.Runtime.get_target_db_connection": {"tf": 1}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1}, "etl.pkg.workflows.Base.execute": {"tf": 1}, "etl.pkg.workflows.Generic.read_csv": {"tf": 1}, "etl.pkg.workflows.Generic.execute": {"tf": 1}, "etl.pkg.workflows.Generic.did_produce_recyclable": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.parser": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_happy_path": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_happy_with_files": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_args": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_start_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_valid_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_valid_standalone_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_no_input": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_not_existing": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_is_a_dir": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_existing": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_folder": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_archive": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_bad": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_report": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_recyclable": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_override_start_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_guard_constructor": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_no_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_invalid_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_many_dates": {"tf": 1}, "etl.tests.io_test.TestFileResolverIterator.test_iterator_from_dir": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_success": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_failure": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_other_failure": {"tf": 1}}, "df": 181}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1}, "etl.pkg.validators.regexp_validator": {"tf": 1}, "etl.pkg.validators.na_validator": {"tf": 1}, "etl.pkg.validators.minmax_validator": {"tf": 1}, "etl.pkg.validators.date_validator": {"tf": 1}}, "df": 6}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.components.recycler.output_recyclable_file": {"tf": 1}, "etl.pkg.config.Registry.get": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}, "etl.pkg.flags.iso_date": {"tf": 1}, "etl.pkg.io.FileResolver.__init__": {"tf": 2.6457513110645907}, "etl.pkg.io.FileResolver.get_file_name": {"tf": 1}, "etl.pkg.io.FileResolverIterator.__init__": {"tf": 3}, "etl.pkg.policy.Policy.action_on_invalid_field": {"tf": 1}, "etl.pkg.resolvers.FieldResolver.get_mnemonic": {"tf": 1.4142135623730951}, "etl.pkg.resolvers.FieldResolver.get_id": {"tf": 1}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1}, "etl.pkg.validators.minmax_validator": {"tf": 1}, "etl.pkg.workflows.Generic.read_csv": {"tf": 1}, "etl.tests.utils_test.create_test_file": {"tf": 2}}, "df": 16}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}, "etl.pkg.io.FileResolver.__init__": {"tf": 1}, "etl.pkg.io.FileResolverIterator.__init__": {"tf": 1}, "etl.pkg.workflows.Base.__init__": {"tf": 1}, "etl.pkg.workflows.Generic.__init__": {"tf": 1}}, "df": 7}}}}, "o": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}}, "df": 1, "r": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}}, "df": 2}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.unique": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}}, "df": 17}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}}, "df": 1}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}}, "df": 1}}}}}}}, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}}, "df": 2}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.io.FileResolver.__init__": {"tf": 1.4142135623730951}, "etl.pkg.validators.regexp_validator": {"tf": 1}}, "df": 2, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.components.checkers.SchemaChecker.__init__": {"tf": 1}, "etl.pkg.io.file_resolver_context": {"tf": 1}, "etl.pkg.workflows.Base.__init__": {"tf": 2}, "etl.pkg.workflows.Generic.__init__": {"tf": 2}}, "df": 4, "s": {"docs": {"etl.pkg.components.checkers.SchemaChecker.__init__": {"tf": 1}, "etl.pkg.workflows.Base.__init__": {"tf": 1.7320508075688772}, "etl.pkg.workflows.Generic.__init__": {"tf": 1.7320508075688772}}, "df": 3}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.runtime.Runtime.__init__": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.apply": {"tf": 1}}, "df": 1}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.config.Registry.load": {"tf": 1}, "etl.pkg.policy.from_config": {"tf": 1}, "etl.pkg.runtime.Runtime.__init__": {"tf": 1}, "etl.pkg.runtime.Runtime.get_config": {"tf": 1}}, "df": 4}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.io.FileResolver.__init__": {"tf": 1}, "etl.pkg.validators.regexp_validator": {"tf": 1}}, "df": 2}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.apply": {"tf": 1}}, "df": 1}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.io.FileResolver.__init__": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolverIterator.__init__": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.io.FileResolverIterator.__init__": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.io.FileResolver.__init__": {"tf": 1}, "etl.pkg.io.FileResolverIterator.__init__": {"tf": 1}}, "df": 2, "s": {"docs": {"etl.pkg.io.FileResolver.__init__": {"tf": 1}, "etl.pkg.io.FileResolverIterator.__init__": {"tf": 1}}, "df": 2}}}}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}}, "df": 3}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.drop": {"tf": 1}}, "df": 1}}}, "w": {"docs": {"etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.workflows.Base.__init__": {"tf": 1}, "etl.pkg.workflows.Generic.__init__": {"tf": 1}}, "df": 3}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"etl.pkg.io.FileResolverIterator.__init__": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.between": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.io.file_resolver_context": {"tf": 1.7320508075688772}, "etl.pkg.runtime.Runtime.start": {"tf": 1.4142135623730951}, "etl.pkg.runtime.context": {"tf": 2.23606797749979}, "etl.pkg.workflows.Base.__init__": {"tf": 1.7320508075688772}, "etl.pkg.workflows.Generic.__init__": {"tf": 1.7320508075688772}}, "df": 5}}}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.components.checkers.SchemaChecker.__init__": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.__init__": {"tf": 1}, "etl.pkg.config.Registry.load": {"tf": 1}, "etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}, "etl.pkg.io.file_resolver_context": {"tf": 1.7320508075688772}, "etl.pkg.policy.Policy.__init__": {"tf": 1}, "etl.pkg.policy.Policy.action_on_invalid_field": {"tf": 1}, "etl.pkg.policy.PolicyResolver.__init__": {"tf": 1}, "etl.pkg.policy.strict": {"tf": 1}, "etl.pkg.policy.skip": {"tf": 1}, "etl.pkg.policy.from_config": {"tf": 1.4142135623730951}, "etl.pkg.runtime.Runtime.__init__": {"tf": 1}, "etl.pkg.runtime.Runtime.start": {"tf": 1}, "etl.pkg.runtime.Runtime.get_config": {"tf": 1}, "etl.pkg.runtime.context": {"tf": 1.4142135623730951}, "etl.pkg.workflows.Base.__init__": {"tf": 2.449489742783178}, "etl.pkg.workflows.Generic.__init__": {"tf": 4.242640687119285}, "etl.tests.flags_test.TestArgumentParser.parser": {"tf": 1}}, "df": 18}}, "x": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}}, "df": 2}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.unique": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}}, "df": 17}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.drop": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}, "etl.pkg.workflows.Base.__init__": {"tf": 1}, "etl.pkg.workflows.Generic.__init__": {"tf": 1}}, "df": 3}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.workflows.Generic.__init__": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.components.checkers.SchemaChecker.__init__": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.__init__": {"tf": 1}, "etl.pkg.config.Registry.load": {"tf": 1}, "etl.pkg.io.file_resolver_context": {"tf": 1.7320508075688772}, "etl.pkg.policy.Policy.__init__": {"tf": 1}, "etl.pkg.policy.Policy.action_on_invalid_field": {"tf": 1}, "etl.pkg.policy.PolicyResolver.__init__": {"tf": 1}, "etl.pkg.policy.strict": {"tf": 1}, "etl.pkg.policy.skip": {"tf": 1}, "etl.pkg.policy.from_config": {"tf": 1.4142135623730951}, "etl.pkg.runtime.Runtime.__init__": {"tf": 1}, "etl.pkg.runtime.Runtime.start": {"tf": 1}, "etl.pkg.runtime.Runtime.get_config": {"tf": 1}, "etl.pkg.runtime.context": {"tf": 1.4142135623730951}, "etl.pkg.workflows.Base.__init__": {"tf": 2.449489742783178}, "etl.pkg.workflows.Generic.__init__": {"tf": 4.242640687119285}, "etl.tests.flags_test.TestArgumentParser.parser": {"tf": 1}}, "df": 17}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.components.checkers.ContentChecker.__init__": {"tf": 1.7320508075688772}, "etl.pkg.policy.Policy.__init__": {"tf": 1}, "etl.pkg.policy.Policy.action_on_invalid_field": {"tf": 1}, "etl.pkg.policy.PolicyResolver.__init__": {"tf": 1.7320508075688772}, "etl.pkg.policy.strict": {"tf": 1.4142135623730951}, "etl.pkg.policy.skip": {"tf": 1.4142135623730951}, "etl.pkg.policy.from_config": {"tf": 1.4142135623730951}, "etl.pkg.workflows.Base.__init__": {"tf": 2}, "etl.pkg.workflows.Generic.__init__": {"tf": 2}}, "df": 9, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.policy.Policy.__init__": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.workflows.Base.__init__": {"tf": 1.4142135623730951}, "etl.pkg.workflows.Generic.__init__": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}}, "df": 1}}}}}}}, "d": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_orc": {"tf": 1}, "etl.pkg.io.FileResolver.__init__": {"tf": 2}, "etl.pkg.io.FileResolver.output_report": {"tf": 1}, "etl.pkg.io.FileResolver.output_recyclable": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_archive": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_bad": {"tf": 1}, "etl.pkg.io.FileResolverIterator.__init__": {"tf": 2}}, "df": 8, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {"etl.pkg.io.FileResolver.output_report": {"tf": 1}, "etl.pkg.io.FileResolver.output_recyclable": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_archive": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_bad": {"tf": 1}}, "df": 4}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.io.FileResolver.__init__": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolverIterator.__init__": {"tf": 1.4142135623730951}, "etl.pkg.validators.regexp_validator": {"tf": 1}}, "df": 3}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}}, "df": 4}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}}, "df": 2}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"etl.pkg.io.FileResolver.__init__": {"tf": 1}, "etl.pkg.io.FileResolverIterator.__init__": {"tf": 1}, "etl.tests.utils_test.create_test_file": {"tf": 1}}, "df": 3}}}}}, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.workflows.Generic.__init__": {"tf": 2.449489742783178}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.components.checkers.SchemaChecker.pipe": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}, "etl.pkg.components.interface.Pipable.pipe": {"tf": 1}, "etl.pkg.components.interface.NopPipe.pipe": {"tf": 1}, "etl.pkg.flags.ArgumentParser.__init__": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolverIterator.__init__": {"tf": 1}}, "df": 6}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}}, "df": 3}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.validators.minmax_validator": {"tf": 1}}, "df": 2}}}}}}}, "t": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.resolvers.FieldResolver.get_id": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.workflows.Generic.__init__": {"tf": 3.4641016151377544}}, "df": 1}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_bag": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}}, "df": 11}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}}, "df": 1}}}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"etl.pkg.dataframe.DataFrame.pop": {"tf": 1}}, "df": 1}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.io.file_resolver_context": {"tf": 1}, "etl.pkg.io.FileResolverIterator.__init__": {"tf": 2}, "etl.pkg.runtime.context": {"tf": 1}}, "df": 3}}}}}}}, "d": {"docs": {"etl.pkg.dataframe.DataFrame.melt": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.workflows.Base.__init__": {"tf": 1}, "etl.pkg.workflows.Generic.__init__": {"tf": 1.4142135623730951}}, "df": 2, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.workflows.Base.__init__": {"tf": 1}, "etl.pkg.workflows.Generic.__init__": {"tf": 1}}, "df": 2}}}}}}}}}, "d": {"docs": {"etl.pkg.workflows.Base.__init__": {"tf": 1.4142135623730951}, "etl.pkg.workflows.Generic.__init__": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}, "s": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}, "etl.pkg.workflows.Base.__init__": {"tf": 2.449489742783178}, "etl.pkg.workflows.Generic.__init__": {"tf": 2.449489742783178}}, "df": 3}, "f": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}}, "df": 1}, "o": {"docs": {"etl.pkg.io.file_resolver_context": {"tf": 1.4142135623730951}}, "df": 1}}, "d": {"docs": {"etl.pkg.io.FileResolver.__init__": {"tf": 2.449489742783178}, "etl.pkg.io.FileResolverIterator.__init__": {"tf": 1.7320508075688772}, "etl.pkg.validators.date_validator": {"tf": 1}}, "df": 3, "f": {"docs": {"etl.pkg.components.checkers.SchemaChecker.pipe": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}, "etl.pkg.components.interface.Pipable.pipe": {"tf": 1}, "etl.pkg.components.interface.NopPipe.pipe": {"tf": 1}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}}, "df": 5}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "k": {"docs": {"etl.pkg.components.checkers.SchemaChecker.pipe": {"tf": 1.7320508075688772}, "etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1.7320508075688772}, "etl.pkg.components.interface.Executable.execute": {"tf": 1}, "etl.pkg.components.interface.Pipable.pipe": {"tf": 1.7320508075688772}, "etl.pkg.components.interface.NopPipe.pipe": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1.4142135623730951}, "etl.pkg.validators.regexp_validator": {"tf": 1.4142135623730951}, "etl.pkg.validators.na_validator": {"tf": 1.4142135623730951}, "etl.pkg.validators.minmax_validator": {"tf": 1.4142135623730951}, "etl.pkg.validators.date_validator": {"tf": 1.4142135623730951}, "etl.pkg.workflows.Base.__init__": {"tf": 1}, "etl.pkg.workflows.Base.execute": {"tf": 1}, "etl.pkg.workflows.Generic.__init__": {"tf": 1}, "etl.pkg.workflows.Generic.read_csv": {"tf": 1}, "etl.pkg.workflows.Generic.execute": {"tf": 1}}, "df": 16}}, "t": {"docs": {}, "df": 0, "a": {"docs": {"etl.pkg.dataframe.DataFrame.from_dict": {"tf": 1}}, "df": 1, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.checkers.SchemaChecker.pipe": {"tf": 2.449489742783178}, "etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 2.449489742783178}, "etl.pkg.components.interface.Executable.execute": {"tf": 1.4142135623730951}, "etl.pkg.components.interface.Pipable.pipe": {"tf": 2.449489742783178}, "etl.pkg.components.interface.NopPipe.pipe": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 2}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1.7320508075688772}, "etl.pkg.validators.regexp_validator": {"tf": 1.7320508075688772}, "etl.pkg.validators.na_validator": {"tf": 1.7320508075688772}, "etl.pkg.validators.minmax_validator": {"tf": 1.7320508075688772}, "etl.pkg.validators.date_validator": {"tf": 1.7320508075688772}, "etl.pkg.workflows.Base.__init__": {"tf": 1.4142135623730951}, "etl.pkg.workflows.Base.execute": {"tf": 1.4142135623730951}, "etl.pkg.workflows.Generic.__init__": {"tf": 1.4142135623730951}, "etl.pkg.workflows.Generic.read_csv": {"tf": 1.4142135623730951}, "etl.pkg.workflows.Generic.execute": {"tf": 1.4142135623730951}}, "df": 16}}}}}}, "e": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 2}, "etl.pkg.flags.iso_date": {"tf": 1}, "etl.pkg.io.FileResolver.__init__": {"tf": 2}, "etl.pkg.io.FileResolverIterator.__init__": {"tf": 1.7320508075688772}, "etl.pkg.validators.date_validator": {"tf": 1}, "etl.pkg.workflows.Base.__init__": {"tf": 2.23606797749979}, "etl.pkg.workflows.Generic.__init__": {"tf": 2.23606797749979}, "etl.tests.utils_test.create_test_file": {"tf": 1}}, "df": 8, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.flags.iso_date": {"tf": 1}, "etl.pkg.io.FileResolver.__init__": {"tf": 1}, "etl.pkg.io.FileResolverIterator.__init__": {"tf": 1}, "etl.pkg.workflows.Base.__init__": {"tf": 1.7320508075688772}, "etl.pkg.workflows.Generic.__init__": {"tf": 1.7320508075688772}}, "df": 5}}}}}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.config.Registry.get": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.map": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.Series.quantile": {"tf": 1}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1.4142135623730951}}, "df": 12}}}}}, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}}, "df": 2}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}, "s": {"docs": {}, "df": 0, "k": {"docs": {"etl.pkg.dataframe.DataFrame.__init__": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.__init__": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 2}}}}}}}, "r": {"docs": {"etl.pkg.io.FileResolverIterator.__init__": {"tf": 1}, "etl.tests.utils_test.create_test_file": {"tf": 1}}, "df": 2}, "c": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.policy.Policy.__init__": {"tf": 1}, "etl.pkg.workflows.Base.__init__": {"tf": 1}, "etl.pkg.workflows.Generic.__init__": {"tf": 1}}, "df": 3}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1, "n": {"docs": {}, "df": 0, "a": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}}, "df": 7}}}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.from_dict": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1}}, "df": 3}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.checkers.SchemaChecker.pipe": {"tf": 1.7320508075688772}, "etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1.7320508075688772}, "etl.pkg.components.interface.Executable.execute": {"tf": 1}, "etl.pkg.components.interface.Pipable.pipe": {"tf": 1.7320508075688772}, "etl.pkg.components.interface.NopPipe.pipe": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1.4142135623730951}, "etl.pkg.validators.regexp_validator": {"tf": 1.4142135623730951}, "etl.pkg.validators.na_validator": {"tf": 1.4142135623730951}, "etl.pkg.validators.minmax_validator": {"tf": 1.4142135623730951}, "etl.pkg.validators.date_validator": {"tf": 1.4142135623730951}, "etl.pkg.workflows.Base.__init__": {"tf": 1}, "etl.pkg.workflows.Base.execute": {"tf": 1}, "etl.pkg.workflows.Generic.__init__": {"tf": 1}, "etl.pkg.workflows.Generic.read_csv": {"tf": 1}, "etl.pkg.workflows.Generic.execute": {"tf": 1}}, "df": 16}}, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.config.Registry.load": {"tf": 1}, "etl.pkg.policy.from_config": {"tf": 1}, "etl.pkg.runtime.Runtime.__init__": {"tf": 1.4142135623730951}, "etl.pkg.runtime.Runtime.get_config": {"tf": 1}}, "df": 4}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.workflows.Generic.__init__": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {"etl.pkg.dataframe.DataFrame.melt": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.policy.Policy.action_on_invalid_field": {"tf": 1}}, "df": 2, "s": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1}, "etl.pkg.dataframe.DataFrame.from_dict": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}}, "df": 30}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.io.FileResolver.__init__": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.workflows.Generic.__init__": {"tf": 3.4641016151377544}}, "df": 1}}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1}, "etl.pkg.validators.regexp_validator": {"tf": 1}, "etl.pkg.validators.na_validator": {"tf": 1}, "etl.pkg.validators.minmax_validator": {"tf": 1}, "etl.pkg.validators.date_validator": {"tf": 1}}, "df": 5, "[": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}}, "df": 1}}}}}}}}}}, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.from_dict": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.workflows.Generic.__init__": {"tf": 2.449489742783178}}, "df": 1}}}}, "f": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.policy.from_config": {"tf": 1}}, "df": 1}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.workflows.Generic.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "k": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.components.checkers.SchemaChecker.pipe": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}, "etl.pkg.components.interface.Executable.execute": {"tf": 1}, "etl.pkg.components.interface.Pipable.pipe": {"tf": 1}, "etl.pkg.components.interface.NopPipe.pipe": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_orc": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.flags.Namespace.__init__": {"tf": 1}, "etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}, "etl.pkg.validators.regexp_validator": {"tf": 1}, "etl.pkg.validators.date_validator": {"tf": 1}, "etl.pkg.workflows.Base.execute": {"tf": 1}, "etl.pkg.workflows.Generic.read_csv": {"tf": 1}, "etl.pkg.workflows.Generic.execute": {"tf": 1}}, "df": 22}}}}, "d": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.config.Registry.get": {"tf": 1}}, "df": 1, "s": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.checkers.SchemaChecker.pipe": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}, "etl.pkg.components.interface.Pipable.pipe": {"tf": 1}, "etl.pkg.components.interface.NopPipe.pipe": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.Series.to_bag": {"tf": 1}}, "df": 6}}}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}}, "df": 11}}}, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {"etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}}, "df": 1, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.clip_lower": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip_upper": {"tf": 1}, "etl.pkg.dataframe.Series.clip_lower": {"tf": 1}, "etl.pkg.dataframe.Series.clip_upper": {"tf": 1}}, "df": 4}}}}}}}, "e": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 1.7320508075688772}}, "df": 1}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.apply": {"tf": 1}}, "df": 1}}}, "o": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.workflows.Base.__init__": {"tf": 1.7320508075688772}, "etl.pkg.workflows.Generic.__init__": {"tf": 2}}, "df": 2, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.workflows.Base.__init__": {"tf": 1}, "etl.pkg.workflows.Generic.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {"etl.tests.utils_test.create_test_file": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.tests.utils_test.create_test_file": {"tf": 1.4142135623730951}}, "df": 1}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.resolvers.FieldResolver.get_mnemonic": {"tf": 1}, "etl.pkg.resolvers.FieldResolver.get_id": {"tf": 1}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1}, "etl.pkg.workflows.Base.__init__": {"tf": 1.7320508075688772}, "etl.pkg.workflows.Generic.__init__": {"tf": 1.7320508075688772}}, "df": 5, "s": {"docs": {"etl.pkg.components.checkers.ContentChecker.__init__": {"tf": 1}, "etl.pkg.workflows.Base.__init__": {"tf": 1}, "etl.pkg.workflows.Generic.__init__": {"tf": 1}}, "df": 3, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.workflows.Base.__init__": {"tf": 1}, "etl.pkg.workflows.Generic.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.components.checkers.ContentChecker.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}, "etl.pkg.io.FileResolver.__init__": {"tf": 1}, "etl.pkg.io.FileResolverIterator.__init__": {"tf": 1}}, "df": 3, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.recycler.output_recyclable_file": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}, "etl.pkg.io.FileResolverIterator.__init__": {"tf": 1}}, "df": 2}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.io.file_resolver_context": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}, "l": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 42}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}}, "df": 1}}}, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"etl.tests.utils_test.create_test_file": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.components.checkers.ContentChecker.__init__": {"tf": 1.4142135623730951}, "etl.pkg.policy.Policy.__init__": {"tf": 1}, "etl.pkg.workflows.Base.__init__": {"tf": 2}, "etl.pkg.workflows.Generic.__init__": {"tf": 2}}, "df": 4}}}}}, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.info": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_bag": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.io.FileResolverIterator.__init__": {"tf": 1}}, "df": 21}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.workflows.Base.__init__": {"tf": 1.7320508075688772}, "etl.pkg.workflows.Generic.__init__": {"tf": 1.7320508075688772}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.map": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 5, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {"etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}}, "df": 2}}, "o": {"docs": {}, "df": 0, "m": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.Series.to_bag": {"tf": 1}, "etl.pkg.validators.date_validator": {"tf": 1}}, "df": 3}}}}, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"etl.tests.flags_test.TestArgumentParser.parser": {"tf": 1}}, "df": 1}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.workflows.Base.__init__": {"tf": 1.4142135623730951}, "etl.pkg.workflows.Generic.__init__": {"tf": 1.4142135623730951}}, "df": 2, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.components.checkers.ContentChecker.__init__": {"tf": 1}, "etl.pkg.workflows.Base.__init__": {"tf": 1}, "etl.pkg.workflows.Generic.__init__": {"tf": 1}}, "df": 3, "s": {"docs": {"etl.pkg.components.checkers.ContentChecker.__init__": {"tf": 1}, "etl.pkg.workflows.Base.__init__": {"tf": 1}, "etl.pkg.workflows.Generic.__init__": {"tf": 1}}, "df": 3}}}}}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.melt": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 43, "s": {"docs": {"etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {"etl.pkg.dataframe.DataFrame.melt": {"tf": 1}}, "df": 1, "s": {"docs": {"etl.pkg.dataframe.DataFrame.melt": {"tf": 1.4142135623730951}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.info": {"tf": 1}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.components.checkers.ContentChecker.__init__": {"tf": 1.4142135623730951}, "etl.pkg.policy.Policy.__init__": {"tf": 1}, "etl.pkg.workflows.Base.__init__": {"tf": 2.6457513110645907}, "etl.pkg.workflows.Generic.__init__": {"tf": 3.605551275463989}}, "df": 4}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.io.FileResolverIterator.__init__": {"tf": 1}}, "df": 1, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 2}}}}}, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1.4142135623730951}}, "df": 1}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.drop": {"tf": 1}}, "df": 1}}}}, "g": {"docs": {"etl.pkg.dataframe.Series.autocorr": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}}, "df": 2}}}, "g": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.runtime.Runtime.__init__": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1}}, "df": 3}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 47}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_records": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 1}}, "df": 1}}}}}}}, "g": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.components.checkers.ContentChecker.__init__": {"tf": 1.4142135623730951}, "etl.pkg.policy.Policy.__init__": {"tf": 1}, "etl.pkg.workflows.Base.__init__": {"tf": 2.6457513110645907}, "etl.pkg.workflows.Generic.__init__": {"tf": 3.605551275463989}}, "df": 4}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 2}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.components.historian.HistoryBuilder.pipe": {"tf": 1}, "etl.pkg.components.identifiers.Identifier.pipe": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper.pipe": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper.check_taxonomies": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.pipe": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.map_remainder": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.map_target_entities": {"tf": 1}, "etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}}, "df": 10}}}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.info": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"etl.pkg.workflows.Generic.read_csv": {"tf": 1}}, "df": 1}}}}}}}, "n": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.flags.ArgumentParser.__init__": {"tf": 2.23606797749979}}, "df": 5, "o": {"docs": {"etl.pkg.dataframe.DataFrame.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.map": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1.4142135623730951}}, "df": 8, "n": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.recycler.output_recyclable_file": {"tf": 1}, "etl.pkg.config.Registry.dump": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 2}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 2}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.info": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1}, "etl.pkg.dataframe.DataFrame.from_dict": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 2}, "etl.pkg.dataframe.Series.unique": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.align": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rpow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.lt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.gt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.le": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.ge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.ne": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.eq": {"tf": 1.4142135623730951}, "etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolver.__init__": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 1}, "etl.pkg.io.FileResolverIterator.__init__": {"tf": 2.449489742783178}, "etl.pkg.runtime.Runtime.__init__": {"tf": 1.4142135623730951}, "etl.pkg.runtime.Runtime.stop": {"tf": 1}, "etl.pkg.workflows.Base.__init__": {"tf": 1.4142135623730951}, "etl.pkg.workflows.Generic.__init__": {"tf": 1.4142135623730951}, "etl.sample_generic_etl.execute": {"tf": 1}, "etl.sample_generic_etl.main": {"tf": 1}}, "df": 97}}, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.Series.value_counts": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}, "etl.pkg.workflows.Base.__init__": {"tf": 2.449489742783178}, "etl.pkg.workflows.Generic.__init__": {"tf": 2.449489742783178}}, "df": 3}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.workflows.Generic.__init__": {"tf": 2.449489742783178}}, "df": 1}}}}}}, "a": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}}, "df": 2, "m": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.__init__": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.io.FileResolver.__init__": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolverIterator.__init__": {"tf": 1.4142135623730951}, "etl.pkg.policy.Policy.action_on_invalid_field": {"tf": 1}}, "df": 7, "s": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}}, "df": 1, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1.7320508075688772}, "etl.sample_generic_etl.execute": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.from_dict": {"tf": 1}}, "df": 5}}}}}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}}, "df": 3}}}}}}, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}}, "df": 1, "n": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.config.Registry.get": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.runtime.Runtime.__init__": {"tf": 1.4142135623730951}, "etl.pkg.runtime.Runtime.get_logger": {"tf": 1}, "etl.pkg.runtime.Runtime.get_target_db_connection": {"tf": 1}, "etl.pkg.validators.minmax_validator": {"tf": 1.4142135623730951}, "etl.pkg.workflows.Base.__init__": {"tf": 1.7320508075688772}, "etl.pkg.workflows.Generic.__init__": {"tf": 1.7320508075688772}}, "df": 8}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}}, "df": 2}}}}}}}}, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 53}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.flags.iso_date": {"tf": 1}}, "df": 2, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_orc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1}, "etl.sample_generic_etl.execute": {"tf": 1}}, "df": 6}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1.4142135623730951}, "etl.sample_generic_etl.execute": {"tf": 1}}, "df": 2}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.tests.flags_test.TestArgumentParser.parser": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.io.FileResolver.__init__": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolverIterator.__init__": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "g": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.Series.map": {"tf": 1}}, "df": 1, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.policy.Policy.action_on_invalid_field": {"tf": 1}, "etl.pkg.workflows.Base.__init__": {"tf": 1.7320508075688772}, "etl.pkg.workflows.Generic.__init__": {"tf": 1.7320508075688772}}, "df": 3}}}}}}}}}}}}, "t": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}}, "df": 1}, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}}, "df": 1}}}}}}}}}, "m": {"docs": {"etl.pkg.validators.date_validator": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"etl.pkg.dataframe.DataFrame.__init__": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.map": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 6}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.Series.quantile": {"tf": 1}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}}, "df": 5}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.info": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.workflows.Base.__init__": {"tf": 1.4142135623730951}, "etl.pkg.workflows.Generic.__init__": {"tf": 1.4142135623730951}}, "df": 2}, "r": {"docs": {"etl.pkg.workflows.Generic.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}}, "x": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"etl.pkg.validators.minmax_validator": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}}, "df": 4, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"etl.pkg.validators.minmax_validator": {"tf": 1}}, "df": 1}}}}}}}, "b": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 3}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.7320508075688772}, "etl.pkg.io.FileResolverIterator.__init__": {"tf": 1}, "etl.pkg.policy.PolicyResolver.tolerates_data_issues": {"tf": 1}, "etl.pkg.workflows.Generic.did_produce_recyclable": {"tf": 1}}, "df": 5}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.validators.minmax_validator": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}}, "df": 2}}}}}}}}, "u": {"docs": {}, "df": 0, "f": {"docs": {"etl.pkg.dataframe.DataFrame.info": {"tf": 1}}, "df": 1}, "t": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.workflows.Generic.__init__": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}}, "df": 1, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.io.FileResolver.__init__": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolverIterator.__init__": {"tf": 1.4142135623730951}}, "df": 2}}}, "q": {"docs": {"etl.pkg.dataframe.Series.quantile": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 2}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.flags.ArgumentParser.__init__": {"tf": 1.4142135623730951}}, "df": 3}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 53}}}}, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 2}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.Series.unique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.Series.align": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}}, "df": 2, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}}, "df": 3}}, "e": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}}, "df": 1}}, "r": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.from_dict": {"tf": 1}}, "df": 1}}}}}, "f": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}}, "df": 1}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}}, "df": 5}}, "a": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.workflows.Generic.__init__": {"tf": 1}}, "df": 1}}}}}}}, "x": {"2": {"7": {"docs": {"etl.pkg.workflows.Generic.__init__": {"tf": 3.4641016151377544}}, "df": 1}, "docs": {}, "df": 0}, "docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}}, "df": 1}, "y": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.validators.date_validator": {"tf": 1}}, "df": 2, "o": {"docs": {}, "df": 0, "u": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}}, "df": 1}}}, "j": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.Series.align": {"tf": 1}}, "df": 1}}, "b": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}}, "df": 1}}}, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.flags.ArgumentParser.__init__": {"tf": 1}, "etl.pkg.workflows.Base.__init__": {"tf": 2.449489742783178}, "etl.pkg.workflows.Generic.__init__": {"tf": 2.449489742783178}}, "df": 3}}}}}}, "bases": {"root": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.components.checkers.SchemaChecker": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker": {"tf": 1}, "etl.pkg.components.historian.HistoryBuilder": {"tf": 1}, "etl.pkg.components.identifiers.Identifier": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper": {"tf": 1}, "etl.pkg.workflows.Base": {"tf": 1}}, "df": 7}}, "x": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.exceptions.InvalidFileError": {"tf": 1}, "etl.pkg.exceptions.InvalidDataError": {"tf": 1}, "etl.pkg.exceptions.RuntimeEtlError": {"tf": 1}, "etl.pkg.exceptions.IOEtlError": {"tf": 1}, "etl.pkg.exceptions.DevMistakeError": {"tf": 1}, "etl.pkg.exceptions.ConfigError": {"tf": 1}, "etl.pkg.exceptions.FlagsError": {"tf": 1}}, "df": 7}}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.workflows.Base": {"tf": 1}}, "df": 1}}}}}}}}}, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"etl.pkg.policy.ActionOnIssue": {"tf": 1.4142135623730951}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.components.checkers.SchemaChecker": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker": {"tf": 1}, "etl.pkg.components.historian.HistoryBuilder": {"tf": 1}, "etl.pkg.components.identifiers.Identifier": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper": {"tf": 1}, "etl.pkg.io.FileResolverIterator": {"tf": 1}, "etl.pkg.workflows.Base": {"tf": 1}}, "df": 8}}, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.checkers.SchemaChecker": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker": {"tf": 1}, "etl.pkg.components.historian.HistoryBuilder": {"tf": 1}, "etl.pkg.components.identifiers.Identifier": {"tf": 1}, "etl.pkg.components.interface.NopPipe": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper": {"tf": 1}}, "df": 7}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.components.checkers.SchemaChecker": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker": {"tf": 1}, "etl.pkg.components.historian.HistoryBuilder": {"tf": 1}, "etl.pkg.components.identifiers.Identifier": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper": {"tf": 1}, "etl.pkg.workflows.Base": {"tf": 1}}, "df": 7}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.validators.FieldsValidator": {"tf": 1.4142135623730951}}, "df": 3}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "k": {"docs": {"etl.pkg.validators.FieldsValidator": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.tests.flags_test.TestArgumentParser": {"tf": 1}, "etl.tests.io_test.TestFileResolver": {"tf": 1}, "etl.tests.io_test.TestFileResolverIterator": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext": {"tf": 1}}, "df": 4}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.checkers.SchemaChecker": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker": {"tf": 1}, "etl.pkg.components.historian.HistoryBuilder": {"tf": 1}, "etl.pkg.components.identifiers.Identifier": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper": {"tf": 1}, "etl.pkg.workflows.Base": {"tf": 1}}, "df": 7}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.io.FileResolverIterator": {"tf": 1}}, "df": 1}}}}}}}}}}}, "o": {"docs": {"etl.pkg.io.FileResolverIterator": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "c": {"docs": {"etl.pkg.components.interface.Executable": {"tf": 1.4142135623730951}, "etl.pkg.components.interface.Pipable": {"tf": 1.4142135623730951}}, "df": 2}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.flags.Namespace": {"tf": 1}, "etl.pkg.flags.ArgumentParser": {"tf": 1}}, "df": 2}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.flags.ArgumentParser": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.flags.Namespace": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.exceptions.InvalidFileError": {"tf": 1}, "etl.pkg.exceptions.InvalidDataError": {"tf": 1}, "etl.pkg.exceptions.RuntimeEtlError": {"tf": 1}, "etl.pkg.exceptions.IOEtlError": {"tf": 1}, "etl.pkg.exceptions.DevMistakeError": {"tf": 1}, "etl.pkg.exceptions.ConfigError": {"tf": 1}, "etl.pkg.exceptions.FlagsError": {"tf": 1}, "etl.pkg.policy.PolicyDict": {"tf": 1}}, "df": 9}}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.workflows.Generic": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.policy.PolicyDict": {"tf": 1}}, "df": 2, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.resolvers.FieldResolver": {"tf": 1}, "etl.pkg.resolvers.IdentifierResolver": {"tf": 1}, "etl.pkg.resolvers.TaxonomyResolver": {"tf": 1}, "etl.pkg.resolvers.SchemaResolver": {"tf": 1}, "etl.pkg.validators.FieldsValidator": {"tf": 1}}, "df": 5}}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "k": {"docs": {"etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.validators.FieldsValidator": {"tf": 1}}, "df": 3}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.validators.FieldsValidator": {"tf": 1.7320508075688772}}, "df": 3}}}}}}}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.exceptions.UndeclaredFieldError": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.io.FileResolverIterator": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.io.FileResolverIterator": {"tf": 1}, "etl.pkg.resolvers.FieldResolver": {"tf": 1}, "etl.pkg.resolvers.IdentifierResolver": {"tf": 1}, "etl.pkg.resolvers.TaxonomyResolver": {"tf": 1}, "etl.pkg.resolvers.SchemaResolver": {"tf": 1}, "etl.pkg.validators.FieldsValidator": {"tf": 1.4142135623730951}}, "df": 6}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.tests.flags_test.TestArgumentParser": {"tf": 1}, "etl.tests.io_test.TestFileResolver": {"tf": 1}, "etl.tests.io_test.TestFileResolverIterator": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext": {"tf": 1}}, "df": 4}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.resolvers.FieldResolver": {"tf": 1}, "etl.pkg.resolvers.IdentifierResolver": {"tf": 1}, "etl.pkg.resolvers.TaxonomyResolver": {"tf": 1}, "etl.pkg.resolvers.SchemaResolver": {"tf": 1}}, "df": 4}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.validators.FieldsValidator": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.tests.flags_test.TestArgumentParser": {"tf": 1}, "etl.tests.io_test.TestFileResolver": {"tf": 1}, "etl.tests.io_test.TestFileResolverIterator": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext": {"tf": 1}}, "df": 4}}}}}}}}}}, "doc": {"root": {"0": {"0": {"0": {"0": {"0": {"0": {"docs": {"etl.pkg.dataframe.DataFrame.applymap": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "2": {"7": {"1": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}}, "df": 1}, "1": {"4": {"8": {"6": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "8": {"5": {"4": {"3": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "9": {"4": {"3": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "9": {"8": {"2": {"6": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "1": {"0": {"6": {"7": {"0": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "3": {"6": {"9": {"2": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "4": {"1": {"4": {"4": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "6": {"8": {"5": {"7": {"6": {"2": {"6": {"5": {"2": {"7": {"1": {"5": {"8": {"7": {"4": {"docs": {"etl.pkg.dataframe.Series.cov": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 3.4641016151377544}}, "df": 4}, "2": {"0": {"1": {"6": {"1": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "4": {"7": {"3": {"8": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "7": {"7": {"7": {"8": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.4142135623730951}}, "df": 17}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}, "3": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1.4142135623730951}}, "df": 2}, "4": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 2.449489742783178}}, "df": 2}, "5": {"5": {"5": {"5": {"6": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}}, "df": 17}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "9": {"2": {"7": {"7": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "3": {"5": {"2": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}}, "df": 2}, "6": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}, "7": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.7320508075688772}}, "df": 1, "f": {"0": {"6": {"0": {"7": {"5": {"docs": {"etl.pkg.dataframe.DataFrame.shape": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "docs": {"etl.pkg.dataframe.DataFrame.iloc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 5.0990195135927845}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 3}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 6.855654600401044}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 3}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 4.795831523312719}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 8.246211251235321}, "etl.pkg.dataframe.DataFrame.join": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.round": {"tf": 6.928203230275509}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 2}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 5.0990195135927845}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 6}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.add": {"tf": 7.211102550927978}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 7.211102550927978}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 7.211102550927978}, "etl.pkg.dataframe.DataFrame.div": {"tf": 7.211102550927978}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 7.211102550927978}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 7.211102550927978}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 7.211102550927978}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 7.211102550927978}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 7.211102550927978}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 7.211102550927978}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 7.211102550927978}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 7.211102550927978}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 7.211102550927978}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 7.211102550927978}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 7.211102550927978}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 7.211102550927978}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 7.211102550927978}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.round": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.quantile": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.median": {"tf": 2}, "etl.pkg.dataframe.Series.groupby": {"tf": 6.082762530298219}, "etl.pkg.dataframe.Series.count": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.explode": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 4.795831523312719}, "etl.pkg.dataframe.Series.isin": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.map": {"tf": 2}, "etl.pkg.dataframe.Series.dropna": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.between": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.clip": {"tf": 4.795831523312719}, "etl.pkg.dataframe.Series.align": {"tf": 6.782329983125268}, "etl.pkg.dataframe.Series.combine": {"tf": 4.123105625617661}, "etl.pkg.dataframe.Series.squeeze": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.combine_first": {"tf": 3}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.corr": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.autocorr": {"tf": 3}, "etl.pkg.dataframe.Series.view": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.add": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.sub": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.Series.mul": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.Series.div": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.divide": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.truediv": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.floordiv": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.mod": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.pow": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.Series.radd": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.rsub": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.Series.rmul": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.Series.rdiv": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.rmod": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.rpow": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.Series.lt": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.Series.gt": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.Series.le": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.Series.ge": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.Series.ne": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.eq": {"tf": 2.6457513110645907}}, "df": 98, "a": {"docs": {"etl.pkg.dataframe.DataFrame.squeeze": {"tf": 2}, "etl.pkg.dataframe.Series.squeeze": {"tf": 2}}, "df": 2}, "+": {"0": {"docs": {"etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 2.23606797749979}}, "df": 1}, "docs": {}, "df": 0}, "j": {"docs": {"etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 2.23606797749979}}, "df": 1}, "b": {"1": {"1": {"1": {"1": {"1": {"1": {"1": {"1": {"docs": {"etl.pkg.dataframe.Series.view": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "1": {"0": {"0": {"0": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 1}, "docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 2}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 4}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 4}, "etl.pkg.dataframe.DataFrame.le": {"tf": 4}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 4}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 4}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 4}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 9}, "3": {"5": {"5": {"docs": {"etl.pkg.dataframe.Series.autocorr": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "8": {"0": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}}, "df": 17}, "docs": {}, "df": 0}, "docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.align": {"tf": 2.23606797749979}}, "df": 22}, "1": {"3": {"0": {"0": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.Series.nlargest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 4.123105625617661}}, "df": 4}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"etl.pkg.dataframe.DataFrame.eval": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 2}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1.4142135623730951}}, "df": 3}, "2": {"0": {"1": {"1": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 2}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.4142135623730951}}, "df": 2}, "docs": {}, "df": 0}, "docs": {"etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}}, "df": 1}, "1": {"2": {"8": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.4142135623730951}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "3": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.7320508075688772}}, "df": 1}, "5": {"2": {"8": {"5": {"8": {"5": {"docs": {"etl.pkg.dataframe.Series.cov": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "8": {"docs": {"etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.view": {"tf": 1.4142135623730951}}, "df": 2}, "docs": {"etl.pkg.config": {"tf": 1}, "etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}}, "df": 23}, "3": {"4": {"8": {"4": {"4": {"2": {"4": {"docs": {"etl.pkg.dataframe.Series.cov": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 2}}, "df": 1}, "4": {"4": {"docs": {"etl.pkg.dataframe.Series.memory_usage": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "5": {"0": {"8": {"1": {"2": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"etl.pkg.dataframe.DataFrame.drop": {"tf": 2}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.le": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 2.8284271247461903}}, "df": 7}, "2": {"docs": {"etl.pkg.dataframe.Series.memory_usage": {"tf": 1}}, "df": 1}, "docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 1.4142135623730951}}, "df": 1}, "6": {"0": {"docs": {"etl.pkg.dataframe.Series.combine": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1.4142135623730951}}, "df": 2}, "docs": {"etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.4142135623730951}}, "df": 18}, "7": {"0": {"3": {"6": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 2}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "5": {"docs": {"etl.pkg.dataframe.DataFrame.lt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1.4142135623730951}}, "df": 6}, "8": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.4142135623730951}}, "df": 17}, "9": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}}, "df": 17}, "docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 2.23606797749979}}, "df": 1}, "8": {"0": {"0": {"0": {"0": {"docs": {"etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 2}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 2}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 2}, "etl.pkg.dataframe.DataFrame.div": {"tf": 2}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 2}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 2}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 2}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 2}}, "df": 17}, "1": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.4142135623730951}}, "df": 17}, "2": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 2.23606797749979}}, "df": 2}, "5": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}}, "df": 2}, "6": {"4": {"docs": {"etl.pkg.dataframe.DataFrame.items": {"tf": 1.7320508075688772}}, "df": 1}, "docs": {}, "df": 0}, "docs": {"etl.pkg.dataframe.DataFrame.round": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}}, "df": 18}, "9": {"1": {"4": {"1": {"7": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "3": {"7": {"8": {"9": {"4": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.4142135623730951}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "4": {"0": {"docs": {"etl.pkg.dataframe.DataFrame.dropna": {"tf": 2.449489742783178}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"etl.pkg.config.Registry": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.iloc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 4}, "etl.pkg.dataframe.DataFrame.query": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 5.5677643628300215}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 2}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 5.477225575051661}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.join": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 4}, "etl.pkg.dataframe.DataFrame.round": {"tf": 3}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 4.58257569495584}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.add": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.div": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rename": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.round": {"tf": 2}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.quantile": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 3}, "etl.pkg.dataframe.Series.nunique": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.value_counts": {"tf": 3.872983346207417}, "etl.pkg.dataframe.Series.isin": {"tf": 3}, "etl.pkg.dataframe.Series.map": {"tf": 2}, "etl.pkg.dataframe.Series.dropna": {"tf": 3}, "etl.pkg.dataframe.Series.between": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.clip": {"tf": 4.123105625617661}, "etl.pkg.dataframe.Series.align": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.Series.squeeze": {"tf": 4.123105625617661}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 2}, "etl.pkg.dataframe.Series.cov": {"tf": 2}, "etl.pkg.dataframe.Series.corr": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.view": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.add": {"tf": 3.605551275463989}, "etl.pkg.dataframe.Series.sub": {"tf": 3.605551275463989}, "etl.pkg.dataframe.Series.mul": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.div": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.divide": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.truediv": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.floordiv": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.mod": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.pow": {"tf": 3.605551275463989}, "etl.pkg.dataframe.Series.radd": {"tf": 3.605551275463989}, "etl.pkg.dataframe.Series.rsub": {"tf": 3.605551275463989}, "etl.pkg.dataframe.Series.rmul": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.rdiv": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.rmod": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.rpow": {"tf": 3.605551275463989}, "etl.pkg.dataframe.Series.lt": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.Series.gt": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.Series.le": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.Series.ge": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.Series.ne": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.eq": {"tf": 3.1622776601683795}}, "df": 98, "h": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}, "d": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}}, "df": 3}, ":": {"1": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0, "m": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 1}}, "df": 1}}}, "2": {"0": {"0": {"docs": {"etl.pkg.dataframe.DataFrame.drop": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.combine": {"tf": 2}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}}, "df": 9}, "2": {"1": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 3.3166247903554}}, "df": 1}, "3": {"docs": {"etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 2.449489742783178}}, "df": 2}, "4": {"docs": {"etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 2.449489742783178}}, "df": 2}, "docs": {}, "df": 0}, "docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 2}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.align": {"tf": 2.23606797749979}}, "df": 7}, "1": {"0": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 2}}, "df": 2}, "docs": {"etl.pkg.dataframe.DataFrame.round": {"tf": 2}}, "df": 1}, "2": {"0": {"0": {"0": {"docs": {"etl.pkg.dataframe.DataFrame.items": {"tf": 1.7320508075688772}}, "df": 1}, "docs": {}, "df": 0}, "docs": {"etl.pkg.dataframe.DataFrame.lt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1.4142135623730951}}, "df": 6}, "5": {"docs": {"etl.pkg.dataframe.DataFrame.lt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1.4142135623730951}}, "df": 6}, "docs": {}, "df": 0}, "3": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 1}}, "df": 1}, "4": {"4": {"docs": {"etl.pkg.dataframe.Series.memory_usage": {"tf": 1}}, "df": 1}, "8": {"0": {"0": {"3": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"etl.pkg.dataframe.DataFrame.pop": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}}, "df": 3}, "5": {"0": {"docs": {"etl.pkg.dataframe.DataFrame.drop": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.le": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 3.7416573867739413}}, "df": 7}, "4": {"docs": {"etl.pkg.dataframe.Series.view": {"tf": 1}}, "df": 1}, "5": {"docs": {"etl.pkg.dataframe.Series.view": {"tf": 1.4142135623730951}}, "df": 1}, "8": {"3": {"5": {"6": {"0": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.4142135623730951}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}}, "df": 5}, "6": {"2": {"7": {"3": {"6": {"docs": {"etl.pkg.dataframe.DataFrame.applymap": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "9": {"6": {"2": {"4": {"6": {"3": {"docs": {"etl.pkg.dataframe.Series.cov": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 2.23606797749979}}, "df": 1}, "9": {"0": {"docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 1}}, "df": 1}, "8": {"docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {"etl.pkg.components.identifiers.Identifier.pipe": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iloc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.shape": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 3.872983346207417}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.query": {"tf": 4}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 3.872983346207417}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 3}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 2}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 2}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.round": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 2}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 2}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.div": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.round": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 2}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.Series.isin": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.map": {"tf": 2}, "etl.pkg.dataframe.Series.dropna": {"tf": 3}, "etl.pkg.dataframe.Series.between": {"tf": 2}, "etl.pkg.dataframe.Series.clip": {"tf": 3.872983346207417}, "etl.pkg.dataframe.Series.align": {"tf": 3.872983346207417}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 3}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.corr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.view": {"tf": 3}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.gt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.le": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.ge": {"tf": 1.4142135623730951}}, "df": 76}, "3": {"0": {"0": {"docs": {"etl.pkg.dataframe.DataFrame.lt": {"tf": 3}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 3}, "etl.pkg.dataframe.DataFrame.le": {"tf": 3}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 3}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 3}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 3}}, "df": 6}, "docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.groupby": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.align": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.combine": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1.4142135623730951}}, "df": 6}, "1": {"1": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 2.449489742783178}}, "df": 2}, "6": {"7": {"4": {"1": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 2}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 2}}, "df": 2}, "2": {"0": {"docs": {"etl.pkg.dataframe.DataFrame.drop": {"tf": 2.23606797749979}}, "df": 1}, "docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1.4142135623730951}}, "df": 2}, "3": {"0": {"docs": {"etl.pkg.dataframe.Series.combine": {"tf": 1.4142135623730951}}, "df": 1}, "3": {"3": {"3": {"3": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}}, "df": 17}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "7": {"0": {"0": {"0": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 3}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1.7320508075688772}}, "df": 4}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}}, "df": 1}, "4": {"5": {"docs": {"etl.pkg.dataframe.Series.combine": {"tf": 2}}, "df": 1}, "docs": {}, "df": 0}, "5": {"0": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 2.6457513110645907}}, "df": 2}, "6": {"docs": {"etl.pkg.dataframe.DataFrame.applymap": {"tf": 1.4142135623730951}}, "df": 1}, "8": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 2}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 2}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 2}, "etl.pkg.dataframe.DataFrame.div": {"tf": 2}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 2}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 2}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 2}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 2}}, "df": 17}, "9": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.4142135623730951}}, "df": 17}, "docs": {}, "df": 0}, "6": {"0": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.div": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 3.4641016151377544}}, "df": 17}, "1": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 2}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 2}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 2}, "etl.pkg.dataframe.DataFrame.div": {"tf": 2}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 2}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 2}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 2}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 2}}, "df": 17}, "docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.4142135623730951}}, "df": 17}, "7": {"0": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.7320508075688772}}, "df": 2}, "5": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "8": {"0": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 2.23606797749979}}, "df": 1}, "9": {"docs": {"etl.pkg.dataframe.DataFrame.pop": {"tf": 1.7320508075688772}}, "df": 1}, "docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 2.449489742783178}}, "df": 2}, "9": {"0": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 2.23606797749979}}, "df": 2}, "docs": {"etl.pkg.dataframe.DataFrame.shape": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 4.898979485566356}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 6.928203230275509}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.query": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 2}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 4.898979485566356}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 4.69041575982343}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 2}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 6.48074069840786}, "etl.pkg.dataframe.DataFrame.join": {"tf": 9.486832980505138}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.items": {"tf": 4.69041575982343}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.round": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 2}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 4.898979485566356}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 4.898979485566356}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.add": {"tf": 8.246211251235321}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 8.246211251235321}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 8.246211251235321}, "etl.pkg.dataframe.DataFrame.div": {"tf": 8.246211251235321}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 8.246211251235321}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 8.246211251235321}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 8.246211251235321}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 8.246211251235321}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 8.246211251235321}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 8.246211251235321}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 8.246211251235321}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 8.246211251235321}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 8.246211251235321}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 8.246211251235321}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 8.246211251235321}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 8.246211251235321}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 8.246211251235321}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 7.211102550927978}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 7.211102550927978}, "etl.pkg.dataframe.DataFrame.le": {"tf": 7.211102550927978}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 7.211102550927978}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 7.211102550927978}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 7.211102550927978}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 4.898979485566356}, "etl.pkg.dataframe.Series.groupby": {"tf": 6.324555320336759}, "etl.pkg.dataframe.Series.explode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nlargest": {"tf": 2}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 2}, "etl.pkg.dataframe.Series.isin": {"tf": 5.291502622129181}, "etl.pkg.dataframe.Series.map": {"tf": 4.47213595499958}, "etl.pkg.dataframe.Series.dropna": {"tf": 2}, "etl.pkg.dataframe.Series.between": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.Series.clip": {"tf": 2}, "etl.pkg.dataframe.Series.combine": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.squeeze": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.Series.combine_first": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.apply": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 2}, "etl.pkg.dataframe.Series.view": {"tf": 2}, "etl.pkg.dataframe.Series.add": {"tf": 4}, "etl.pkg.dataframe.Series.sub": {"tf": 4}, "etl.pkg.dataframe.Series.mul": {"tf": 4}, "etl.pkg.dataframe.Series.div": {"tf": 4}, "etl.pkg.dataframe.Series.divide": {"tf": 4}, "etl.pkg.dataframe.Series.truediv": {"tf": 4}, "etl.pkg.dataframe.Series.floordiv": {"tf": 4}, "etl.pkg.dataframe.Series.mod": {"tf": 4}, "etl.pkg.dataframe.Series.pow": {"tf": 4}, "etl.pkg.dataframe.Series.radd": {"tf": 4}, "etl.pkg.dataframe.Series.rsub": {"tf": 4}, "etl.pkg.dataframe.Series.rmul": {"tf": 4}, "etl.pkg.dataframe.Series.rdiv": {"tf": 4}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 4}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 4}, "etl.pkg.dataframe.Series.rmod": {"tf": 4}, "etl.pkg.dataframe.Series.rpow": {"tf": 4}, "etl.pkg.dataframe.Series.lt": {"tf": 4.47213595499958}, "etl.pkg.dataframe.Series.gt": {"tf": 4.47213595499958}, "etl.pkg.dataframe.Series.le": {"tf": 4.47213595499958}, "etl.pkg.dataframe.Series.ge": {"tf": 4.47213595499958}, "etl.pkg.dataframe.Series.ne": {"tf": 4}, "etl.pkg.dataframe.Series.eq": {"tf": 4}}, "df": 94}, "docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 2}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 2}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.query": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 3}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 2}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.join": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 2}, "etl.pkg.dataframe.DataFrame.round": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.div": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.Series.round": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 2}, "etl.pkg.dataframe.Series.groupby": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.explode": {"tf": 3}, "etl.pkg.dataframe.Series.nunique": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.value_counts": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.nlargest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.isin": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.map": {"tf": 2}, "etl.pkg.dataframe.Series.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.between": {"tf": 2}, "etl.pkg.dataframe.Series.clip": {"tf": 4.242640687119285}, "etl.pkg.dataframe.Series.align": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.Series.squeeze": {"tf": 3}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1.7320508075688772}}, "df": 58}, "4": {"0": {"0": {"0": {"0": {"docs": {"etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 2.8284271247461903}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"etl.pkg.dataframe.Series.align": {"tf": 2.23606797749979}}, "df": 1}, "2": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}}, "df": 1}, "3": {"4": {"0": {"0": {"0": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.nlargest": {"tf": 3.872983346207417}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 2.449489742783178}}, "df": 4}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "5": {"2": {"0": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.4142135623730951}}, "df": 2}, "docs": {}, "df": 0}, "9": {"docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 1}}, "df": 1}, "docs": {"etl.pkg.dataframe.DataFrame.drop": {"tf": 2.23606797749979}}, "df": 1}, "9": {"4": {"4": {"0": {"0": {"docs": {"etl.pkg.dataframe.DataFrame.applymap": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 2}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.query": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 4}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 2}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 2}, "etl.pkg.dataframe.DataFrame.join": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.div": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 2}, "etl.pkg.dataframe.Series.explode": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.nunique": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.value_counts": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.isin": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.clip": {"tf": 4}, "etl.pkg.dataframe.Series.align": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.view": {"tf": 1.7320508075688772}}, "df": 48, "d": {"7": {"7": {"docs": {"etl.pkg.dataframe.DataFrame.shape": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "5": {"0": {"0": {"0": {"0": {"0": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}}, "df": 17}, "docs": {}, "df": 0}, "docs": {"etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 2}}, "df": 1}, "docs": {}, "df": 0}, "docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.quantile": {"tf": 1}}, "df": 2}, "1": {"1": {"1": {"1": {"1": {"9": {"8": {"docs": {"etl.pkg.dataframe.Series.cov": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "2": {"0": {"0": {"docs": {"etl.pkg.dataframe.Series.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 2.449489742783178}}, "df": 2}, "docs": {}, "df": 0}, "4": {"4": {"docs": {"etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "4": {"0": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.4142135623730951}}, "df": 17}, "docs": {}, "df": 0}, "6": {"7": {"docs": {"etl.pkg.dataframe.DataFrame.applymap": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "9": {"0": {"0": {"0": {"0": {"0": {"0": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nlargest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1.4142135623730951}}, "df": 4}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 2}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 2}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.join": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 2}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 2}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 2}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 2}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 2}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 2}, "etl.pkg.dataframe.DataFrame.div": {"tf": 2}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 2}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 2}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 2}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 2}, "etl.pkg.dataframe.Series.quantile": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.isin": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.clip": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.apply": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}}, "df": 46, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "c": {"docs": {"etl.pkg.dataframe.DataFrame.shape": {"tf": 1}}, "df": 1}}}}, "6": {"0": {"0": {"docs": {"etl.pkg.dataframe.Series.align": {"tf": 2.23606797749979}}, "df": 1}, "docs": {"etl.pkg.dataframe.Series.align": {"tf": 2.23606797749979}}, "df": 1}, "2": {"0": {"3": {"6": {"0": {"3": {"5": {"docs": {"etl.pkg.dataframe.Series.cov": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 1.7320508075688772}}, "df": 1}, "3": {"docs": {}, "df": 0, "c": {"6": {"9": {"docs": {}, "df": 0, "a": {"9": {"1": {"8": {"8": {"docs": {}, "df": 0, "a": {"8": {"docs": {"etl.pkg.dataframe.DataFrame.shape": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "5": {"0": {"0": {"0": {"0": {"0": {"0": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nlargest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1.4142135623730951}}, "df": 4}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "6": {"6": {"6": {"6": {"7": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"etl.pkg.dataframe.DataFrame.round": {"tf": 1.4142135623730951}}, "df": 1}, "7": {"docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1.4142135623730951}}, "df": 2}, "docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.clip": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.Series.align": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.corr": {"tf": 1.4142135623730951}}, "df": 28}, "7": {"0": {"0": {"docs": {"etl.pkg.dataframe.Series.align": {"tf": 2.23606797749979}}, "df": 1}, "docs": {"etl.pkg.dataframe.Series.align": {"tf": 2.23606797749979}}, "df": 1}, "2": {"0": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 2}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 2}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 2}, "etl.pkg.dataframe.DataFrame.div": {"tf": 2}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 2}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 2}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 2}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 2}}, "df": 17}, "docs": {}, "df": 0}, "7": {"docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 1.7320508075688772}}, "df": 1}, "docs": {"etl.pkg.dataframe.DataFrame.eval": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.round": {"tf": 2}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 2}, "etl.pkg.dataframe.Series.clip": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.align": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1.7320508075688772}}, "df": 10}, "8": {"0": {"0": {"0": {"0": {"docs": {"etl.pkg.dataframe.DataFrame.items": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1.7320508075688772}}, "df": 2}, "docs": {}, "df": 0}, "docs": {"etl.pkg.dataframe.Series.align": {"tf": 2.23606797749979}}, "df": 1}, "docs": {"etl.pkg.dataframe.DataFrame.pop": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.align": {"tf": 2.23606797749979}}, "df": 2}, "1": {"7": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.shape": {"tf": 1}}, "df": 1}}, "docs": {}, "df": 0}, "5": {"7": {"4": {"8": {"9": {"docs": {"etl.pkg.dataframe.DataFrame.applymap": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "9": {"5": {"2": {"0": {"2": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"etl.pkg.dataframe.DataFrame.eval": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 2}, "etl.pkg.dataframe.Series.align": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.view": {"tf": 1.4142135623730951}}, "df": 10}, "9": {"0": {"0": {"1": {"0": {"9": {"0": {"7": {"docs": {"etl.pkg.dataframe.Series.cov": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"etl.pkg.dataframe.Series.align": {"tf": 2.23606797749979}}, "df": 1}, "docs": {"etl.pkg.dataframe.Series.align": {"tf": 2.23606797749979}}, "df": 1}, "2": {"1": {"2": {"9": {"7": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "7": {"7": {"7": {"9": {"5": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "9": {"6": {"docs": {"etl.pkg.dataframe.Series.value_counts": {"tf": 1}}, "df": 1}, "8": {"4": {"3": {"8": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "9": {"9": {"9": {"docs": {"etl.pkg.dataframe.Series.autocorr": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 2}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 2}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.clip": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.align": {"tf": 2.23606797749979}}, "df": 23}, "docs": {"etl": {"tf": 1.7320508075688772}, "etl.pkg": {"tf": 1.7320508075688772}, "etl.pkg.components": {"tf": 1.7320508075688772}, "etl.pkg.components.checkers": {"tf": 1.7320508075688772}, "etl.pkg.components.checkers.SchemaChecker": {"tf": 2.6457513110645907}, "etl.pkg.components.checkers.SchemaChecker.__init__": {"tf": 1.7320508075688772}, "etl.pkg.components.checkers.SchemaChecker.schema_resolver": {"tf": 1.7320508075688772}, "etl.pkg.components.checkers.SchemaChecker.pipe": {"tf": 2.8284271247461903}, "etl.pkg.components.checkers.ContentChecker": {"tf": 3}, "etl.pkg.components.checkers.ContentChecker.__init__": {"tf": 1.7320508075688772}, "etl.pkg.components.checkers.ContentChecker.fields_validator": {"tf": 1.7320508075688772}, "etl.pkg.components.checkers.ContentChecker.policy": {"tf": 1.7320508075688772}, "etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 4.47213595499958}, "etl.pkg.components.historian": {"tf": 1.7320508075688772}, "etl.pkg.components.historian.HistoryBuilder": {"tf": 2.6457513110645907}, "etl.pkg.components.historian.HistoryBuilder.pipe": {"tf": 3.3166247903554}, "etl.pkg.components.identifiers": {"tf": 1.7320508075688772}, "etl.pkg.components.identifiers.Identifier": {"tf": 2.6457513110645907}, "etl.pkg.components.identifiers.Identifier.pipe": {"tf": 3.1622776601683795}, "etl.pkg.components.interface": {"tf": 1.7320508075688772}, "etl.pkg.components.interface.ResultWithReport": {"tf": 1.7320508075688772}, "etl.pkg.components.interface.Executable": {"tf": 1.7320508075688772}, "etl.pkg.components.interface.Executable.execute": {"tf": 2.23606797749979}, "etl.pkg.components.interface.Pipable": {"tf": 1.7320508075688772}, "etl.pkg.components.interface.Pipable.pipe": {"tf": 2.449489742783178}, "etl.pkg.components.interface.NopPipe": {"tf": 1.4142135623730951}, "etl.pkg.components.interface.NopPipe.pipe": {"tf": 2.449489742783178}, "etl.pkg.components.mappers": {"tf": 1.7320508075688772}, "etl.pkg.components.mappers.TaxonomyMapper": {"tf": 2.6457513110645907}, "etl.pkg.components.mappers.TaxonomyMapper.pipe": {"tf": 3}, "etl.pkg.components.mappers.TaxonomyMapper.check_taxonomies": {"tf": 3.3166247903554}, "etl.pkg.components.mappers.EntityMapper": {"tf": 2.6457513110645907}, "etl.pkg.components.mappers.EntityMapper.pipe": {"tf": 3}, "etl.pkg.components.mappers.EntityMapper.map_remainder": {"tf": 3.3166247903554}, "etl.pkg.components.mappers.EntityMapper.map_target_entities": {"tf": 3.3166247903554}, "etl.pkg.components.recycler": {"tf": 1.7320508075688772}, "etl.pkg.components.recycler.output_recyclable_file": {"tf": 2.8284271247461903}, "etl.pkg.components.transformers": {"tf": 1.4142135623730951}, "etl.pkg.config": {"tf": 2.449489742783178}, "etl.pkg.config.DEFAULT_ENV_PREFIX": {"tf": 1.7320508075688772}, "etl.pkg.config.DEFAULT_CONTEXT_ENV": {"tf": 1.7320508075688772}, "etl.pkg.config.SUPPORTED_CONTEXTS": {"tf": 1.7320508075688772}, "etl.pkg.config.DEFAULT_CONTEXT": {"tf": 1.7320508075688772}, "etl.pkg.config.DEFAULTS_SETTINGS": {"tf": 1.7320508075688772}, "etl.pkg.config.DEFAULT_SETTING_ROOT_PATH_ENV": {"tf": 1.7320508075688772}, "etl.pkg.config.DEFAULT_SETTING_ROOT_PATH": {"tf": 1.7320508075688772}, "etl.pkg.config.DEFAULT_SETTING_CONTEXT_FOLDER": {"tf": 1.7320508075688772}, "etl.pkg.config.DEFAULT_SETTING_CONFIG_NAME": {"tf": 1.7320508075688772}, "etl.pkg.config.Registry": {"tf": 7.810249675906654}, "etl.pkg.config.Registry.context_var": {"tf": 1.7320508075688772}, "etl.pkg.config.Registry.root_var": {"tf": 1.7320508075688772}, "etl.pkg.config.Registry.env_prefix": {"tf": 1.7320508075688772}, "etl.pkg.config.Registry.config_context_folder": {"tf": 1.7320508075688772}, "etl.pkg.config.Registry.config_name": {"tf": 1.7320508075688772}, "etl.pkg.config.Registry.context_folder": {"tf": 1.7320508075688772}, "etl.pkg.config.Registry.defaults": {"tf": 1.7320508075688772}, "etl.pkg.config.Registry.root": {"tf": 1.7320508075688772}, "etl.pkg.config.Registry.context": {"tf": 1.7320508075688772}, "etl.pkg.config.Registry.preload_defaults": {"tf": 1.7320508075688772}, "etl.pkg.config.Registry.settings_files": {"tf": 1.7320508075688772}, "etl.pkg.config.Registry.include_files": {"tf": 1.7320508075688772}, "etl.pkg.config.Registry.secret_suffix": {"tf": 1.7320508075688772}, "etl.pkg.config.Registry.config_ext": {"tf": 1.7320508075688772}, "etl.pkg.config.Registry.load": {"tf": 2.449489742783178}, "etl.pkg.config.Registry.get": {"tf": 3}, "etl.pkg.config.Registry.dump": {"tf": 1.7320508075688772}, "etl.pkg.database": {"tf": 2.8284271247461903}, "etl.pkg.database.DBJob": {"tf": 2}, "etl.pkg.database.DBJob.execute": {"tf": 2}, "etl.pkg.dataframe": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.__init__": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.axes": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.columns": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.iloc": {"tf": 7.3484692283495345}, "etl.pkg.dataframe.DataFrame.empty": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.ndim": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.shape": {"tf": 5.916079783099616}, "etl.pkg.dataframe.DataFrame.dtypes": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.get_dtype_counts": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.get_ftype_counts": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 20.223748416156685}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 8.06225774829855}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 21.330729007701542}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 16.673332000533065}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 25.65151067676132}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 25.337718918639855}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 36.742346141747674}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 19.313207915827967}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 24.24871130596428}, "etl.pkg.dataframe.DataFrame.query": {"tf": 20.688160865577203}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 18.138357147217054}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 21.702534414210707}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 23.108440016582687}, "etl.pkg.dataframe.DataFrame.clip_lower": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.clip_upper": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 24.228082879171435}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 19.235384061671343}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 18.708286933869708}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 7.280109889280518}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 16.34013463836819}, "etl.pkg.dataframe.DataFrame.to_orc": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 14.212670403551895}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 30.659419433511783}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 10.04987562112089}, "etl.pkg.dataframe.DataFrame.join": {"tf": 29.086079144497972}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 14.560219778561036}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 17.916472867168917}, "etl.pkg.dataframe.DataFrame.items": {"tf": 16.73320053068151}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 22.538855339169288}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 19.261360284258224}, "etl.pkg.dataframe.DataFrame.map": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.round": {"tf": 19.183326093250876}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 13.076696830622021}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 21.400934559032695}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 24.515301344262525}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 21.307275752662516}, "etl.pkg.dataframe.DataFrame.info": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 20.92844953645635}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 5.5677643628300215}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 5.830951894845301}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 6.082762530298219}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 9.848857801796104}, "etl.pkg.dataframe.DataFrame.from_dict": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.add": {"tf": 34.79942528261063}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 34.785054261852174}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 34.79942528261063}, "etl.pkg.dataframe.DataFrame.div": {"tf": 34.79942528261063}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 34.79942528261063}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 34.79942528261063}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 34.79942528261063}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 34.79942528261063}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 34.79942528261063}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 34.79942528261063}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 34.785054261852174}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 34.79942528261063}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 34.79942528261063}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 34.79942528261063}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 34.79942528261063}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 34.79942528261063}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 34.79942528261063}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 32.0624390837628}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 32.0624390837628}, "etl.pkg.dataframe.DataFrame.le": {"tf": 32.0624390837628}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 32.0624390837628}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 32.0624390837628}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 32.0624390837628}, "etl.pkg.dataframe.Series": {"tf": 4.58257569495584}, "etl.pkg.dataframe.Series.axes": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.name": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.ndim": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.shape": {"tf": 5.916079783099616}, "etl.pkg.dataframe.Series.dtype": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.dt": {"tf": 4.358898943540674}, "etl.pkg.dataframe.Series.cat": {"tf": 4.358898943540674}, "etl.pkg.dataframe.Series.str": {"tf": 4.358898943540674}, "etl.pkg.dataframe.Series.nbytes": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rename": {"tf": 6.082762530298219}, "etl.pkg.dataframe.Series.round": {"tf": 10}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 19.235384061671343}, "etl.pkg.dataframe.Series.quantile": {"tf": 4.795831523312719}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 4.795831523312719}, "etl.pkg.dataframe.Series.median": {"tf": 5.916079783099616}, "etl.pkg.dataframe.Series.groupby": {"tf": 33.090784215548595}, "etl.pkg.dataframe.Series.count": {"tf": 9.433981132056603}, "etl.pkg.dataframe.Series.mode": {"tf": 5.0990195135927845}, "etl.pkg.dataframe.Series.explode": {"tf": 13.341664064126334}, "etl.pkg.dataframe.Series.unique": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.nunique": {"tf": 11.532562594670797}, "etl.pkg.dataframe.Series.value_counts": {"tf": 18.49324200890693}, "etl.pkg.dataframe.Series.nlargest": {"tf": 21.77154105707724}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 21.72556098240043}, "etl.pkg.dataframe.Series.isin": {"tf": 19.364916731037084}, "etl.pkg.dataframe.Series.map": {"tf": 18.841443681416774}, "etl.pkg.dataframe.Series.dropna": {"tf": 16.703293088490067}, "etl.pkg.dataframe.Series.between": {"tf": 18.33030277982336}, "etl.pkg.dataframe.Series.clip": {"tf": 23.108440016582687}, "etl.pkg.dataframe.Series.clip_lower": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.clip_upper": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.align": {"tf": 26.019223662515376}, "etl.pkg.dataframe.Series.combine": {"tf": 16.97056274847714}, "etl.pkg.dataframe.Series.squeeze": {"tf": 24.228082879171435}, "etl.pkg.dataframe.Series.combine_first": {"tf": 16.3707055437449}, "etl.pkg.dataframe.Series.to_bag": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_frame": {"tf": 10.63014581273465}, "etl.pkg.dataframe.Series.to_string": {"tf": 5.744562646538029}, "etl.pkg.dataframe.Series.apply": {"tf": 19.79898987322333}, "etl.pkg.dataframe.Series.cov": {"tf": 12.165525060596439}, "etl.pkg.dataframe.Series.corr": {"tf": 16.941074346097416}, "etl.pkg.dataframe.Series.autocorr": {"tf": 14.45683229480096}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 15.491933384829668}, "etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 3.605551275463989}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 3.605551275463989}, "etl.pkg.dataframe.Series.view": {"tf": 16}, "etl.pkg.dataframe.Series.add": {"tf": 17.029386365926403}, "etl.pkg.dataframe.Series.sub": {"tf": 17}, "etl.pkg.dataframe.Series.mul": {"tf": 17.029386365926403}, "etl.pkg.dataframe.Series.div": {"tf": 17.029386365926403}, "etl.pkg.dataframe.Series.divide": {"tf": 17.029386365926403}, "etl.pkg.dataframe.Series.truediv": {"tf": 17.029386365926403}, "etl.pkg.dataframe.Series.floordiv": {"tf": 17.029386365926403}, "etl.pkg.dataframe.Series.mod": {"tf": 17.029386365926403}, "etl.pkg.dataframe.Series.pow": {"tf": 17.029386365926403}, "etl.pkg.dataframe.Series.radd": {"tf": 17.029386365926403}, "etl.pkg.dataframe.Series.rsub": {"tf": 17}, "etl.pkg.dataframe.Series.rmul": {"tf": 17.029386365926403}, "etl.pkg.dataframe.Series.rdiv": {"tf": 17.029386365926403}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 17.029386365926403}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 17.029386365926403}, "etl.pkg.dataframe.Series.rmod": {"tf": 17.029386365926403}, "etl.pkg.dataframe.Series.rpow": {"tf": 17.029386365926403}, "etl.pkg.dataframe.Series.lt": {"tf": 17.4928556845359}, "etl.pkg.dataframe.Series.gt": {"tf": 17.4928556845359}, "etl.pkg.dataframe.Series.le": {"tf": 17.4928556845359}, "etl.pkg.dataframe.Series.ge": {"tf": 17.4928556845359}, "etl.pkg.dataframe.Series.ne": {"tf": 16.76305461424021}, "etl.pkg.dataframe.Series.eq": {"tf": 16.73320053068151}, "etl.pkg.exceptions": {"tf": 2.449489742783178}, "etl.pkg.exceptions.InvalidFileError": {"tf": 1.4142135623730951}, "etl.pkg.exceptions.InvalidDataError": {"tf": 1.4142135623730951}, "etl.pkg.exceptions.RuntimeEtlError": {"tf": 1.4142135623730951}, "etl.pkg.exceptions.IOEtlError": {"tf": 1.4142135623730951}, "etl.pkg.exceptions.DevMistakeError": {"tf": 1.4142135623730951}, "etl.pkg.exceptions.ConfigError": {"tf": 1.4142135623730951}, "etl.pkg.exceptions.FlagsError": {"tf": 1.4142135623730951}, "etl.pkg.exceptions.UndeclaredFieldError": {"tf": 1.4142135623730951}, "etl.pkg.flags": {"tf": 3.4641016151377544}, "etl.pkg.flags.Namespace": {"tf": 2.449489742783178}, "etl.pkg.flags.Namespace.__init__": {"tf": 1.7320508075688772}, "etl.pkg.flags.ArgumentParser": {"tf": 2.6457513110645907}, "etl.pkg.flags.ArgumentParser.__init__": {"tf": 1.7320508075688772}, "etl.pkg.flags.ArgumentParser.parse_args": {"tf": 4}, "etl.pkg.flags.iso_date": {"tf": 1.4142135623730951}, "etl.pkg.io": {"tf": 5.477225575051661}, "etl.pkg.io.ISO_DATE_PREFIX": {"tf": 1.4142135623730951}, "etl.pkg.io.BAD_FOLDER": {"tf": 1.4142135623730951}, "etl.pkg.io.ARCHIVE_FOLDER": {"tf": 1.4142135623730951}, "etl.pkg.io.RECYCLABLE_FOLDER": {"tf": 1.4142135623730951}, "etl.pkg.io.REPORT_FOLDER": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolver": {"tf": 5.5677643628300215}, "etl.pkg.io.FileResolver.__init__": {"tf": 1.7320508075688772}, "etl.pkg.io.FileResolver.file_name": {"tf": 1.7320508075688772}, "etl.pkg.io.FileResolver.start_date": {"tf": 1.7320508075688772}, "etl.pkg.io.FileResolver.date_pattern": {"tf": 1.7320508075688772}, "etl.pkg.io.FileResolver.name_prefix": {"tf": 1.7320508075688772}, "etl.pkg.io.FileResolver.bad_path": {"tf": 1.7320508075688772}, "etl.pkg.io.FileResolver.archive_path": {"tf": 1.7320508075688772}, "etl.pkg.io.FileResolver.recyclable_path": {"tf": 1.7320508075688772}, "etl.pkg.io.FileResolver.report_path": {"tf": 1.7320508075688772}, "etl.pkg.io.FileResolver.get_file_name": {"tf": 2.23606797749979}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 2.449489742783178}, "etl.pkg.io.FileResolver.output_report": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolver.output_recyclable": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolver.move_to_archive": {"tf": 1.7320508075688772}, "etl.pkg.io.FileResolver.move_to_bad": {"tf": 1.7320508075688772}, "etl.pkg.io.file_resolver_context": {"tf": 3.4641016151377544}, "etl.pkg.io.FileResolverIterator": {"tf": 1.7320508075688772}, "etl.pkg.io.FileResolverIterator.__init__": {"tf": 1.7320508075688772}, "etl.pkg.io.FileResolverIterator.dir_name": {"tf": 1.7320508075688772}, "etl.pkg.io.FileResolverIterator.recurse": {"tf": 1.7320508075688772}, "etl.pkg.io.FileResolverIterator.radix_pattern": {"tf": 1.7320508075688772}, "etl.pkg.io.FileResolverIterator.input_files": {"tf": 1.7320508075688772}, "etl.pkg.io.FileResolverIterator.start_date": {"tf": 1.7320508075688772}, "etl.pkg.io.FileResolverIterator.date_pattern": {"tf": 1.7320508075688772}, "etl.pkg.io.FileResolverIterator.name_prefix": {"tf": 1.7320508075688772}, "etl.pkg.io.FileResolverIterator.bad_path": {"tf": 1.7320508075688772}, "etl.pkg.io.FileResolverIterator.archive_path": {"tf": 1.7320508075688772}, "etl.pkg.io.FileResolverIterator.recyclable_path": {"tf": 1.7320508075688772}, "etl.pkg.io.FileResolverIterator.report_path": {"tf": 1.7320508075688772}, "etl.pkg.policy": {"tf": 1.7320508075688772}, "etl.pkg.policy.ActionOnIssue": {"tf": 1.7320508075688772}, "etl.pkg.policy.ActionOnIssue.FAIL": {"tf": 1.7320508075688772}, "etl.pkg.policy.ActionOnIssue.TO_RECYCLE_BIN": {"tf": 1.7320508075688772}, "etl.pkg.policy.ActionOnIssue.SKIP": {"tf": 1.7320508075688772}, "etl.pkg.policy.ActionOnIssue.IGNORE": {"tf": 1.7320508075688772}, "etl.pkg.policy.ActionOnIssue.CREATE": {"tf": 1.7320508075688772}, "etl.pkg.policy.PolicyDict": {"tf": 1.7320508075688772}, "etl.pkg.policy.PolicyDict.when_any_is_not_identified": {"tf": 1.7320508075688772}, "etl.pkg.policy.PolicyDict.when_any_is_not_valid": {"tf": 1.7320508075688772}, "etl.pkg.policy.PolicyDict.when_any_taxonomy_is_not_mapped": {"tf": 1.7320508075688772}, "etl.pkg.policy.PolicyDict.when_field_is_not_identified": {"tf": 1.7320508075688772}, "etl.pkg.policy.PolicyDict.when_field_is_not_valid": {"tf": 1.7320508075688772}, "etl.pkg.policy.PolicyDict.when_field_taxonomy_is_not_mapped": {"tf": 1.7320508075688772}, "etl.pkg.policy.Policy": {"tf": 2.449489742783178}, "etl.pkg.policy.Policy.__init__": {"tf": 1.7320508075688772}, "etl.pkg.policy.Policy.dict": {"tf": 1.7320508075688772}, "etl.pkg.policy.Policy.action_on_invalid_field": {"tf": 1.4142135623730951}, "etl.pkg.policy.PolicyResolver": {"tf": 2.8284271247461903}, "etl.pkg.policy.PolicyResolver.__init__": {"tf": 1.7320508075688772}, "etl.pkg.policy.PolicyResolver.policy": {"tf": 1.7320508075688772}, "etl.pkg.policy.PolicyResolver.tolerates_data_issues": {"tf": 2.6457513110645907}, "etl.pkg.policy.strict": {"tf": 2.449489742783178}, "etl.pkg.policy.skip": {"tf": 2.23606797749979}, "etl.pkg.policy.from_config": {"tf": 3.3166247903554}, "etl.pkg.postgres": {"tf": 1.7320508075688772}, "etl.pkg.resolvers": {"tf": 2.6457513110645907}, "etl.pkg.resolvers.FieldResolver": {"tf": 2.6457513110645907}, "etl.pkg.resolvers.FieldResolver.get_mnemonic": {"tf": 3.1622776601683795}, "etl.pkg.resolvers.FieldResolver.get_id": {"tf": 2.23606797749979}, "etl.pkg.resolvers.IdentifierResolver": {"tf": 3.4641016151377544}, "etl.pkg.resolvers.TaxonomyResolver": {"tf": 2.449489742783178}, "etl.pkg.resolvers.SchemaResolver": {"tf": 1.7320508075688772}, "etl.pkg.runtime": {"tf": 2.449489742783178}, "etl.pkg.runtime.Runtime": {"tf": 2.449489742783178}, "etl.pkg.runtime.Runtime.__init__": {"tf": 1.7320508075688772}, "etl.pkg.runtime.Runtime.resources": {"tf": 1.7320508075688772}, "etl.pkg.runtime.Runtime.start": {"tf": 1.7320508075688772}, "etl.pkg.runtime.Runtime.stop": {"tf": 1.7320508075688772}, "etl.pkg.runtime.Runtime.get_config": {"tf": 2}, "etl.pkg.runtime.Runtime.get_logger": {"tf": 2.23606797749979}, "etl.pkg.runtime.Runtime.get_target_db_connection": {"tf": 3}, "etl.pkg.runtime.context": {"tf": 3.3166247903554}, "etl.pkg.validators": {"tf": 1.7320508075688772}, "etl.pkg.validators.SeriesValidator": {"tf": 1.7320508075688772}, "etl.pkg.validators.FieldsValidator": {"tf": 2.6457513110645907}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 3.7416573867739413}, "etl.pkg.validators.regexp_validator": {"tf": 2.8284271247461903}, "etl.pkg.validators.na_validator": {"tf": 1.4142135623730951}, "etl.pkg.validators.minmax_validator": {"tf": 2.8284271247461903}, "etl.pkg.validators.date_validator": {"tf": 1.7320508075688772}, "etl.pkg.workflows": {"tf": 2.449489742783178}, "etl.pkg.workflows.Base": {"tf": 2.449489742783178}, "etl.pkg.workflows.Base.__init__": {"tf": 1.7320508075688772}, "etl.pkg.workflows.Base.runtime": {"tf": 1.7320508075688772}, "etl.pkg.workflows.Base.start_date": {"tf": 1.7320508075688772}, "etl.pkg.workflows.Base.end_date": {"tf": 1.7320508075688772}, "etl.pkg.workflows.Base.identifier_resolver": {"tf": 1.7320508075688772}, "etl.pkg.workflows.Base.taxonomy_resolver": {"tf": 1.7320508075688772}, "etl.pkg.workflows.Base.schema_resolver": {"tf": 1.7320508075688772}, "etl.pkg.workflows.Base.fields_validator": {"tf": 1.7320508075688772}, "etl.pkg.workflows.Base.policy_resolver": {"tf": 1.7320508075688772}, "etl.pkg.workflows.Base.execute": {"tf": 2.23606797749979}, "etl.pkg.workflows.Generic": {"tf": 1.7320508075688772}, "etl.pkg.workflows.Generic.__init__": {"tf": 1.7320508075688772}, "etl.pkg.workflows.Generic.read_csv": {"tf": 3}, "etl.pkg.workflows.Generic.execute": {"tf": 2.23606797749979}, "etl.pkg.workflows.Generic.did_produce_recyclable": {"tf": 2.449489742783178}, "etl.sample_generic_etl": {"tf": 1.7320508075688772}, "etl.sample_generic_etl.FIELDS_WITH_EXTERNAL_IDENTIFIERS": {"tf": 1.4142135623730951}, "etl.sample_generic_etl.FIELDS_WITH_TAXONOMIES": {"tf": 1.4142135623730951}, "etl.sample_generic_etl.FIELDS_WITH_VALIDATION": {"tf": 1.4142135623730951}, "etl.sample_generic_etl.CSV_SCHEMA": {"tf": 1.4142135623730951}, "etl.sample_generic_etl.execute": {"tf": 6.4031242374328485}, "etl.sample_generic_etl.main": {"tf": 2.449489742783178}, "etl.tests": {"tf": 1.7320508075688772}, "etl.tests.flags_test": {"tf": 1.4142135623730951}, "etl.tests.flags_test.TestArgumentParser": {"tf": 1.7320508075688772}, "etl.tests.flags_test.TestArgumentParser.parser": {"tf": 1.4142135623730951}, "etl.tests.flags_test.TestArgumentParser.test_happy_path": {"tf": 1.4142135623730951}, "etl.tests.flags_test.TestArgumentParser.test_happy_with_files": {"tf": 1.4142135623730951}, "etl.tests.flags_test.TestArgumentParser.test_invalid_args": {"tf": 1.4142135623730951}, "etl.tests.flags_test.TestArgumentParser.test_invalid_start_date": {"tf": 1.4142135623730951}, "etl.tests.flags_test.TestArgumentParser.test_valid_end_date": {"tf": 1.4142135623730951}, "etl.tests.flags_test.TestArgumentParser.test_valid_standalone_end_date": {"tf": 1.4142135623730951}, "etl.tests.flags_test.TestArgumentParser.test_invalid_end_date": {"tf": 1.4142135623730951}, "etl.tests.flags_test.TestArgumentParser.test_invalid_no_input": {"tf": 2.449489742783178}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_not_existing": {"tf": 1.4142135623730951}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_is_a_dir": {"tf": 1.4142135623730951}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_existing": {"tf": 1.4142135623730951}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_folder": {"tf": 1.4142135623730951}, "etl.tests.io_test": {"tf": 1.4142135623730951}, "etl.tests.io_test.TestFileResolver": {"tf": 1.7320508075688772}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_archive": {"tf": 1.7320508075688772}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_bad": {"tf": 1.4142135623730951}, "etl.tests.io_test.TestFileResolver.test_ouput_report": {"tf": 1.4142135623730951}, "etl.tests.io_test.TestFileResolver.test_ouput_recyclable": {"tf": 1.4142135623730951}, "etl.tests.io_test.TestFileResolver.test_override_start_date": {"tf": 1.4142135623730951}, "etl.tests.io_test.TestFileResolver.test_guard_constructor": {"tf": 1.4142135623730951}, "etl.tests.io_test.TestFileResolver.test_date_extraction_no_date": {"tf": 1.4142135623730951}, "etl.tests.io_test.TestFileResolver.test_date_extraction_invalid_date": {"tf": 1.4142135623730951}, "etl.tests.io_test.TestFileResolver.test_date_extraction_many_dates": {"tf": 1.4142135623730951}, "etl.tests.io_test.TestFileResolverIterator": {"tf": 1.7320508075688772}, "etl.tests.io_test.TestFileResolverIterator.test_iterator_from_dir": {"tf": 1.7320508075688772}, "etl.tests.io_test.TestFileResolverContext": {"tf": 1.7320508075688772}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_success": {"tf": 1.4142135623730951}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_failure": {"tf": 1.4142135623730951}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_other_failure": {"tf": 1.4142135623730951}, "etl.tests.utils_test": {"tf": 1.4142135623730951}, "etl.tests.utils_test.FIXTURE_PREFIX": {"tf": 1.7320508075688772}, "etl.tests.utils_test.TEST_DATE": {"tf": 1.7320508075688772}, "etl.tests.utils_test.create_test_file": {"tf": 1.4142135623730951}}, "df": 382, "m": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}}, "df": 4, "o": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 2}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.mod": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rmod": {"tf": 1.4142135623730951}}, "df": 19, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.checkers": {"tf": 1}, "etl.pkg.components.historian": {"tf": 1}, "etl.pkg.components.identifiers": {"tf": 1}, "etl.pkg.components.interface": {"tf": 1}, "etl.pkg.components.mappers": {"tf": 1}, "etl.pkg.components.transformers": {"tf": 1}, "etl.pkg.config": {"tf": 1}, "etl.pkg.database": {"tf": 1}, "etl.pkg.dataframe": {"tf": 1}, "etl.pkg.exceptions": {"tf": 1}, "etl.pkg.flags": {"tf": 1}, "etl.pkg.io": {"tf": 1.4142135623730951}, "etl.pkg.policy": {"tf": 1}, "etl.pkg.resolvers": {"tf": 1}, "etl.pkg.runtime": {"tf": 1}, "etl.pkg.validators": {"tf": 1}, "etl.pkg.workflows": {"tf": 1}, "etl.tests.flags_test": {"tf": 1}, "etl.tests.io_test": {"tf": 1}}, "df": 19, "s": {"docs": {"etl.pkg.dataframe": {"tf": 1}, "etl.pkg.exceptions": {"tf": 1}, "etl.sample_generic_etl": {"tf": 1}}, "df": 3}}, "o": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rmod": {"tf": 1.4142135623730951}}, "df": 19}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}}, "df": 4, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {"etl.pkg.dataframe.DataFrame.mode": {"tf": 3.872983346207417}, "etl.pkg.dataframe.Series.mode": {"tf": 1.7320508075688772}}, "df": 2, "s": {"docs": {"etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1.4142135623730951}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.iloc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_orc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.workflows.Base": {"tf": 1}}, "df": 43}}, "n": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.pop": {"tf": 1.7320508075688772}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1}}, "df": 3, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1}}, "df": 3}}}}}}}}}}, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.Series.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 2.449489742783178}}, "df": 2}}}}}}, "h": {"docs": {"etl.pkg.io.FileResolver.date_pattern": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}}, "df": 6}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.io": {"tf": 1}, "etl.pkg.io.file_resolver_context": {"tf": 1}}, "df": 2}}}, "e": {"docs": {"etl.pkg.io.FileResolver": {"tf": 2}, "etl.pkg.io.FileResolver.move_to_archive": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_bad": {"tf": 1}}, "df": 3, "d": {"docs": {"etl.pkg.io.BAD_FOLDER": {"tf": 1}, "etl.pkg.io.ARCHIVE_FOLDER": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_archive": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_bad": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_success": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_failure": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_other_failure": {"tf": 1}}, "df": 7}, "s": {"docs": {"etl.pkg.io.FileResolver.move_to_archive": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_bad": {"tf": 1}}, "df": 2}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.io": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}}, "df": 2, "o": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.components.checkers.ContentChecker": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}, "etl.pkg.dataframe.Series.quantile": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}}, "df": 31, "s": {"docs": {"etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}}, "df": 3}}}}, "a": {"docs": {"etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.apply": {"tf": 2.6457513110645907}}, "df": 5, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.map": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.apply": {"tf": 2.23606797749979}}, "df": 4}}}}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 3}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}}, "df": 2, "d": {"docs": {"etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 2}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 4}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.Series.view": {"tf": 1.7320508075688772}, "etl.pkg.resolvers.IdentifierResolver": {"tf": 1}, "etl.pkg.resolvers.TaxonomyResolver": {"tf": 1}}, "df": 7, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}}, "df": 1}}}}}}}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 2.6457513110645907}}, "df": 3, "s": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}}, "df": 2}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 1}, "d": {"docs": {"etl.pkg.dataframe.DataFrame.melt": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.explode": {"tf": 1}}, "df": 3}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.Series.median_approximate": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.items": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"etl.pkg.components.identifiers": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.io.FileResolver.name_prefix": {"tf": 1}}, "df": 34, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 50}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.io.file_resolver_context": {"tf": 1}}, "df": 2}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.validators.regexp_validator": {"tf": 1}}, "df": 5}}}}, "h": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 2.449489742783178}}, "df": 1}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.corr": {"tf": 1}}, "df": 3}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "p": {"docs": {"etl.pkg.components.mappers": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.resolvers": {"tf": 1}, "etl.sample_generic_etl.execute": {"tf": 1}}, "df": 7, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 3, "s": {"docs": {"etl.pkg.components.mappers": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 2}}, "df": 5, "s": {"docs": {"etl.sample_generic_etl.FIELDS_WITH_TAXONOMIES": {"tf": 1}, "etl.sample_generic_etl.execute": {"tf": 1}}, "df": 2}}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1.4142135623730951}}, "df": 7, "s": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}}}, "y": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}, "etl.pkg.io.FileResolver.name_prefix": {"tf": 1}}, "df": 109}, "n": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 2}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1.7320508075688772}}, "df": 11}, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.io": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.io": {"tf": 1}}, "df": 1, "r": {"docs": {"etl.pkg.io": {"tf": 1}, "etl.pkg.io.file_resolver_context": {"tf": 1.4142135623730951}, "etl.pkg.runtime.context": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext": {"tf": 1}}, "df": 4}}}}}, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.pop": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1.4142135623730951}}, "df": 2}}}}, "x": {"docs": {"etl.pkg.dataframe.DataFrame.pop": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 3.605551275463989}, "etl.pkg.dataframe.Series.combine": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_string": {"tf": 1.4142135623730951}, "etl.pkg.validators.minmax_validator": {"tf": 1}}, "df": 9, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.combine": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}}, "df": 7}}}}}, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 2}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nlargest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1.4142135623730951}}, "df": 4}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nlargest": {"tf": 2}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1.4142135623730951}}, "df": 4}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"etl.sample_generic_etl.main": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}}, "df": 2}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.categorize": {"tf": 1.4142135623730951}, "etl.pkg.exceptions.UndeclaredFieldError": {"tf": 1}}, "df": 2}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.melt": {"tf": 1}}, "df": 1}}}}}}, "y": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.config.Registry": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.apply": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.apply": {"tf": 1.7320508075688772}}, "df": 2}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.div": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}}, "df": 19, "t": {"docs": {}, "df": 0, "i": {"docs": {"etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.7320508075688772}}, "df": 4, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.database": {"tf": 1}}, "df": 1}}}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.io": {"tf": 1}}, "df": 35}, "y": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}}, "df": 19}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rmul": {"tf": 1.4142135623730951}}, "df": 4}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 2}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 57}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1.7320508075688772}}, "df": 23}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1}}, "df": 20}}, "c": {"docs": {}, "df": 0, "h": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}}, "df": 2}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.eval": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 2}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.4142135623730951}}, "df": 2}, "v": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.4142135623730951}}, "df": 2}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.dropna": {"tf": 4}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.add": {"tf": 2}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 2}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 2}, "etl.pkg.dataframe.DataFrame.div": {"tf": 2}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 2}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 2}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 2}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 2}, "etl.pkg.dataframe.Series.map": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.dropna": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.clip": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 2}, "etl.pkg.dataframe.Series.sub": {"tf": 2}, "etl.pkg.dataframe.Series.mul": {"tf": 2}, "etl.pkg.dataframe.Series.div": {"tf": 2}, "etl.pkg.dataframe.Series.divide": {"tf": 2}, "etl.pkg.dataframe.Series.truediv": {"tf": 2}, "etl.pkg.dataframe.Series.floordiv": {"tf": 2}, "etl.pkg.dataframe.Series.mod": {"tf": 2}, "etl.pkg.dataframe.Series.pow": {"tf": 2}, "etl.pkg.dataframe.Series.radd": {"tf": 2}, "etl.pkg.dataframe.Series.rsub": {"tf": 2}, "etl.pkg.dataframe.Series.rmul": {"tf": 2}, "etl.pkg.dataframe.Series.rdiv": {"tf": 2}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 2}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 2}, "etl.pkg.dataframe.Series.rmod": {"tf": 2}, "etl.pkg.dataframe.Series.rpow": {"tf": 2}, "etl.pkg.dataframe.Series.lt": {"tf": 2}, "etl.pkg.dataframe.Series.gt": {"tf": 2}, "etl.pkg.dataframe.Series.le": {"tf": 2}, "etl.pkg.dataframe.Series.ge": {"tf": 2}, "etl.pkg.dataframe.Series.ne": {"tf": 2}, "etl.pkg.dataframe.Series.eq": {"tf": 2}}, "df": 52}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"etl.pkg.policy.strict": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}}, "df": 23}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.Series.view": {"tf": 1}}, "df": 1}}}}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.exceptions.DevMistakeError": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.validators.minmax_validator": {"tf": 1}}, "df": 7, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 2}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1.4142135623730951}}, "df": 8}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {"etl.pkg.validators.minmax_validator": {"tf": 1}}, "df": 1}}}}, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}}, "df": 6}}}, "d": {"docs": {}, "df": 0, "x": {"docs": {"etl.pkg.dataframe.DataFrame.drop": {"tf": 1.4142135623730951}}, "df": 1}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.apply": {"tf": 1}}, "df": 1}}}}}, ":": {"1": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0, "m": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 1}}, "df": 1}}, "m": {"docs": {"etl.pkg.flags.iso_date": {"tf": 1}, "etl.pkg.validators.date_validator": {"tf": 1}}, "df": 2}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"etl.pkg.resolvers.FieldResolver.get_mnemonic": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"etl.pkg.resolvers.IdentifierResolver": {"tf": 1}, "etl.pkg.resolvers.TaxonomyResolver": {"tf": 1}}, "df": 2}}}}}}}}}, "c": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 2}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 2}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.le": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 4.123105625617661}, "etl.pkg.dataframe.Series.align": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.add": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.sub": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.mul": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.div": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.divide": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.truediv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.mod": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.pow": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.radd": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rsub": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rmul": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rmod": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rpow": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.lt": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.gt": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.le": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.ge": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.ne": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.eq": {"tf": 1.7320508075688772}}, "df": 40, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"etl.pkg.components.checkers.SchemaChecker.pipe": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rename": {"tf": 1.4142135623730951}, "etl.pkg.validators.regexp_validator": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_report": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_recyclable": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_override_start_date": {"tf": 1}}, "df": 8, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.components.checkers.ContentChecker": {"tf": 1}}, "df": 1, "s": {"docs": {"etl.pkg.components.checkers": {"tf": 1.4142135623730951}}, "df": 1}}}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}, "etl.pkg.validators.regexp_validator": {"tf": 1}, "etl.pkg.validators.na_validator": {"tf": 1}, "etl.pkg.validators.minmax_validator": {"tf": 1}}, "df": 4}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 9}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.Series.combine": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 4}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}}, "df": 3, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}}, "df": 2}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.tests.flags_test.TestArgumentParser.test_invalid_no_input": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.corr": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.corr": {"tf": 2}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1.4142135623730951}}, "df": 3, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.components.checkers.SchemaChecker.pipe": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 43}}}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.Series.map": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.corr": {"tf": 4}, "etl.pkg.dataframe.Series.corr": {"tf": 4.123105625617661}, "etl.pkg.dataframe.Series.autocorr": {"tf": 2.6457513110645907}}, "df": 3, "s": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 1}}}}}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}}, "df": 3}}}}}, "e": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 2}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 102}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.components.checkers.ContentChecker": {"tf": 1}, "etl.pkg.dataframe.DataFrame.items": {"tf": 2.6457513110645907}, "etl.pkg.exceptions.InvalidDataError": {"tf": 1}}, "df": 3, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.components.checkers.ContentChecker": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.config.Registry": {"tf": 1}}, "df": 1}}}}}}}, "x": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.io": {"tf": 1.4142135623730951}, "etl.pkg.io.file_resolver_context": {"tf": 1.7320508075688772}, "etl.pkg.runtime.context": {"tf": 1.4142135623730951}, "etl.tests.flags_test.TestArgumentParser.test_invalid_no_input": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext": {"tf": 1}}, "df": 5}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1.4142135623730951}}, "df": 7, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}}, "df": 2}}}}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}}, "df": 6, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1}}, "df": 5}}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 5}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}}, "df": 4}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.Series.value_counts": {"tf": 1}}, "df": 1}}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.config": {"tf": 1.4142135623730951}, "etl.pkg.config.Registry.get": {"tf": 1}, "etl.pkg.config.Registry.dump": {"tf": 1}, "etl.pkg.policy.from_config": {"tf": 1}, "etl.pkg.runtime.Runtime": {"tf": 1}, "etl.pkg.runtime.Runtime.get_config": {"tf": 1.7320508075688772}, "etl.sample_generic_etl.execute": {"tf": 1.4142135623730951}}, "df": 7, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1.4142135623730951}, "etl.pkg.config.Registry.get": {"tf": 1}}, "df": 2}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.config": {"tf": 1}, "etl.pkg.config.Registry": {"tf": 1.7320508075688772}, "etl.pkg.config.Registry.load": {"tf": 1}, "etl.pkg.config.Registry.get": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.exceptions.ConfigError": {"tf": 1}, "etl.pkg.flags": {"tf": 1}, "etl.pkg.policy.from_config": {"tf": 1}}, "df": 9}}}}, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.config.Registry": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.policy.from_config": {"tf": 1}}, "df": 1}}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.query": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.from_dict": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.tests.io_test.TestFileResolver.test_guard_constructor": {"tf": null}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}}, "df": 17}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe": {"tf": 1}}, "df": 1}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1.7320508075688772}}, "df": 2}, "r": {"docs": {"etl.pkg.runtime.Runtime": {"tf": 1}}, "df": 1, "s": {"docs": {"etl.pkg.runtime": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1.7320508075688772}}, "df": 10}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.drop": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.Series.align": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.database": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.runtime.Runtime": {"tf": 1}}, "df": 1, "s": {"docs": {"etl.pkg.runtime": {"tf": 1}, "etl.pkg.runtime.Runtime.start": {"tf": 1}}, "df": 2}}}}}}}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.shape": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.info": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.workflows.Generic.execute": {"tf": 1}}, "df": 1}}}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}}, "df": 3}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}}, "df": 3, "s": {"docs": {"etl.pkg.dataframe.DataFrame.rename": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {"etl.pkg.dataframe.DataFrame.categorize": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 7, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.categorize": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.map": {"tf": 1.4142135623730951}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}}, "df": 2}}}}}}}}, "l": {"1": {"docs": {"etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 2}}, "df": 3}, "2": {"docs": {"etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 2}}, "df": 3}, "docs": {"etl.pkg.dataframe.DataFrame.clip": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 3.1622776601683795}}, "df": 5, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1.4142135623730951}, "etl.pkg.components.transformers": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iloc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 2}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 2}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 4}, "etl.pkg.dataframe.DataFrame.join": {"tf": 3}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.items": {"tf": 2}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.round": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 2}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.clip": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.squeeze": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.policy.Policy.action_on_invalid_field": {"tf": 1}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1}, "etl.pkg.validators.regexp_validator": {"tf": 1}}, "df": 44, "s": {"docs": {"etl.pkg.components.checkers.ContentChecker": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1.4142135623730951}, "etl.pkg.components.identifiers.Identifier.pipe": {"tf": 1}, "etl.pkg.dataframe.DataFrame.shape": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 3}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 2}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.join": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.round": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 2}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.add": {"tf": 2}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 2}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 2}, "etl.pkg.dataframe.DataFrame.div": {"tf": 2}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 2}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 2}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 2}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 2}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.le": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 2}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.squeeze": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1.4142135623730951}, "etl.sample_generic_etl.FIELDS_WITH_EXTERNAL_IDENTIFIERS": {"tf": 1}, "etl.sample_generic_etl.FIELDS_WITH_TAXONOMIES": {"tf": 1}, "etl.sample_generic_etl.FIELDS_WITH_VALIDATION": {"tf": 1}}, "df": 75}, "/": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"etl.pkg.dataframe.DataFrame.apply": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}}, "df": 2}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.tests.io_test.TestFileResolverIterator.test_iterator_from_dir": {"tf": 1}}, "df": 1, "s": {"docs": {"etl.pkg.dataframe.Series.map": {"tf": 1}}, "df": 1}}}}}}}}}, "m": {"docs": {"etl.pkg.config.Registry": {"tf": 1}}, "df": 1, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.runtime": {"tf": 1}}, "df": 1, "s": {"docs": {"etl.pkg.components.interface": {"tf": 1}, "etl.sample_generic_etl": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.workflows.Base": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.DataFrame.query": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.corr": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.autocorr": {"tf": 2}}, "df": 14, "d": {"docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}}, "df": 5}, "s": {"docs": {"etl.pkg.dataframe.Series.autocorr": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 42, "s": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"1": {"2": {"8": {"docs": {"etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 2.23606797749979}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}}, "df": 2}, "t": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 1}}, "df": 4}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 28}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.Series.align": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.lt": {"tf": 2}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 2}, "etl.pkg.dataframe.DataFrame.le": {"tf": 2}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 2}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 2}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 2}}, "df": 6, "s": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}}, "df": 6}}}, "e": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 3}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 3}, "etl.pkg.dataframe.DataFrame.le": {"tf": 3}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 3}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 3}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 3}}, "df": 23}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.Series.isin": {"tf": 1}}, "df": 1}}}}}}}, "/": {"docs": {}, "df": 0, "v": {"1": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.config.Registry": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "docs": {}, "df": 0}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.runtime.Runtime": {"tf": 1}, "etl.tests.utils_test": {"tf": 1}}, "df": 4}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1.4142135623730951}}, "df": 1}}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 4}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}}, "df": 4}}}, "e": {"docs": {"etl.pkg.dataframe.Series.combine": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.combine_first": {"tf": 2.23606797749979}}, "df": 2, "d": {"docs": {"etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1.7320508075688772}}, "df": 2}}}}}}, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 102}}}, "y": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 2}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1.4142135623730951}}, "df": 8}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.le": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 3.605551275463989}}, "df": 7, "s": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 3}}, "n": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1}, "etl.pkg.dataframe.Series.count": {"tf": 2}, "etl.pkg.dataframe.Series.nunique": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.value_counts": {"tf": 2.449489742783178}}, "df": 6, "s": {"docs": {"etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 2.8284271247461903}}, "df": 4}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.Series.value_counts": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.Series.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.resolvers.IdentifierResolver": {"tf": 1}, "etl.pkg.resolvers.TaxonomyResolver": {"tf": 1}}, "df": 5, "s": {"docs": {"etl.pkg.dataframe.DataFrame.drop": {"tf": 1}}, "df": 1}}}, "w": {"docs": {"etl.pkg.dataframe.DataFrame.drop": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.isin": {"tf": 1.7320508075688772}}, "df": 2}, "v": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.cov": {"tf": 1.7320508075688772}}, "df": 2, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 4}, "etl.pkg.dataframe.Series.cov": {"tf": 2.23606797749979}}, "df": 2}}}}}}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.corr": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.corr": {"tf": 2.8284271247461903}}, "df": 2}}}}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}, "etl.pkg.flags": {"tf": 1}}, "df": 2}}}, "y": {"docs": {"etl.pkg.policy.Policy": {"tf": 1}}, "df": 1}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.Series.between": {"tf": 1}}, "df": 1}}}, "n": {"docs": {"etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.apply": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_no_input": {"tf": 1}}, "df": 37, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}}, "df": 6}}}}, "t": {"docs": {"etl.pkg.dataframe.Series.map": {"tf": 2.23606797749979}}, "df": 1, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}}, "df": 7, "s": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 3}}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.categorize": {"tf": 1.4142135623730951}}, "df": 1, "d": {"docs": {"etl.pkg.resolvers": {"tf": 1.4142135623730951}}, "df": 1}}}}, "y": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1}}, "df": 5}}}}}, "w": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.dropna": {"tf": 2.449489742783178}}, "df": 1}}}}}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.round": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 2.449489742783178}}, "df": 3}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 2}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 14, "s": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 5}}, "t": {"docs": {"etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}}, "df": 3}}, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.4142135623730951}}, "df": 18, "d": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}}, "df": 2}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 1, "s": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}}, "df": 2}}}}}}}}}, "l": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 3}, "r": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 2}, "etl.pkg.dataframe.Series.map": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 2}, "etl.pkg.dataframe.DataFrame.join": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}}, "df": 8}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 2}, "etl.pkg.dataframe.Series.rename": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.corr": {"tf": 2}}, "df": 6, "/": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.Series.rename": {"tf": 1}}, "df": 1}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.groupby": {"tf": 2.23606797749979}}, "df": 2}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}}, "df": 3}}}, "e": {"docs": {"etl.pkg.resolvers.IdentifierResolver": {"tf": 1}, "etl.pkg.resolvers.TaxonomyResolver": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.Series.view": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.components.interface": {"tf": 1}, "etl.pkg.config": {"tf": 1}, "etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.dt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.cat": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.str": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.flags": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser": {"tf": 1}, "etl.tests.io_test.TestFileResolver": {"tf": 1}, "etl.tests.io_test.TestFileResolverIterator": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext": {"tf": 1}}, "df": 21, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.rename": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}}, "r": {"docs": {"etl.pkg.exceptions": {"tf": 1}}, "df": 1}}}, "i": {"docs": {"etl.pkg.exceptions.FlagsError": {"tf": 1}, "etl.pkg.flags": {"tf": 1}, "etl.pkg.flags.ArgumentParser": {"tf": 1}, "etl.sample_generic_etl.main": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.parser": {"tf": 1}}, "df": 5, "p": {"docs": {"etl.pkg.dataframe.DataFrame.clip": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.clip": {"tf": 3.3166247903554}}, "df": 2, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.clip": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.clip": {"tf": 1.7320508075688772}}, "df": 2}}}, "s": {"docs": {"etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}}, "df": 3}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.runtime.context": {"tf": 1}}, "df": 1, "d": {"docs": {"etl.pkg.dataframe.Series.between": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.Series.combine": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.io": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.config.Registry": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1}, "etl.pkg.dataframe.Series.to_bag": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1.4142135623730951}, "etl.tests.utils_test.create_test_file": {"tf": 1}}, "df": 8, "d": {"docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1}, "etl.pkg.io.RECYCLABLE_FOLDER": {"tf": 1}, "etl.pkg.io.REPORT_FOLDER": {"tf": 1}}, "df": 6}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1}, "etl.pkg.policy.from_config": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}}, "df": 2}}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {"etl.pkg.io.file_resolver_context": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {}, "df": 0, "v": {"docs": {"etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.workflows.Generic.read_csv": {"tf": 1.4142135623730951}, "etl.sample_generic_etl.execute": {"tf": 1}}, "df": 5}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.7320508075688772}}, "df": 1}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}}, "df": 3, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.corr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.corr": {"tf": 1}}, "df": 2}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}, "etl.pkg.dataframe.Series.quantile": {"tf": 1}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 1}}, "df": 7, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {"etl.pkg.dataframe.Series.value_counts": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}}, "df": 2}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.count": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.div": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 4.47213595499958}}, "df": 17}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.checkers": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.workflows": {"tf": 1}, "etl.pkg.workflows.Generic.read_csv": {"tf": 1}}, "df": 4, "d": {"docs": {"etl.pkg.components.checkers.ContentChecker": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.map": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1.7320508075688772}, "etl.pkg.io.FileResolver": {"tf": 1}, "etl.sample_generic_etl": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_override_start_date": {"tf": 1}}, "df": 9}, "s": {"docs": {"etl.pkg.components.historian": {"tf": 1}, "etl.pkg.components.identifiers": {"tf": 1}, "etl.pkg.components.mappers": {"tf": 1}, "etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.flags.Namespace": {"tf": 1}, "etl.pkg.flags.ArgumentParser": {"tf": 1}, "etl.pkg.io.file_resolver_context": {"tf": 1}, "etl.pkg.io.FileResolverIterator": {"tf": 1}, "etl.pkg.runtime.context": {"tf": 1}, "etl.pkg.workflows.Generic": {"tf": 1}}, "df": 11}, "r": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.config.Registry": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.runtime.Runtime": {"tf": 1}}, "df": 5}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.components.interface.Pipable.pipe": {"tf": 1}, "etl.pkg.components.interface.NopPipe.pipe": {"tf": 1}}, "df": 2, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}, "etl.pkg.workflows.Generic": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.io": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 1}, "etl.sample_generic_etl.execute": {"tf": 1}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.io.file_resolver_context": {"tf": 1}}, "df": 1}}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {"etl.pkg.database": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1.7320508075688772}}, "df": 3, "s": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}}, "df": 4}, "d": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.io.FileResolver.output_recyclable": {"tf": 1}}, "df": 2}}, "t": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 1}}, "df": 1}}}}, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}}, "df": 2}}}}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}}, "df": 3}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}}, "df": 3}}, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.tests.flags_test.TestArgumentParser.test_happy_path": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_happy_with_files": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.Series.value_counts": {"tf": 1}}, "df": 1}}}}}}}, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.policy.skip": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.io.FileResolver.name_prefix": {"tf": 1.4142135623730951}, "etl.sample_generic_etl.execute": {"tf": 1}}, "df": 4}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.view": {"tf": 1}}, "df": 3, "s": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 3}, "d": {"docs": {"etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}}, "df": 2}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 3}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}}, "df": 2}}}}}, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.to_records": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.tests.io_test.TestFileResolverIterator.test_iterator_from_dir": {"tf": 1}}, "df": 1}}}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_success": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_failure": {"tf": 1}}, "df": 2}}}}}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.squeeze": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.squeeze": {"tf": 3.3166247903554}}, "df": 2}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 2}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 2}}, "df": 5, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.checkers.ContentChecker": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}, "etl.pkg.components.interface.Pipable": {"tf": 1}, "etl.pkg.components.interface.NopPipe": {"tf": 1}}, "df": 4, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.checkers.ContentChecker": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}}, "df": 2, "s": {"docs": {"etl.pkg.workflows.Generic.execute": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.interface.Pipable": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.components.identifiers.Identifier.pipe": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 3}}}}, "v": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}}, "df": 3}}}}, "a": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}, "etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 7, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.components.checkers.ContentChecker": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.transformers": {"tf": 1}}, "df": 1}}}}}}}}}}, "m": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 37, "s": {"docs": {"etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.quantile": {"tf": 1}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 117}, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.sample_generic_etl.main": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 4}, "etl.pkg.dataframe.Series": {"tf": 1}}, "df": 3}}}}, "t": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2.449489742783178}}, "df": 1, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 5}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series": {"tf": 1}}, "df": 6, "s": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 8}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.Series.align": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.pop": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 4}, "etl.pkg.dataframe.Series.groupby": {"tf": 3.3166247903554}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.flags": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_happy_path": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_happy_with_files": {"tf": 1}}, "df": 3, "s": {"docs": {"etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1}, "etl.sample_generic_etl.main": {"tf": 1}}, "df": 2}, "d": {"docs": {"etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 1}}, "df": 2}, "r": {"docs": {"etl.tests.flags_test.TestArgumentParser.parser": {"tf": 1.4142135623730951}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"etl.pkg.config.Registry.get": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.workflows.Generic.read_csv": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_archive": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_bad": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_report": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_recyclable": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_override_start_date": {"tf": 1}}, "df": 11, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1}}}, "/": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.io.FileResolver": {"tf": 1}, "etl.pkg.io.FileResolver.date_pattern": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolverIterator": {"tf": 1}, "etl.pkg.validators.regexp_validator": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_many_dates": {"tf": 1}}, "df": 5, "s": {"docs": {"etl.tests.io_test.TestFileResolver.test_date_extraction_no_date": {"tf": 1}}, "df": 1}}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {"etl.pkg.dataframe.DataFrame.items": {"tf": 2}}, "df": 1, "s": {"docs": {"etl.pkg.dataframe.DataFrame": {"tf": 2}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.query": {"tf": 2}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 2}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 2}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 112}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1.4142135623730951}}, "df": 8, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}, "etl.pkg.flags": {"tf": 1}, "etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1}}, "df": 60}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 7}}}}, "t": {"docs": {"etl.tests.flags_test.TestArgumentParser.test_invalid_end_date": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}}, "df": 2, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1.4142135623730951}}, "df": 4}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1.4142135623730951}}, "df": 5}}}}}}, "d": {"docs": {"etl.pkg.dataframe.Series.align": {"tf": 1.4142135623730951}}, "df": 1}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.components.checkers.ContentChecker": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1.4142135623730951}, "etl.pkg.policy": {"tf": 1}, "etl.pkg.policy.Policy": {"tf": 1.4142135623730951}, "etl.pkg.policy.Policy.action_on_invalid_field": {"tf": 1}, "etl.pkg.policy.strict": {"tf": 1.7320508075688772}, "etl.pkg.policy.skip": {"tf": 1.7320508075688772}, "etl.pkg.policy.from_config": {"tf": 1.4142135623730951}}, "df": 8, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.policy.PolicyDict": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.items": {"tf": 2}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}}, "df": 2}, "y": {"docs": {"etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.iloc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}}, "df": 4, "s": {"docs": {"etl.pkg.dataframe.DataFrame.iloc": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.round": {"tf": 1}}, "df": 2}, "a": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 3}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.database": {"tf": 1}}, "df": 1}}, "p": {"docs": {"etl.pkg.dataframe.DataFrame.pop": {"tf": 1.4142135623730951}}, "df": 1, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.pop": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.items": {"tf": 2}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1.4142135623730951}}, "df": 5}}}}}}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 2.23606797749979}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.sample_generic_etl.main": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.io.FileResolver.move_to_archive": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_bad": {"tf": 1}}, "df": 2}}}}}, "w": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 2}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.pow": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rpow": {"tf": 1.4142135623730951}}, "df": 19, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rpow": {"tf": 1.4142135623730951}}, "df": 19}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.clip": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1.7320508075688772}}, "df": 4, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"etl.pkg.config.Registry.load": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}}, "df": 7, "s": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 4}}, "t": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}}, "df": 3}}}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1.7320508075688772}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 2}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}}, "df": 5}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.Series.combine_first": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.corr": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.corr": {"tf": 2}, "etl.pkg.dataframe.Series.autocorr": {"tf": 2}}, "df": 3}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.7320508075688772}}, "df": 17}}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.iloc": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1.4142135623730951}}, "df": 1}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.Series.map": {"tf": 1.4142135623730951}}, "df": 1}}}}, "d": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 2}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 2}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 2}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 2}, "etl.pkg.dataframe.DataFrame.div": {"tf": 2}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 2}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 2}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 2}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 2}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.le": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.groupby": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.map": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.dropna": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.between": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.clip": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.align": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.combine": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.combine_first": {"tf": 2}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.corr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.view": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rpow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.lt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.gt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.le": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.ge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.ne": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.eq": {"tf": 1.4142135623730951}}, "df": 101}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}}, "df": 3, "s": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.round": {"tf": 1}}, "df": 3}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {"etl.tests.io_test.TestFileResolver.test_date_extraction_many_dates": {"tf": 1}}, "df": 1}}}, "y": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.query": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.from_dict": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rpow": {"tf": 1.4142135623730951}}, "df": 22}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2.449489742783178}}, "df": 1}}}}}}, "h": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "?": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 1}}}}}}}}, "x": {"docs": {"etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}}, "df": 1}, "k": {"docs": {}, "df": 0, "g": {"docs": {"etl.sample_generic_etl": {"tf": 1}, "etl.tests.flags_test": {"tf": 1}, "etl.tests.io_test": {"tf": 1}}, "df": 3}}, "b": {"docs": {"etl.sample_generic_etl.execute": {"tf": 1}}, "df": 1}}, "d": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.le": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.align": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.add": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.sub": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.mul": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.div": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.divide": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.truediv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.floordiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.mod": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.pow": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.radd": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.rsub": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.rmul": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.rdiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.rmod": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.rpow": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.lt": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.gt": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.le": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.ge": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.ne": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.eq": {"tf": 2.23606797749979}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1}}, "df": 40, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"etl.pkg.components.checkers": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.dtype": {"tf": 1}, "etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.clip": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.view": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rpow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.lt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.gt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.le": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.ge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.ne": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.eq": {"tf": 1.4142135623730951}, "etl.pkg.policy": {"tf": 1}, "etl.pkg.policy.ActionOnIssue": {"tf": 1}, "etl.pkg.policy.PolicyDict": {"tf": 1}, "etl.pkg.policy.Policy": {"tf": 1}, "etl.pkg.policy.strict": {"tf": 1}, "etl.pkg.policy.skip": {"tf": 1}, "etl.pkg.resolvers.SchemaResolver": {"tf": 1}, "etl.pkg.workflows.Generic": {"tf": 1}, "etl.sample_generic_etl": {"tf": 1}}, "df": 84, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.checkers.SchemaChecker.pipe": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 2.23606797749979}, "etl.pkg.components.historian.HistoryBuilder.pipe": {"tf": 1.4142135623730951}, "etl.pkg.components.identifiers.Identifier.pipe": {"tf": 2}, "etl.pkg.components.interface.Executable.execute": {"tf": 1.4142135623730951}, "etl.pkg.components.interface.Pipable": {"tf": 1.7320508075688772}, "etl.pkg.components.interface.Pipable.pipe": {"tf": 1.7320508075688772}, "etl.pkg.components.interface.NopPipe.pipe": {"tf": 1.7320508075688772}, "etl.pkg.components.mappers.TaxonomyMapper.pipe": {"tf": 1.4142135623730951}, "etl.pkg.components.mappers.TaxonomyMapper.check_taxonomies": {"tf": 1.4142135623730951}, "etl.pkg.components.mappers.EntityMapper.pipe": {"tf": 1.4142135623730951}, "etl.pkg.components.mappers.EntityMapper.map_remainder": {"tf": 1.4142135623730951}, "etl.pkg.components.mappers.EntityMapper.map_target_entities": {"tf": 1.4142135623730951}, "etl.pkg.dataframe": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.iloc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.shape": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 3}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.query": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 3}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 3}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 3}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.join": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.items": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.round": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 2}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 3}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.info": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.from_dict": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.add": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.div": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 3.872983346207417}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 3.872983346207417}, "etl.pkg.dataframe.DataFrame.le": {"tf": 3.872983346207417}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 3.872983346207417}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 3.872983346207417}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 3.872983346207417}, "etl.pkg.dataframe.Series": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.nunique": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.isin": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.map": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.clip": {"tf": 2}, "etl.pkg.dataframe.Series.align": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.squeeze": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.apply": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}, "etl.pkg.validators.regexp_validator": {"tf": 1}, "etl.pkg.workflows.Base.execute": {"tf": 1.4142135623730951}, "etl.pkg.workflows.Generic.read_csv": {"tf": 1.7320508075688772}, "etl.pkg.workflows.Generic.execute": {"tf": 1}, "etl.sample_generic_etl.execute": {"tf": 1}}, "df": 131, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.div": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.le": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1.7320508075688772}, "etl.pkg.validators": {"tf": 1}, "etl.pkg.workflows": {"tf": 1}}, "df": 33}}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1}}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.historian": {"tf": 1}, "etl.pkg.components.identifiers": {"tf": 1}, "etl.pkg.database": {"tf": 1.7320508075688772}, "etl.pkg.runtime": {"tf": 1}, "etl.pkg.runtime.Runtime.start": {"tf": 1}, "etl.pkg.runtime.context": {"tf": 1}}, "df": 6}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.combine": {"tf": 1}}, "df": 6, "s": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1.7320508075688772}}, "df": 4}}}}, "#": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 1}}}}}}}}}, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.flags.iso_date": {"tf": 1.4142135623730951}, "etl.pkg.io": {"tf": 1}, "etl.pkg.io.ISO_DATE_PREFIX": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 2}, "etl.pkg.io.FileResolver.date_pattern": {"tf": 1}, "etl.pkg.io.FileResolver.name_prefix": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 2.23606797749979}, "etl.pkg.validators.date_validator": {"tf": 2}, "etl.tests.flags_test.TestArgumentParser.test_invalid_start_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_valid_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_valid_standalone_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_end_date": {"tf": 1.4142135623730951}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_archive": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_bad": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_report": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_recyclable": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_override_start_date": {"tf": 1.4142135623730951}, "etl.tests.io_test.TestFileResolver.test_date_extraction_no_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_invalid_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_many_dates": {"tf": 1}}, "df": 21, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"6": {"4": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1.4142135623730951}}, "df": 1, "[": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1.4142135623730951}}, "df": 4}}}}, "docs": {}, "df": 0}, "docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolver.date_pattern": {"tf": 1}}, "df": 3, "s": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}}, "df": 1}, "t": {"docs": {}, "df": 0, "z": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1.4142135623730951}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 2}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 2}}, "df": 3}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "k": {"docs": {"etl.pkg.dataframe": {"tf": 1}, "etl.pkg.dataframe.DataFrame": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 2}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 2}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 2}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.info": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 4.795831523312719}, "etl.pkg.dataframe.DataFrame.from_dict": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.quantile": {"tf": 2}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 2}, "etl.pkg.dataframe.Series.median": {"tf": 2}, "etl.pkg.dataframe.Series.groupby": {"tf": 2}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 2}, "etl.pkg.dataframe.Series.dropna": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.align": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.to_bag": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.apply": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}, "etl.pkg.workflows": {"tf": 1}}, "df": 120}}, "y": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolver.date_pattern": {"tf": 1}}, "df": 2}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.Series.between": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.components.checkers.SchemaChecker": {"tf": 1}, "etl.pkg.components.checkers.SchemaChecker.pipe": {"tf": 1}, "etl.pkg.components.historian.HistoryBuilder": {"tf": 1}, "etl.pkg.components.historian.HistoryBuilder.pipe": {"tf": 1.4142135623730951}, "etl.pkg.components.identifiers.Identifier": {"tf": 1}, "etl.pkg.components.identifiers.Identifier.pipe": {"tf": 1.4142135623730951}, "etl.pkg.components.mappers.TaxonomyMapper": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper.pipe": {"tf": 1.4142135623730951}, "etl.pkg.components.mappers.TaxonomyMapper.check_taxonomies": {"tf": 1.4142135623730951}, "etl.pkg.components.mappers.EntityMapper": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.pipe": {"tf": 1.4142135623730951}, "etl.pkg.components.mappers.EntityMapper.map_remainder": {"tf": 1.4142135623730951}, "etl.pkg.components.mappers.EntityMapper.map_target_entities": {"tf": 1.4142135623730951}, "etl.pkg.components.recycler.output_recyclable_file": {"tf": 1}, "etl.pkg.policy.PolicyResolver": {"tf": 1}, "etl.pkg.policy.PolicyResolver.tolerates_data_issues": {"tf": 1}, "etl.pkg.policy.from_config": {"tf": 1.4142135623730951}, "etl.pkg.resolvers.FieldResolver": {"tf": 1}, "etl.pkg.resolvers.FieldResolver.get_mnemonic": {"tf": 1.4142135623730951}, "etl.pkg.resolvers.FieldResolver.get_id": {"tf": 1}, "etl.pkg.runtime.Runtime.get_logger": {"tf": 1}, "etl.pkg.runtime.Runtime.get_target_db_connection": {"tf": 1}, "etl.pkg.validators.FieldsValidator": {"tf": 1}, "etl.pkg.workflows.Base": {"tf": 1}}, "df": 24}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}}, "df": 3}}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.eval": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}}, "df": 5}}}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.config.Registry.load": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 2}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.quantile": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}}, "df": 5}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1}}}}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.to_records": {"tf": 1}}, "df": 1, "s": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}}, "df": 3}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe": {"tf": 1}, "etl.pkg.runtime.Runtime": {"tf": 1}}, "df": 2}}}, "y": {"docs": {"etl.pkg.runtime": {"tf": 1}}, "df": 1}}, "t": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}}, "df": 1}}}}}}}, "f": {"docs": {"etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}}, "df": 4, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.config.Registry": {"tf": 1.4142135623730951}, "etl.pkg.config.Registry.get": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 3}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 2}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 2}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 2}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 4.58257569495584}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.join": {"tf": 2}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 2}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 2}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 2}, "etl.pkg.dataframe.Series.quantile": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.median": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 3}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.value_counts": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.nlargest": {"tf": 2}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 2}, "etl.pkg.dataframe.Series.map": {"tf": 2}, "etl.pkg.dataframe.Series.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 2}, "etl.pkg.dataframe.Series.align": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_string": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.view": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}, "etl.pkg.flags": {"tf": 1}, "etl.pkg.flags.ArgumentParser": {"tf": 1}, "etl.pkg.io.ISO_DATE_PREFIX": {"tf": 1}, "etl.pkg.io.BAD_FOLDER": {"tf": 1}, "etl.pkg.io.ARCHIVE_FOLDER": {"tf": 1}, "etl.pkg.io.RECYCLABLE_FOLDER": {"tf": 1}, "etl.pkg.io.REPORT_FOLDER": {"tf": 1}, "etl.pkg.policy.strict": {"tf": 1}, "etl.pkg.validators.date_validator": {"tf": 1}}, "df": 113, "s": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1.4142135623730951}}, "df": 14}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.Series.map": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {"etl.pkg.io.FileResolver": {"tf": 1}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}}, "df": 1, "d": {"docs": {"etl.pkg.config.Registry.get": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1.4142135623730951}, "etl.pkg.resolvers": {"tf": 1}}, "df": 4}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.policy.PolicyDict": {"tf": 1}, "etl.pkg.policy.Policy": {"tf": 1}}, "df": 4}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.sample_generic_etl.CSV_SCHEMA": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.shape": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.shape": {"tf": 1}, "etl.pkg.workflows": {"tf": 1}}, "df": 3}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1, "s": {"docs": {"etl.pkg.dataframe.DataFrame.drop": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}}, "df": 2}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}}, "df": 21}, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 3}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.7320508075688772}}, "df": 3, "s": {"docs": {"etl.pkg.policy.Policy": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}}, "df": 2}}}}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.policy.ActionOnIssue": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 2}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.round": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.round": {"tf": 1.4142135623730951}}, "df": 4, "s": {"docs": {"etl.pkg.dataframe.DataFrame.round": {"tf": 3}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.corr": {"tf": 1}}, "df": 4}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1}}, "df": 1}}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.div": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 4.123105625617661}, "etl.pkg.dataframe.Series.cov": {"tf": 1}}, "df": 19}}}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1.4142135623730951}}, "df": 2, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.Series.map": {"tf": 1}}, "df": 1}, "s": {"docs": {"etl.pkg.flags": {"tf": 1}}, "df": 1}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.exceptions.DevMistakeError": {"tf": 1}}, "df": 1}}}}}}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.io.FileResolver": {"tf": 1}}, "df": 1}}}}}}}}}, "f": {"1": {"docs": {"etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 2.449489742783178}}, "df": 2}, "2": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 2.23606797749979}}, "df": 3}, "docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}, "etl.pkg.components.historian.HistoryBuilder.pipe": {"tf": 1}, "etl.pkg.components.identifiers.Identifier.pipe": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper.pipe": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper.check_taxonomies": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.pipe": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.map_remainder": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.map_target_entities": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iloc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.shape": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 2}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 4}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 3}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.join": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 3}, "etl.pkg.dataframe.DataFrame.round": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 2}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.div": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.le": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 3.605551275463989}, "etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.align": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.squeeze": {"tf": 3.4641016151377544}}, "df": 70}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.config": {"tf": 1}, "etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.round": {"tf": 2}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.from_dict": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 2}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.map": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.apply": {"tf": 1.4142135623730951}, "etl.pkg.resolvers.FieldResolver": {"tf": 1}, "etl.pkg.runtime.Runtime.get_config": {"tf": 1}, "etl.pkg.validators.FieldsValidator": {"tf": 1}}, "df": 40, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}}, "df": 1}}}, "y": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.from_dict": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1.7320508075688772}, "etl.pkg.validators.FieldsValidator": {"tf": 1}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1}}, "df": 22}}}}}}}}, "r": {"docs": {"etl.pkg.io.FileResolverIterator": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_folder": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe": {"tf": 1}, "etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 11}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2.23606797749979}, "etl.pkg.io.FileResolver": {"tf": 1.7320508075688772}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_is_a_dir": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_existing": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_folder": {"tf": 1}}, "df": 5}}}}}}}, "v": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 2}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 2}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 2}, "etl.pkg.dataframe.DataFrame.div": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 2}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 2}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 2}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 2}, "etl.pkg.dataframe.Series.div": {"tf": 1}}, "df": 18, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 2}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 2}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 2}, "etl.pkg.dataframe.DataFrame.div": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 2}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 2}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 2}, "etl.pkg.dataframe.Series.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1.4142135623730951}}, "df": 24, "s": {"docs": {"etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 2}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 2}}, "df": 6}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}, "r": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}}, "df": 2}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}}, "df": 2}}}, "e": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.div": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}}, "df": 24, "d": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.ndim": {"tf": 1}, "etl.pkg.dataframe.DataFrame.shape": {"tf": 1}, "etl.pkg.dataframe.Series.ndim": {"tf": 1}, "etl.pkg.dataframe.Series.shape": {"tf": 1}}, "df": 4}}}}}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.align": {"tf": 1}}, "df": 3}}}}}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}}, "df": 32}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}}, "df": 1}}}, "e": {"docs": {"etl.pkg.validators.FieldsValidator": {"tf": 1}}, "df": 1, "d": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}}, "df": 2}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.nunique": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.isin": {"tf": 1}}, "df": 2}}}}}, "k": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}}, "df": 2}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.exceptions": {"tf": 1}}, "df": 1}}}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.io.FileResolver.name_prefix": {"tf": 1}}, "df": 1}}}}}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 2}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 2}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}}, "df": 2}}}}}}}}, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {"etl.pkg.config.Registry": {"tf": 3}, "etl.pkg.config.Registry.load": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "o": {"docs": {"etl.pkg.config.Registry.load": {"tf": 1}, "etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.policy.ActionOnIssue": {"tf": 1}, "etl.sample_generic_etl.execute": {"tf": 1}}, "df": 13, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}}, "df": 9, "n": {"docs": {"etl.pkg.config.Registry.load": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 4}}}, "n": {"docs": {"etl.pkg.dataframe": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}}, "df": 10, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.io": {"tf": 1}}, "df": 3}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.iloc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.shape": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 2}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 4}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.join": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.round": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.div": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.le": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.Series.shape": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.groupby": {"tf": 4.242640687119285}, "etl.pkg.dataframe.Series.count": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.explode": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.nunique": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.value_counts": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.nlargest": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.isin": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.map": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.dropna": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.between": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.clip": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.align": {"tf": 3.605551275463989}, "etl.pkg.dataframe.Series.combine": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.squeeze": {"tf": 4}, "etl.pkg.dataframe.Series.combine_first": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.corr": {"tf": 2}, "etl.pkg.dataframe.Series.autocorr": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.view": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.add": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.sub": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.mul": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.div": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.divide": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.truediv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.floordiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.mod": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.pow": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.radd": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.rsub": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.rmul": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.rdiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.rmod": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.rpow": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.lt": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.gt": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.le": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.ge": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.ne": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.eq": {"tf": 2.23606797749979}}, "df": 106}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_orc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 103}}}}}, "/": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 2}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.eval": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}}, "df": 18}}}}}}}}}}}, "w": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}}, "df": 2}}, "g": {"docs": {"etl.pkg.dataframe.DataFrame.itertuples": {"tf": 2}, "etl.pkg.dataframe.Series.map": {"tf": 2.23606797749979}}, "df": 2, "s": {"docs": {"etl.pkg.dataframe.DataFrame.round": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 2.449489742783178}}, "df": 3}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.config.Registry.dump": {"tf": 1}}, "df": 1}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}}, "df": 5, "s": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1.7320508075688772}}, "df": 5}, "d": {"docs": {"etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}}, "df": 2}}}}}}}}, "e": {"docs": {"etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}}, "df": 2}, "c": {"docs": {}, "df": 0, "k": {"docs": {"etl.pkg.dataframe.Series.combine": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1.4142135623730951}}, "df": 2}}}, "b": {"docs": {"etl.pkg.resolvers.IdentifierResolver": {"tf": 1}, "etl.pkg.resolvers.TaxonomyResolver": {"tf": 1}, "etl.pkg.runtime.Runtime": {"tf": 1}}, "df": 3, "j": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {"etl.pkg.database": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {"etl.pkg.dataframe.DataFrame": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_orc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.shape": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1.4142135623730951}, "etl.pkg.flags.iso_date": {"tf": 1}, "etl.pkg.validators.date_validator": {"tf": 1}}, "df": 10, "f": {"2": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 2.6457513110645907}}, "df": 1}, "docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 3}, "etl.pkg.dataframe.DataFrame.query": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 2.23606797749979}}, "df": 3}, "o": {"docs": {}, "df": 0, "f": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.cov": {"tf": 1.4142135623730951}}, "df": 2}}}, "s": {"docs": {"etl.pkg.dataframe.Series.apply": {"tf": 2.23606797749979}}, "df": 1, "k": {"docs": {"etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1}}, "df": 2}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 2}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 2}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1}, "etl.pkg.dataframe.Series.shape": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.explode": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 2}, "etl.pkg.dataframe.Series.nlargest": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.isin": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.map": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.dropna": {"tf": 2}, "etl.pkg.dataframe.Series.between": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.clip": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.combine": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.squeeze": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.apply": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.view": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.add": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.sub": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.mul": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.div": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.divide": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.truediv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.mod": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.pow": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.radd": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rsub": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rmul": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rmod": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rpow": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.lt": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.gt": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.le": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.ge": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.ne": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.eq": {"tf": 1.7320508075688772}, "etl.sample_generic_etl.execute": {"tf": 1}}, "df": 62, "s": {"docs": {"etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}}, "df": 11}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 4.123105625617661}, "etl.pkg.dataframe.Series.dropna": {"tf": 1.7320508075688772}}, "df": 7, "n": {"docs": {}, "df": 0, "a": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 2}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.groupby": {"tf": 2}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.dropna": {"tf": 2.23606797749979}}, "df": 10}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}}, "df": 5}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}}, "df": 1}}}}}}}}, "s": {"1": {"docs": {"etl.pkg.dataframe.Series.combine": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.combine_first": {"tf": 2}, "etl.pkg.dataframe.Series.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.corr": {"tf": 1.4142135623730951}}, "df": 4}, "2": {"docs": {"etl.pkg.dataframe.Series.combine": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.combine_first": {"tf": 2}, "etl.pkg.dataframe.Series.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.corr": {"tf": 1.4142135623730951}}, "df": 4}, "3": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1}, "docs": {"etl.pkg.config.Registry.load": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.join": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.round": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.quantile": {"tf": 1}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.count": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.nunique": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.value_counts": {"tf": 2}, "etl.pkg.dataframe.Series.nlargest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.isin": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.map": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.between": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.corr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.autocorr": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.view": {"tf": 2}, "etl.pkg.flags": {"tf": 1}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1}}, "df": 44, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {"etl.pkg.components.checkers.SchemaChecker": {"tf": 1}, "etl.pkg.components.checkers.SchemaChecker.pipe": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 3.605551275463989}, "etl.sample_generic_etl.CSV_SCHEMA": {"tf": 1}, "etl.sample_generic_etl.execute": {"tf": 1}}, "df": 5, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.resolvers.SchemaResolver": {"tf": 1}}, "df": 1}}}}}}}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}}, "df": 2}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 2}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.shape": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.median": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.between": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.squeeze": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 61, "s": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1.4142135623730951}}, "df": 6}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.sample_generic_etl": {"tf": 1}}, "df": 1}}}}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"etl.sample_generic_etl": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 2}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}}, "df": 7, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.components.checkers.SchemaChecker": {"tf": 1}, "etl.pkg.components.historian.HistoryBuilder": {"tf": 1}, "etl.pkg.components.historian.HistoryBuilder.pipe": {"tf": 1}, "etl.pkg.components.identifiers.Identifier": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper.check_taxonomies": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.map_remainder": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.map_target_entities": {"tf": 1}, "etl.pkg.components.recycler.output_recyclable_file": {"tf": 1}, "etl.pkg.database.DBJob": {"tf": 1}, "etl.pkg.database.DBJob.execute": {"tf": 1}, "etl.pkg.dataframe.DataFrame.info": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.policy.PolicyResolver": {"tf": 1}, "etl.pkg.policy.PolicyResolver.tolerates_data_issues": {"tf": 1}, "etl.pkg.runtime.Runtime.get_target_db_connection": {"tf": 1}, "etl.pkg.workflows.Generic.did_produce_recyclable": {"tf": 1}}, "df": 18}}}}}, "b": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 2}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 2}, "etl.pkg.dataframe.DataFrame.div": {"tf": 2}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 2}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 2}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 2}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 2}, "etl.pkg.dataframe.Series.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}}, "df": 19, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}}, "df": 7}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 41}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.Series.map": {"tf": 1}}, "df": 1}}}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}}, "df": 19, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rsub": {"tf": 1.4142135623730951}}, "df": 4}}}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.Series.map": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"etl.sample_generic_etl.FIELDS_WITH_TAXONOMIES": {"tf": 1}, "etl.sample_generic_etl.FIELDS_WITH_VALIDATION": {"tf": 1}}, "df": 2}}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 1}}, "df": 50, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.iloc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 4.69041575982343}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 2}, "etl.pkg.dataframe.Series.clip": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.align": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 3}, "etl.pkg.dataframe.Series.cov": {"tf": 1}}, "df": 32}}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.io": {"tf": 1}}, "df": 4}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.drop": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}, "etl.pkg.io": {"tf": 1}, "etl.pkg.runtime": {"tf": 1}}, "df": 4}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_success": {"tf": 1}}, "df": 1, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 40, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.io.ARCHIVE_FOLDER": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 1}}, "df": 2}}}}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.io.file_resolver_context": {"tf": 1}}, "df": 1}}}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.query": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}}, "df": 1}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1}}}}}, "x": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}}, "df": 2, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.components.checkers.SchemaChecker.pipe": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}}, "df": 4}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"etl.tests.flags_test.TestArgumentParser.test_invalid_no_input": {"tf": 1}}, "df": 1}}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.flags": {"tf": 1.4142135623730951}}, "df": 4}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"etl.tests.flags_test.TestArgumentParser.test_valid_standalone_end_date": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1.4142135623730951}, "etl.pkg.io.ISO_DATE_PREFIX": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 1}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 1.4142135623730951}, "etl.pkg.runtime.Runtime.start": {"tf": 1}, "etl.pkg.runtime.context": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_end_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_archive": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_bad": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_report": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_recyclable": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_override_start_date": {"tf": 1.4142135623730951}}, "df": 18, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.runtime.context": {"tf": 1}}, "df": 1}}}}, "y": {"docs": {"etl.pkg.dataframe.Series.dropna": {"tf": 1.7320508075688772}}, "df": 1}}, "r": {"docs": {"etl.pkg.components.recycler.output_recyclable_file": {"tf": 1}, "etl.pkg.config.Registry.get": {"tf": 1}, "etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.join": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolver.get_file_name": {"tf": 1}, "etl.pkg.resolvers.FieldResolver.get_mnemonic": {"tf": 1.4142135623730951}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1}, "etl.pkg.workflows.Generic.read_csv": {"tf": 1}}, "df": 28, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 2}, "etl.pkg.dataframe.Series.to_string": {"tf": 2}, "etl.pkg.dataframe.Series.view": {"tf": 1}, "etl.pkg.flags.Namespace": {"tf": 1}, "etl.pkg.validators.regexp_validator": {"tf": 1}, "etl.pkg.validators.date_validator": {"tf": 1}}, "df": 17, "s": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}}, "df": 6}, "i": {"docs": {}, "df": 0, "o": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}}, "df": 3}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.policy.strict": {"tf": 1}}, "df": 1, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.lt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1.4142135623730951}}, "df": 6}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.policy.strict": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}}, "df": 23}}}}}}}, "y": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 4}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.runtime.Runtime.stop": {"tf": 1}}, "df": 2}, "r": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.io": {"tf": 1}}, "df": 3}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.flags.Namespace": {"tf": 1}, "etl.pkg.runtime.Runtime.get_config": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.dataframe.DataFrame.rename": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.join": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.quantile": {"tf": 1}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.clip": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 1.7320508075688772}, "etl.pkg.policy.Policy.action_on_invalid_field": {"tf": 1}}, "df": 24, "u": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.config.Registry": {"tf": 1}}, "df": 1}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 6, "s": {"docs": {"etl.pkg.runtime.Runtime.get_config": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.explode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.explode": {"tf": 1.4142135623730951}}, "df": 2}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.config.Registry": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"etl.pkg.config.Registry": {"tf": 1.7320508075688772}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 2}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {"etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iloc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 2}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_orc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.DataFrame.from_dict": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 2}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rpow": {"tf": 1.4142135623730951}, "etl.pkg.flags": {"tf": 1}, "etl.pkg.flags.ArgumentParser": {"tf": 1}, "etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1}}, "df": 103, "d": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}}, "df": 1}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.iloc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}}, "df": 5, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.iloc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}}, "df": 4}}, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1.4142135623730951}}, "df": 6}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 5}}}}}, "f": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1.7320508075688772}}, "df": 3}}, "r": {"docs": {"etl.pkg.dataframe.Series.groupby": {"tf": 4}, "etl.pkg.dataframe.Series.dropna": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.between": {"tf": 1.4142135623730951}}, "df": 3, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.items": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 2}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 2}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.add": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.div": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 2}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 2}, "etl.pkg.dataframe.DataFrame.le": {"tf": 2}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 2}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 2}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 2}, "etl.pkg.dataframe.Series": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.shape": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.round": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.quantile": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 2}, "etl.pkg.dataframe.Series.groupby": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.Series.count": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.mode": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.explode": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.unique": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nunique": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.value_counts": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.nlargest": {"tf": 3.605551275463989}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 3.605551275463989}, "etl.pkg.dataframe.Series.isin": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.map": {"tf": 3.872983346207417}, "etl.pkg.dataframe.Series.dropna": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.between": {"tf": 3.605551275463989}, "etl.pkg.dataframe.Series.clip": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.align": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.combine": {"tf": 4.123105625617661}, "etl.pkg.dataframe.Series.squeeze": {"tf": 3.872983346207417}, "etl.pkg.dataframe.Series.combine_first": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.Series.to_bag": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.to_string": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.apply": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.cov": {"tf": 3}, "etl.pkg.dataframe.Series.corr": {"tf": 3}, "etl.pkg.dataframe.Series.autocorr": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.view": {"tf": 3}, "etl.pkg.dataframe.Series.add": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.sub": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.mul": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.div": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.divide": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.truediv": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.floordiv": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.mod": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.pow": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.radd": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.rsub": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.rmul": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.rdiv": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.rmod": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.rpow": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.lt": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.gt": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.le": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.ge": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.ne": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.eq": {"tf": 3.1622776601683795}, "etl.pkg.validators.na_validator": {"tf": 1}, "etl.pkg.validators.minmax_validator": {"tf": 1.4142135623730951}}, "df": 109, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 1}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1.4142135623730951}, "etl.pkg.validators.regexp_validator": {"tf": 1}, "etl.pkg.validators.minmax_validator": {"tf": 1}}, "df": 3}}}}}}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {"etl.pkg.dataframe.DataFrame.items": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1, "d": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}}, "df": 3}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rename": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1.4142135623730951}}, "df": 32, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.query": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"etl.pkg.io.file_resolver_context": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.mode": {"tf": 1}}, "df": 1}}}}}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 1}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.clip": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}}, "df": 9}, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}}, "df": 7}, "d": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 2}, "etl.pkg.dataframe.DataFrame.join": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 2}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_no_input": {"tf": 1}}, "df": 23}}}, "y": {"docs": {"etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.apply": {"tf": 1.4142135623730951}}, "df": 9, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 8}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.items": {"tf": 2}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 2.23606797749979}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.pop": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.Series.groupby": {"tf": 3.605551275463989}}, "df": 4, "s": {"docs": {"etl.pkg.dataframe.Series.combine": {"tf": 1.4142135623730951}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.corr": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.corr": {"tf": 2.23606797749979}}, "df": 2}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1.4142135623730951}}, "df": 5, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}}, "df": 4}}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}}, "df": 2}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}}, "df": 2}}}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.mode": {"tf": 1.7320508075688772}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1}}, "df": 1}}}}}}}}}}, "d": {"docs": {}, "df": 0, "k": {"docs": {"etl.pkg.config.Registry": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.config.Registry.load": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}}, "df": 3}}, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 2}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.shape": {"tf": 1}, "etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.squeeze": {"tf": 3.3166247903554}}, "df": 40}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}}, "df": 2}}}}}, "k": {"docs": {"etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_failure": {"tf": 1}}, "df": 1}}, "z": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.shape": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.Series.shape": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1.4142135623730951}}, "df": 8}}, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.Series.view": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}}, "df": 2}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 1}}, "df": 1}, "e": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}, "etl.pkg.flags.Namespace": {"tf": 1.4142135623730951}}, "df": 2}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}}, "df": 1}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.dataframe.DataFrame.iloc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.shape": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 2}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 4}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.join": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.round": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.div": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.le": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.Series.shape": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.groupby": {"tf": 4.242640687119285}, "etl.pkg.dataframe.Series.count": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.explode": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.nunique": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.value_counts": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.nlargest": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.isin": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.map": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.dropna": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.between": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.clip": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.align": {"tf": 3.605551275463989}, "etl.pkg.dataframe.Series.combine": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.squeeze": {"tf": 4}, "etl.pkg.dataframe.Series.combine_first": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.corr": {"tf": 2}, "etl.pkg.dataframe.Series.autocorr": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.view": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.add": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.sub": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.mul": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.div": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.divide": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.truediv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.floordiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.mod": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.pow": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.radd": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.rsub": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.rmul": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.rdiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.rmod": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.rpow": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.lt": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.gt": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.le": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.ge": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.ne": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.eq": {"tf": 2.23606797749979}, "etl.pkg.policy.skip": {"tf": 1}}, "df": 107, "n": {"docs": {}, "df": 0, "a": {"docs": {"etl.pkg.dataframe.Series.median": {"tf": 1}}, "df": 1}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.io.FileResolver.set_date_from_name": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.policy.skip": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {"etl.pkg.policy.skip": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 12, "m": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}, "etl.pkg.exceptions.InvalidDataError": {"tf": 1}, "etl.pkg.resolvers": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_success": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_failure": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_other_failure": {"tf": 1}}, "df": 111, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 2}}}}}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 2}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 2}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1.7320508075688772}}, "df": 10, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 2}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1.4142135623730951}}, "df": 5}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.7320508075688772}}, "df": 2, "s": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"etl.pkg.dataframe.Series.view": {"tf": 1}}, "df": 1, "d": {"docs": {"etl.pkg.runtime": {"tf": 1}}, "df": 1}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.shape": {"tf": 1}}, "df": 26}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 1}, "etl.pkg.resolvers.IdentifierResolver": {"tf": 1}, "etl.pkg.resolvers.TaxonomyResolver": {"tf": 1}, "etl.sample_generic_etl.execute": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_happy_path": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_happy_with_files": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_args": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_start_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_valid_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_valid_standalone_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_no_input": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_not_existing": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_is_a_dir": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_existing": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_folder": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_many_dates": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_success": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_failure": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_other_failure": {"tf": 1}}, "df": 32}}}, "w": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_string": {"tf": 1.4142135623730951}}, "df": 5, "n": {"docs": {"etl.pkg.dataframe.DataFrame.drop": {"tf": 1}}, "df": 1}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.Series.isin": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.Series.autocorr": {"tf": 1.7320508075688772}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.Series.autocorr": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 2}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 2}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 2.8284271247461903}}, "df": 30}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1.7320508075688772}, "etl.sample_generic_etl": {"tf": 1}}, "df": 2}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}, "f": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}}, "df": 1, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}}, "df": 2}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 2.449489742783178}}, "df": 3}}, "r": {"docs": {"etl.pkg.dataframe.Series.memory_usage": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1.7320508075688772}}, "df": 3}}}}}}, "q": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 2}, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.squeeze": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.squeeze": {"tf": 3.1622776601683795}}, "df": 2, "d": {"docs": {"etl.pkg.dataframe.DataFrame.squeeze": {"tf": 2}, "etl.pkg.dataframe.Series.squeeze": {"tf": 2}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.squeeze": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.squeeze": {"tf": 2.23606797749979}}, "df": 2}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.7320508075688772}}, "df": 18}}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2}}, "df": 1}}}}}, "y": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.io": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 1}}, "df": 5}}}}, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}}, "df": 2}}}}}}}}}, "a": {"0": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 2.8284271247461903}}, "df": 1}, "1": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 2.8284271247461903}}, "df": 1}, "2": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 2.8284271247461903}}, "df": 1}, "3": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 2.8284271247461903}}, "df": 1}, "4": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 2.8284271247461903}}, "df": 1}, "5": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 2.8284271247461903}}, "df": 1}, "docs": {"etl.pkg.components.checkers.ContentChecker": {"tf": 1.4142135623730951}, "etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1.7320508075688772}, "etl.pkg.components.historian": {"tf": 1}, "etl.pkg.components.identifiers.Identifier.pipe": {"tf": 1}, "etl.pkg.components.interface.Executable.execute": {"tf": 1.7320508075688772}, "etl.pkg.components.interface.Pipable": {"tf": 1.4142135623730951}, "etl.pkg.components.interface.NopPipe": {"tf": 1}, "etl.pkg.components.transformers": {"tf": 1}, "etl.pkg.config": {"tf": 1.4142135623730951}, "etl.pkg.config.Registry": {"tf": 1.4142135623730951}, "etl.pkg.config.Registry.get": {"tf": 1}, "etl.pkg.dataframe": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iloc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.shape": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 2}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 3}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 5.477225575051661}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 4}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 5.5677643628300215}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 3.872983346207417}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.join": {"tf": 3.872983346207417}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 3}, "etl.pkg.dataframe.DataFrame.round": {"tf": 3}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 2}, "etl.pkg.dataframe.DataFrame.info": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 2}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.from_dict": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.add": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.div": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 4.898979485566356}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 4.898979485566356}, "etl.pkg.dataframe.DataFrame.le": {"tf": 4.898979485566356}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 4.898979485566356}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 4.898979485566356}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 4.898979485566356}, "etl.pkg.dataframe.Series.shape": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.round": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 5.5677643628300215}, "etl.pkg.dataframe.Series.explode": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.value_counts": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.isin": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.map": {"tf": 5.291502622129181}, "etl.pkg.dataframe.Series.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.align": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.Series.combine": {"tf": 2}, "etl.pkg.dataframe.Series.squeeze": {"tf": 5.5677643628300215}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.to_bag": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.apply": {"tf": 3}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 2}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.view": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.add": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.sub": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.mul": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.div": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.divide": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.truediv": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.floordiv": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.mod": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.pow": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.radd": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.rsub": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.rmul": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.rdiv": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.rmod": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.rpow": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.lt": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.gt": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.le": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.ge": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.ne": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.eq": {"tf": 3.1622776601683795}, "etl.pkg.exceptions": {"tf": 1}, "etl.pkg.exceptions.UndeclaredFieldError": {"tf": 1}, "etl.pkg.flags": {"tf": 1.7320508075688772}, "etl.pkg.flags.Namespace": {"tf": 1}, "etl.pkg.flags.iso_date": {"tf": 1}, "etl.pkg.io": {"tf": 1.7320508075688772}, "etl.pkg.io.ISO_DATE_PREFIX": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 2}, "etl.pkg.io.FileResolver.name_prefix": {"tf": 1}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 1}, "etl.pkg.io.file_resolver_context": {"tf": 1.7320508075688772}, "etl.pkg.io.FileResolverIterator": {"tf": 1}, "etl.pkg.policy": {"tf": 1}, "etl.pkg.policy.ActionOnIssue": {"tf": 1}, "etl.pkg.policy.Policy.action_on_invalid_field": {"tf": 1}, "etl.pkg.policy.strict": {"tf": 1}, "etl.pkg.policy.skip": {"tf": 1.4142135623730951}, "etl.pkg.policy.from_config": {"tf": 1}, "etl.pkg.resolvers.TaxonomyResolver": {"tf": 1.4142135623730951}, "etl.pkg.resolvers.SchemaResolver": {"tf": 1}, "etl.pkg.runtime": {"tf": 1}, "etl.pkg.runtime.Runtime.get_config": {"tf": 1}, "etl.pkg.runtime.context": {"tf": 2}, "etl.pkg.validators.FieldsValidator": {"tf": 1}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1.4142135623730951}, "etl.pkg.validators.regexp_validator": {"tf": 1.4142135623730951}, "etl.pkg.validators.minmax_validator": {"tf": 1}, "etl.pkg.validators.date_validator": {"tf": 2}, "etl.pkg.workflows.Base.execute": {"tf": 1.7320508075688772}, "etl.pkg.workflows.Generic": {"tf": 1.4142135623730951}, "etl.pkg.workflows.Generic.read_csv": {"tf": 1.4142135623730951}, "etl.sample_generic_etl": {"tf": 1}, "etl.sample_generic_etl.execute": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.parser": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_is_a_dir": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_folder": {"tf": 1}, "etl.tests.io_test.TestFileResolverIterator.test_iterator_from_dir": {"tf": 1}, "etl.tests.utils_test.create_test_file": {"tf": 1.4142135623730951}}, "df": 164, "r": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.Series.map": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"etl.pkg.components.checkers.SchemaChecker": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}, "etl.pkg.components.historian.HistoryBuilder": {"tf": 1}, "etl.pkg.components.historian.HistoryBuilder.pipe": {"tf": 1}, "etl.pkg.components.identifiers.Identifier": {"tf": 1}, "etl.pkg.components.identifiers.Identifier.pipe": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper.pipe": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper.check_taxonomies": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.pipe": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.map_remainder": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.map_target_entities": {"tf": 1}, "etl.pkg.components.recycler.output_recyclable_file": {"tf": 1}, "etl.pkg.config.Registry.get": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 2}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 2}, "etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1.7320508075688772}, "etl.pkg.io.file_resolver_context": {"tf": 1}, "etl.pkg.policy.from_config": {"tf": 1}, "etl.pkg.resolvers.FieldResolver": {"tf": 1}, "etl.pkg.resolvers.FieldResolver.get_mnemonic": {"tf": 1}, "etl.pkg.runtime.context": {"tf": 1}, "etl.pkg.validators.FieldsValidator": {"tf": 1}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1}, "etl.pkg.validators.regexp_validator": {"tf": 1}, "etl.pkg.workflows.Generic.read_csv": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.parser": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_happy_path": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_happy_with_files": {"tf": 1}}, "df": 34}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_args": {"tf": 1}}, "df": 9, "s": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1.7320508075688772}, "etl.pkg.exceptions.FlagsError": {"tf": 1}, "etl.pkg.flags": {"tf": 1}, "etl.pkg.flags.ArgumentParser.parse_args": {"tf": 2.23606797749979}, "etl.pkg.runtime.context": {"tf": 1}, "etl.pkg.validators.minmax_validator": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_guard_constructor": {"tf": 1}}, "df": 15}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.flags": {"tf": 1.7320508075688772}, "etl.pkg.flags.ArgumentParser": {"tf": 1.4142135623730951}, "etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser": {"tf": 1}}, "df": 4}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.flags": {"tf": 1.4142135623730951}, "etl.pkg.flags.ArgumentParser": {"tf": 1}, "etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1.7320508075688772}}, "df": 3}}}}}}, "e": {"docs": {"etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 2}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.join": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 2}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.isin": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.map": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.between": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1}, "etl.pkg.flags": {"tf": 1}, "etl.pkg.io.BAD_FOLDER": {"tf": 1}, "etl.pkg.io.ARCHIVE_FOLDER": {"tf": 1}, "etl.pkg.io.RECYCLABLE_FOLDER": {"tf": 1}, "etl.pkg.io.REPORT_FOLDER": {"tf": 1}, "etl.pkg.validators.minmax_validator": {"tf": 1}, "etl.pkg.workflows": {"tf": 1}}, "df": 58}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 2}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 2}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.view": {"tf": 1}}, "df": 11, "s": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 2.23606797749979}}, "df": 3}, "/": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.apply": {"tf": 1}}, "df": 1}}}}}}}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}}, "df": 7}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.drop": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.mode": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.4142135623730951}}, "df": 17}}}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.io.FileResolver": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_archive": {"tf": 1.4142135623730951}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_archive": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_success": {"tf": 1}}, "df": 4}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.components.checkers.ContentChecker": {"tf": 1}, "etl.pkg.components.identifiers.Identifier.pipe": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.clip": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.exceptions": {"tf": 1}, "etl.pkg.policy.skip": {"tf": 1}, "etl.pkg.runtime.Runtime.start": {"tf": 1}, "etl.pkg.runtime.Runtime.stop": {"tf": 1}, "etl.pkg.workflows.Generic.execute": {"tf": 1}}, "df": 33, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.database": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.exceptions": {"tf": 1}, "etl.pkg.runtime": {"tf": 1}}, "df": 4}, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}}, "df": 4}}}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.Series.rename": {"tf": 1.4142135623730951}}, "df": 1, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 6, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}}, "df": 3}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.corr": {"tf": 1}}, "df": 13}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.DataFrame.from_dict": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}}, "df": 95}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 1}}, "df": 4}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.between": {"tf": 1}}, "df": 2}}, "g": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 3}}, "df": 6, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}}, "df": 12}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 40}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.Series.align": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 2.449489742783178}}, "df": 2}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}}, "df": 4}}}}, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.dropna": {"tf": 2}}, "df": 1}}}}, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "m": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.Series.quantile": {"tf": 1}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 1}}, "df": 3, "s": {"docs": {"etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 3}}}}}}}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.checkers.ContentChecker": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"etl.pkg.config.Registry": {"tf": 1}}, "df": 1}}, "n": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1.4142135623730951}, "etl.pkg.components.interface": {"tf": 1.4142135623730951}, "etl.pkg.components.interface.Pipable": {"tf": 1}, "etl.pkg.components.interface.Pipable.pipe": {"tf": 1}, "etl.pkg.components.interface.NopPipe.pipe": {"tf": 1}, "etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.database": {"tf": 1}, "etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 2}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.isin": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.map": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1}, "etl.pkg.exceptions.UndeclaredFieldError": {"tf": 1}, "etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1}, "etl.pkg.io": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolver": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 1}, "etl.pkg.io.file_resolver_context": {"tf": 1}, "etl.pkg.io.FileResolverIterator": {"tf": 1.4142135623730951}, "etl.pkg.policy.Policy": {"tf": 1}, "etl.pkg.resolvers.IdentifierResolver": {"tf": 1.4142135623730951}, "etl.pkg.resolvers.SchemaResolver": {"tf": 1}, "etl.pkg.runtime.context": {"tf": 1}, "etl.pkg.validators.minmax_validator": {"tf": 1}, "etl.sample_generic_etl.execute": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_override_start_date": {"tf": 1}}, "df": 55, "d": {"docs": {"etl.pkg.components.interface.Executable.execute": {"tf": 1}, "etl.pkg.components.interface.Pipable.pipe": {"tf": 1}, "etl.pkg.components.interface.NopPipe.pipe": {"tf": 1}, "etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 2}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 3}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.join": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 2}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 2}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.quantile": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.explode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.isin": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.map": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.between": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.clip": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.align": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.combine": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.corr": {"tf": 2}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.view": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rpow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.lt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.gt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.le": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.ge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.ne": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.eq": {"tf": 1.4142135623730951}, "etl.pkg.flags.Namespace": {"tf": 1.4142135623730951}, "etl.pkg.runtime.Runtime": {"tf": 1}, "etl.pkg.runtime.context": {"tf": 1}, "etl.pkg.workflows": {"tf": 1}, "etl.pkg.workflows.Base.execute": {"tf": 1}, "etl.sample_generic_etl.main": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_happy_path": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_happy_with_files": {"tf": 1}}, "df": 116, "/": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 2}}}}, "y": {"docs": {"etl.pkg.config.Registry.get": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}, "etl.pkg.io.FileResolver.output_recyclable": {"tf": 1}, "etl.pkg.policy.strict": {"tf": 1}, "etl.pkg.runtime.Runtime.get_logger": {"tf": 1}, "etl.pkg.runtime.Runtime.get_target_db_connection": {"tf": 1}}, "df": 66, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.config.Registry.load": {"tf": 1}}, "df": 1}}}}}}, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 2.449489742783178}}, "df": 4}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.div": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 4.358898943540674}}, "df": 17}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.isin": {"tf": 2}}, "df": 4}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}}, "df": 7}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 1}}}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {"etl.pkg.dataframe.Series.between": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"etl.pkg.config.Registry": {"tf": 1.4142135623730951}}, "df": 1, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.config.Registry": {"tf": 2}}, "df": 1}}}}}}}}}, "o": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.7320508075688772}}, "df": 3, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 2}}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.Series.autocorr": {"tf": 2}}, "df": 1, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.Series.autocorr": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}}}, "g": {"docs": {"etl.pkg.dataframe.Series.shape": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.components.identifiers": {"tf": 1}}, "df": 1}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1}}, "df": 1, "d": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 3}}}}}}}}, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.components.interface": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe": {"tf": 1}}, "df": 1, "s": {"docs": {"etl.pkg.database": {"tf": 1}}, "df": 1}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.resolvers": {"tf": 1}}, "df": 1, "s": {"docs": {"etl.pkg.config": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}}, "df": 5}}, "u": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.exceptions": {"tf": 1}}, "df": 5}}}, "c": {"docs": {"etl.pkg.dataframe.Series.map": {"tf": 1}}, "df": 1}}, "s": {"docs": {"etl.pkg.components.interface.Executable.execute": {"tf": 1}, "etl.pkg.config.Registry": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 2}, "etl.pkg.dataframe.DataFrame.join": {"tf": 2}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 2}, "etl.pkg.dataframe.DataFrame.items": {"tf": 2}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 2}, "etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.between": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.view": {"tf": 2}, "etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1.4142135623730951}, "etl.pkg.flags.iso_date": {"tf": 1}, "etl.pkg.io": {"tf": 1}, "etl.pkg.runtime": {"tf": 1}, "etl.pkg.workflows.Base.execute": {"tf": 1}, "etl.pkg.workflows.Generic.read_csv": {"tf": 1}, "etl.sample_generic_etl.FIELDS_WITH_EXTERNAL_IDENTIFIERS": {"tf": 1}, "etl.sample_generic_etl.execute": {"tf": 1.4142135623730951}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_is_a_dir": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_override_start_date": {"tf": 1}}, "df": 48, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}}, "df": 6}}}}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.Series.combine": {"tf": 1}}, "df": 1, "d": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}}, "df": 4}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 2}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.eval": {"tf": 1.4142135623730951}}, "df": 1}}}}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.resolvers.IdentifierResolver": {"tf": 1}, "etl.pkg.resolvers.TaxonomyResolver": {"tf": 1}, "etl.pkg.resolvers.SchemaResolver": {"tf": 1}}, "df": 3}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"etl.tests.flags_test.TestArgumentParser.test_invalid_no_input": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.config": {"tf": 1}, "etl.pkg.config.Registry": {"tf": 1}}, "df": 2, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.config.Registry": {"tf": 1}}, "df": 1}}, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.Series.quantile": {"tf": 1}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 1}}, "df": 3}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.Series.combine": {"tf": 1}}, "df": 1}}}}}}}}, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.map": {"tf": 2}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}}, "df": 14, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1.4142135623730951}}, "df": 3}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.dataframe.DataFrame.applymap": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.map": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 3}, "d": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}}, "df": 7}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 1}}}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}}, "df": 3}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.Series.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.Series.value_counts": {"tf": 1}}, "df": 1}}}}}}}}}, "i": {"docs": {"etl.pkg.dataframe.DataFrame.eval": {"tf": 1}}, "df": 1}}, "z": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.config.Registry": {"tf": 1.7320508075688772}, "etl.pkg.io.FileResolver": {"tf": 1}}, "df": 2}}}}, "m": {"docs": {"etl.pkg.dataframe.Series.map": {"tf": 3}}, "df": 1, "a": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.config.Registry": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 2}}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}}, "df": 24}}}, "p": {"docs": {"etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1}}, "df": 2}}, "c": {"docs": {"etl.pkg.dataframe.DataFrame.explode": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.config.Registry.load": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.applymap": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.map": {"tf": 1.7320508075688772}, "etl.pkg.policy.Policy": {"tf": 1}, "etl.pkg.policy.Policy.action_on_invalid_field": {"tf": 1}}, "df": 4, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.policy.ActionOnIssue": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {"etl.pkg.policy.PolicyDict": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {"etl.tests.io_test.TestFileResolver.test_override_start_date": {"tf": 1}}, "df": 1}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}}, "df": 5}}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1.4142135623730951}}, "df": 2}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}}, "df": 3, "s": {"docs": {"etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}}, "df": 3}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 1}}, "df": 3}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}, "etl.pkg.flags": {"tf": 1}}, "df": 53}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.runtime.Runtime.get_target_db_connection": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {"etl.pkg.config.Registry.load": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 2}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.clip": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}, "etl.pkg.io": {"tf": 1}, "etl.pkg.io.file_resolver_context": {"tf": 1}, "etl.pkg.runtime.Runtime": {"tf": 1}}, "df": 41, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.flags.Namespace": {"tf": 1}}, "df": 4, "s": {"docs": {"etl.pkg.flags.Namespace": {"tf": 1}}, "df": 1}}}}}}}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.div": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.add": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.radd": {"tf": 1.4142135623730951}}, "df": 23, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.radd": {"tf": 1.4142135623730951}, "etl.pkg.flags": {"tf": 1}}, "df": 10, "a": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 9}}}}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.flags": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.io.FileResolver.name_prefix": {"tf": 1}}, "df": 2}, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}}, "df": 2}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.workflows.Base": {"tf": 1}}, "df": 2}}}}}}}, "f": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.io": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_no_input": {"tf": 1}}, "df": 22, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}}, "df": 1}}}}}}}}, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.round": {"tf": 1}}, "df": 1}}}}}}}, "v": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 6}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 4}}}}}}}}, "i": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 2.449489742783178}}, "df": 2, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.runtime.Runtime": {"tf": 1}}, "df": 1}}}}, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 3}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 2}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.div": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.le": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 2}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.clip": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.align": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.Series.squeeze": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 66}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1.7320508075688772}}, "df": 5}}}, "k": {"docs": {}, "df": 0, "a": {"docs": {"etl.pkg.workflows.Generic": {"tf": 1}}, "df": 1}}}, "i": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.dropna": {"tf": 1.7320508075688772}}, "df": 12, "n": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 2}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 2}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 5}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 2}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 4.58257569495584}, "etl.pkg.dataframe.DataFrame.join": {"tf": 3.872983346207417}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 2}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 5.385164807134504}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.median": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.groupby": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.count": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 2}, "etl.pkg.dataframe.Series.unique": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.value_counts": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.nlargest": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.isin": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.map": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.dropna": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.clip": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.align": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.combine": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.squeeze": {"tf": 2}, "etl.pkg.dataframe.Series.combine_first": {"tf": 2}, "etl.pkg.dataframe.Series.to_string": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.apply": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rpow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.lt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.gt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.le": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.ge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.ne": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.eq": {"tf": 1.4142135623730951}, "etl.pkg.exceptions.InvalidDataError": {"tf": 1}, "etl.pkg.flags": {"tf": 1}, "etl.pkg.io": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 1}, "etl.pkg.resolvers.IdentifierResolver": {"tf": 1}, "etl.pkg.resolvers.TaxonomyResolver": {"tf": 1}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1}, "etl.pkg.validators.na_validator": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_archive": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_bad": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_report": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_recyclable": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_override_start_date": {"tf": 1}, "etl.tests.utils_test.create_test_file": {"tf": 1}}, "df": 121, "t": {"6": {"4": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.shape": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.nlargest": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 2.23606797749979}}, "df": 16}, "docs": {}, "df": 0}, "8": {"docs": {"etl.pkg.dataframe.Series.view": {"tf": 1.7320508075688772}}, "df": 1}, "docs": {"etl.pkg.dataframe.DataFrame.shape": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 2}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}, "etl.pkg.resolvers.FieldResolver.get_id": {"tf": 1}}, "df": 80, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.checkers.SchemaChecker": {"tf": 1}, "etl.pkg.components.historian.HistoryBuilder": {"tf": 1}, "etl.pkg.components.identifiers.Identifier": {"tf": 1}, "etl.pkg.components.interface": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper": {"tf": 1}, "etl.sample_generic_etl.execute": {"tf": 1}}, "df": 7}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.database": {"tf": 1}}, "df": 1}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 2}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.corr": {"tf": 1.4142135623730951}}, "df": 4}}}}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.Series.quantile": {"tf": 1}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 1}, "etl.pkg.exceptions.UndeclaredFieldError": {"tf": 1}}, "df": 4, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}}, "df": 2}}}}}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.workflows.Generic": {"tf": 1}, "etl.sample_generic_etl": {"tf": 1}, "etl.sample_generic_etl.execute": {"tf": 1}}, "df": 4}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.io.ARCHIVE_FOLDER": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.iloc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.shape": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.view": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1.4142135623730951}}, "df": 26, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1}}, "df": 2}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.rename": {"tf": 1}}, "df": 1}}}, "o": {"docs": {"etl.pkg.components.historian": {"tf": 1}, "etl.pkg.components.interface.Pipable": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.workflows.Base": {"tf": 1}}, "df": 13}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.quantile": {"tf": 1}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 1}}, "df": 3}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}}, "df": 2}}}}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.components.checkers.SchemaChecker.pipe": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker": {"tf": 1.4142135623730951}, "etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 2.23606797749979}, "etl.pkg.components.historian.HistoryBuilder.pipe": {"tf": 1}, "etl.pkg.components.identifiers.Identifier.pipe": {"tf": 1.4142135623730951}, "etl.pkg.components.interface.Pipable": {"tf": 1}, "etl.pkg.components.interface.Pipable.pipe": {"tf": 1}, "etl.pkg.components.interface.NopPipe.pipe": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper.pipe": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper.check_taxonomies": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.pipe": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.map_remainder": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.map_target_entities": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.exceptions.InvalidFileError": {"tf": 1}, "etl.pkg.exceptions.InvalidDataError": {"tf": 1}, "etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1.4142135623730951}, "etl.pkg.flags.iso_date": {"tf": 1}, "etl.pkg.io": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 1}, "etl.pkg.io.FileResolverIterator": {"tf": 1}, "etl.pkg.policy.Policy.action_on_invalid_field": {"tf": 1}, "etl.pkg.resolvers.SchemaResolver": {"tf": 1}, "etl.pkg.validators.na_validator": {"tf": 1}, "etl.pkg.validators.minmax_validator": {"tf": 1.4142135623730951}, "etl.pkg.workflows.Generic.read_csv": {"tf": 1.4142135623730951}, "etl.sample_generic_etl.CSV_SCHEMA": {"tf": 1}, "etl.sample_generic_etl.execute": {"tf": 1.4142135623730951}, "etl.tests.flags_test.TestArgumentParser.test_invalid_no_input": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_is_a_dir": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_folder": {"tf": 1}}, "df": 64, "s": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 46}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rename": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.dropna": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.clip": {"tf": 1.4142135623730951}}, "df": 9}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1.4142135623730951}, "etl.pkg.io.file_resolver_context": {"tf": 1}, "etl.pkg.runtime.context": {"tf": 1}}, "df": 3}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.config.Registry.load": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"etl.pkg.runtime.context": {"tf": 1}}, "df": 1, "d": {"docs": {"etl.pkg.dataframe.Series.view": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 1}}, "df": 2}, "s": {"docs": {"etl.tests.flags_test.TestArgumentParser.parser": {"tf": 1}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.map": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.apply": {"tf": 1.4142135623730951}}, "df": 8}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe": {"tf": 1}}, "df": 1}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.exceptions.InvalidFileError": {"tf": 1}, "etl.pkg.exceptions.InvalidDataError": {"tf": 1}, "etl.pkg.policy.Policy.action_on_invalid_field": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_args": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_start_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_guard_constructor": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_no_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_invalid_date": {"tf": 1}}, "df": 9, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}}, "df": 2}}, "t": {"docs": {"etl.pkg.dataframe.Series.isin": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 1}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.components.interface.NopPipe": {"tf": 1}}, "df": 1}}, "s": {"docs": {"etl.pkg.runtime.Runtime.start": {"tf": 1}}, "df": 1}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"etl.pkg.dataframe.DataFrame": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 4.795831523312719}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 2}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 2}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 4}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 3.872983346207417}, "etl.pkg.dataframe.DataFrame.join": {"tf": 4.69041575982343}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 3}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 2}, "etl.pkg.dataframe.DataFrame.add": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.div": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.le": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.Series": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.Series.explode": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.value_counts": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 3}, "etl.pkg.dataframe.Series.combine": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.view": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 2}, "etl.pkg.dataframe.Series.sub": {"tf": 2}, "etl.pkg.dataframe.Series.mul": {"tf": 2}, "etl.pkg.dataframe.Series.div": {"tf": 2}, "etl.pkg.dataframe.Series.divide": {"tf": 2}, "etl.pkg.dataframe.Series.truediv": {"tf": 2}, "etl.pkg.dataframe.Series.floordiv": {"tf": 2}, "etl.pkg.dataframe.Series.mod": {"tf": 2}, "etl.pkg.dataframe.Series.pow": {"tf": 2}, "etl.pkg.dataframe.Series.radd": {"tf": 2}, "etl.pkg.dataframe.Series.rsub": {"tf": 2}, "etl.pkg.dataframe.Series.rmul": {"tf": 2}, "etl.pkg.dataframe.Series.rdiv": {"tf": 2}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 2}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 2}, "etl.pkg.dataframe.Series.rmod": {"tf": 2}, "etl.pkg.dataframe.Series.rpow": {"tf": 2}, "etl.pkg.dataframe.Series.lt": {"tf": 2}, "etl.pkg.dataframe.Series.gt": {"tf": 2}, "etl.pkg.dataframe.Series.le": {"tf": 2}, "etl.pkg.dataframe.Series.ge": {"tf": 2}, "etl.pkg.dataframe.Series.ne": {"tf": 2}, "etl.pkg.dataframe.Series.eq": {"tf": 2}}, "df": 100, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.iloc": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1.4142135623730951}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}}, "df": 2}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}}, "df": 7}, "r": {"docs": {"etl.pkg.dataframe.DataFrame.drop": {"tf": 1}}, "df": 1}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.explode": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.categorize": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}}, "df": 28}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.dropna": {"tf": 1.4142135623730951}}, "df": 2}, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.Series.isin": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 102}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.Series.rename": {"tf": 1}}, "df": 1}}}}}}}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 2}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1.7320508075688772}}, "df": 14, "d": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.between": {"tf": 1}}, "df": 5, "/": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}}, "df": 1}}}}}}}}}}, "s": {"docs": {"etl.pkg.dataframe.Series.unique": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}}, "df": 6}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.Series.between": {"tf": 2}, "etl.pkg.validators.minmax_validator": {"tf": 1}}, "df": 2}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1.4142135623730951}}, "df": 4}}}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.sample_generic_etl.execute": {"tf": 1}}, "df": 2}}}}, "f": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1.4142135623730951}}, "df": 24, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1.4142135623730951}}, "df": 5, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}}, "df": 4}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 2}}}}}}, "o": {"docs": {"etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1.4142135623730951}}, "df": 1, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_orc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 2}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1.4142135623730951}}, "df": 9}}}}}}}}}, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.eval": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.runtime": {"tf": 1}}, "df": 1}}, "s": {"docs": {"etl.pkg.runtime.Runtime": {"tf": 1}}, "df": 1}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}}, "df": 2}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.align": {"tf": 1}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.lt": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.le": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 2.23606797749979}}, "df": 6}}}}}}}}, "\u00ee": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.validators.regexp_validator": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"etl.pkg.components.checkers.SchemaChecker.pipe": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1.4142135623730951}, "etl.pkg.components.interface.NopPipe": {"tf": 1}, "etl.pkg.config": {"tf": 1}, "etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.config.Registry.load": {"tf": 1}, "etl.pkg.config.Registry.get": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iloc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.shape": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 4.69041575982343}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 2}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 2}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.join": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 2}, "etl.pkg.dataframe.DataFrame.round": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.shape": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.mode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.map": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.clip": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.align": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.combine": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.squeeze": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}, "etl.pkg.exceptions.InvalidFileError": {"tf": 1}, "etl.pkg.exceptions.InvalidDataError": {"tf": 1}, "etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1}, "etl.pkg.io": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 2}, "etl.pkg.io.FileResolver.date_pattern": {"tf": 1}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 2}, "etl.pkg.policy.ActionOnIssue": {"tf": 1}, "etl.pkg.runtime.Runtime": {"tf": 1}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1}, "etl.pkg.validators.date_validator": {"tf": 1}, "etl.sample_generic_etl.execute": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_no_input": {"tf": 1}}, "df": 127, "n": {"docs": {}, "df": 0, "a": {"docs": {"etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}}, "df": 2}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.policy.ActionOnIssue": {"tf": 1}, "etl.pkg.policy.PolicyDict": {"tf": 1}, "etl.pkg.policy.Policy": {"tf": 1}, "etl.pkg.policy.strict": {"tf": 1}}, "df": 4, "s": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.policy": {"tf": 1}, "etl.pkg.policy.Policy": {"tf": 1}}, "df": 3}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.Series.isin": {"tf": 2.8284271247461903}, "etl.pkg.resolvers.IdentifierResolver": {"tf": 1.4142135623730951}}, "df": 2}}, "o": {"docs": {"etl.pkg.flags.iso_date": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 1}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 1}, "etl.pkg.validators.date_validator": {"tf": 1}}, "df": 4}}, "t": {"docs": {"etl.pkg.components.checkers.SchemaChecker.pipe": {"tf": 1}, "etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 1}, "etl.pkg.policy.Policy": {"tf": 1}, "etl.pkg.runtime.context": {"tf": 1}}, "df": 33, "s": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "f": {"docs": {"etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 3}}}}, "e": {"docs": {}, "df": 0, "m": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 2}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}}, "df": 3, "s": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1.4142135623730951}}, "df": 6}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 3}}}, "e": {"docs": {"etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 2}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.tests.io_test.TestFileResolverIterator.test_iterator_from_dir": {"tf": 1}}, "df": 5, "s": {"docs": {"etl.pkg.dataframe.DataFrame.items": {"tf": 1}}, "df": 1}, "d": {"docs": {"etl.pkg.dataframe.DataFrame.items": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.io": {"tf": 1}, "etl.pkg.io.file_resolver_context": {"tf": 1}, "etl.pkg.io.FileResolverIterator": {"tf": 1}}, "df": 5, "[": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.io.file_resolver_context": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.runtime.context": {"tf": 1}}, "df": 1}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.quantile": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.apply": {"tf": 1.4142135623730951}}, "df": 4}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.iterrows": {"tf": 2}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1}}, "df": 3}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 2}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1}}, "df": 3}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nlargest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1.4142135623730951}}, "df": 4}}}}, "f": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}, "etl.pkg.config.Registry.get": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 3.872983346207417}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 2}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.join": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.quantile": {"tf": 1}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.map": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.dropna": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 2}, "etl.pkg.dataframe.Series.apply": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}, "etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 1}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1}}, "df": 98}, "d": {"docs": {"etl.pkg.config.Registry": {"tf": 2}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}, "etl.pkg.resolvers.FieldResolver.get_id": {"tf": 1}, "etl.pkg.resolvers.IdentifierResolver": {"tf": 1}, "etl.pkg.resolvers.TaxonomyResolver": {"tf": 1}}, "df": 6, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.components.historian.HistoryBuilder": {"tf": 1}, "etl.pkg.components.identifiers.Identifier": {"tf": 1}, "etl.pkg.components.identifiers.Identifier.pipe": {"tf": 1.4142135623730951}, "etl.pkg.components.mappers.TaxonomyMapper": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 2}, "etl.pkg.resolvers.IdentifierResolver": {"tf": 1.7320508075688772}}, "df": 7, "s": {"docs": {"etl.pkg.components.identifiers": {"tf": 1.4142135623730951}, "etl.pkg.components.identifiers.Identifier.pipe": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.sample_generic_etl.FIELDS_WITH_EXTERNAL_IDENTIFIERS": {"tf": 1}}, "df": 4}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.resolvers.IdentifierResolver": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}, "y": {"docs": {"etl.pkg.components.identifiers.Identifier.pipe": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 3}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}}, "df": 3}}}, "x": {"docs": {"etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1.7320508075688772}}, "df": 2}}, "o": {"docs": {"etl.pkg.exceptions.IOEtlError": {"tf": 1}, "etl.pkg.io": {"tf": 1}, "etl.tests.io_test": {"tf": 1}, "etl.tests.io_test.TestFileResolver": {"tf": 1}, "etl.tests.io_test.TestFileResolverIterator": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext": {"tf": 1}}, "df": 6, "/": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.config.Registry": {"tf": 1}}, "df": 1}}}}}}}}}, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.config.Registry": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.config.Registry": {"tf": 1}}, "df": 1}}}}}}, "w": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.config.Registry": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {"etl.pkg.config.Registry": {"tf": 1.7320508075688772}}, "df": 1}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 5}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1.4142135623730951}, "etl.pkg.workflows.Generic": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.Series.median": {"tf": 1}}, "df": 1}}, "s": {"docs": {"etl.pkg.flags.Namespace": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}}, "df": 1, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 2}}}}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {"etl.pkg.dataframe.DataFrame.iloc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1.4142135623730951}}, "df": 4}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.sample_generic_etl": {"tf": 1}}, "df": 1}}}}}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 2}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1.7320508075688772}}, "df": 4}}}}}}, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.rename": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 2}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}}, "df": 10, "d": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}}, "df": 10}}}}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {"etl.pkg.config.Registry.load": {"tf": 1}, "etl.pkg.dataframe": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_no_input": {"tf": 1}}, "df": 18, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.checkers.SchemaChecker": {"tf": 1}, "etl.pkg.components.historian.HistoryBuilder": {"tf": 1}, "etl.pkg.components.identifiers.Identifier": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.dtype": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 2}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 2.449489742783178}, "etl.pkg.policy.PolicyResolver": {"tf": 1}, "etl.pkg.policy.from_config": {"tf": 1}, "etl.pkg.resolvers.FieldResolver": {"tf": 1}, "etl.pkg.resolvers.IdentifierResolver": {"tf": 1}, "etl.pkg.resolvers.SchemaResolver": {"tf": 1}, "etl.pkg.validators.FieldsValidator": {"tf": 1}}, "df": 22, "s": {"docs": {"etl.pkg.dataframe.DataFrame.dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.exceptions": {"tf": 1}, "etl.pkg.policy": {"tf": 1}}, "df": 25}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1.4142135623730951}, "etl.pkg.workflows.Base": {"tf": 1}}, "df": 3}}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.workflows.Generic": {"tf": 1}}, "df": 1}}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.checkers.SchemaChecker.pipe": {"tf": 1.4142135623730951}, "etl.pkg.components.checkers.ContentChecker": {"tf": 2.23606797749979}, "etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 3.1622776601683795}, "etl.pkg.components.historian": {"tf": 1}, "etl.pkg.components.identifiers": {"tf": 1}, "etl.pkg.components.identifiers.Identifier.pipe": {"tf": 1}, "etl.pkg.components.interface": {"tf": 1}, "etl.pkg.components.interface.Executable.execute": {"tf": 1}, "etl.pkg.components.interface.Pipable.pipe": {"tf": 1.4142135623730951}, "etl.pkg.components.interface.NopPipe.pipe": {"tf": 1.4142135623730951}, "etl.pkg.config": {"tf": 1}, "etl.pkg.config.Registry": {"tf": 2.23606797749979}, "etl.pkg.config.Registry.load": {"tf": 1.4142135623730951}, "etl.pkg.config.Registry.get": {"tf": 2.23606797749979}, "etl.pkg.config.Registry.dump": {"tf": 1}, "etl.pkg.dataframe": {"tf": 1}, "etl.pkg.dataframe.DataFrame": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.iloc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.shape": {"tf": 2}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 6.557438524302}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 3.872983346207417}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 5.656854249492381}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 3.872983346207417}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.query": {"tf": 2}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 3}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 7.0710678118654755}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 4.898979485566356}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 6.164414002968976}, "etl.pkg.dataframe.DataFrame.join": {"tf": 5.385164807134504}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.items": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 4}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 5.0990195135927845}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 4.795831523312719}, "etl.pkg.dataframe.DataFrame.add": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.div": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.le": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 3.605551275463989}, "etl.pkg.dataframe.Series": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.shape": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.dt": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.cat": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.str": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.rename": {"tf": 3}, "etl.pkg.dataframe.Series.round": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 3}, "etl.pkg.dataframe.Series.quantile": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 2}, "etl.pkg.dataframe.Series.median": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.groupby": {"tf": 5.477225575051661}, "etl.pkg.dataframe.Series.count": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.mode": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.explode": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.unique": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 2}, "etl.pkg.dataframe.Series.value_counts": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.nlargest": {"tf": 4.358898943540674}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 4.358898943540674}, "etl.pkg.dataframe.Series.isin": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.map": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.Series.dropna": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.between": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.clip": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.Series.align": {"tf": 3}, "etl.pkg.dataframe.Series.combine": {"tf": 5.0990195135927845}, "etl.pkg.dataframe.Series.squeeze": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.combine_first": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.to_string": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.apply": {"tf": 4.123105625617661}, "etl.pkg.dataframe.Series.cov": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.corr": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.autocorr": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 4.123105625617661}, "etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.view": {"tf": 3.872983346207417}, "etl.pkg.dataframe.Series.add": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.sub": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.mul": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.div": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.divide": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.truediv": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.floordiv": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.mod": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.pow": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.radd": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.rsub": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.rmul": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.rdiv": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.rmod": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.rpow": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.lt": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.gt": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.le": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.ge": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.ne": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.eq": {"tf": 2.449489742783178}, "etl.pkg.exceptions": {"tf": 1}, "etl.pkg.exceptions.InvalidDataError": {"tf": 1}, "etl.pkg.flags": {"tf": 2}, "etl.pkg.flags.ArgumentParser.parse_args": {"tf": 2}, "etl.pkg.io.ISO_DATE_PREFIX": {"tf": 1.4142135623730951}, "etl.pkg.io.BAD_FOLDER": {"tf": 1}, "etl.pkg.io.ARCHIVE_FOLDER": {"tf": 1}, "etl.pkg.io.RECYCLABLE_FOLDER": {"tf": 1}, "etl.pkg.io.REPORT_FOLDER": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 2.6457513110645907}, "etl.pkg.io.FileResolver.date_pattern": {"tf": 1}, "etl.pkg.io.FileResolver.name_prefix": {"tf": 1}, "etl.pkg.io.FileResolver.get_file_name": {"tf": 1}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 2}, "etl.pkg.io.FileResolver.output_report": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolver.output_recyclable": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_archive": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolver.move_to_bad": {"tf": 1.4142135623730951}, "etl.pkg.io.file_resolver_context": {"tf": 2.23606797749979}, "etl.pkg.io.FileResolverIterator": {"tf": 1}, "etl.pkg.policy.Policy": {"tf": 1}, "etl.pkg.policy.Policy.action_on_invalid_field": {"tf": 1}, "etl.pkg.policy.strict": {"tf": 1}, "etl.pkg.policy.from_config": {"tf": 1}, "etl.pkg.resolvers.IdentifierResolver": {"tf": 1.7320508075688772}, "etl.pkg.resolvers.TaxonomyResolver": {"tf": 1.4142135623730951}, "etl.pkg.runtime": {"tf": 1}, "etl.pkg.runtime.Runtime.get_config": {"tf": 1}, "etl.pkg.runtime.Runtime.get_logger": {"tf": 1}, "etl.pkg.runtime.context": {"tf": 1.4142135623730951}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1.7320508075688772}, "etl.pkg.validators.regexp_validator": {"tf": 2.449489742783178}, "etl.pkg.validators.na_validator": {"tf": 1}, "etl.pkg.validators.minmax_validator": {"tf": 2}, "etl.pkg.validators.date_validator": {"tf": 1.4142135623730951}, "etl.pkg.workflows.Base.execute": {"tf": 1}, "etl.pkg.workflows.Generic.read_csv": {"tf": 1.4142135623730951}, "etl.pkg.workflows.Generic.execute": {"tf": 1.4142135623730951}, "etl.sample_generic_etl": {"tf": 1.7320508075688772}, "etl.sample_generic_etl.CSV_SCHEMA": {"tf": 1}, "etl.sample_generic_etl.execute": {"tf": 1.7320508075688772}, "etl.sample_generic_etl.main": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_no_input": {"tf": 1.4142135623730951}, "etl.tests.io_test.TestFileResolver": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_override_start_date": {"tf": 1}, "etl.tests.io_test.TestFileResolverIterator": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext": {"tf": 1.4142135623730951}}, "df": 188, "i": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1}}, "df": 7}}, "n": {"docs": {"etl.pkg.components.identifiers.Identifier.pipe": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}, "etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1}, "etl.sample_generic_etl.execute": {"tf": 1}, "etl.sample_generic_etl.main": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_archive": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_bad": {"tf": 1}}, "df": 20}, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}}, "df": 9}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.flags": {"tf": 1}}, "df": 10, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.Series.isin": {"tf": 1}}, "df": 1}}}}}}, "m": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1.4142135623730951}}, "df": 6}, "y": {"docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}}, "df": 9}}, "i": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1.4142135623730951}, "etl.pkg.config": {"tf": 1}, "etl.pkg.config.Registry.load": {"tf": 1}, "etl.pkg.config.Registry.get": {"tf": 1}, "etl.pkg.database": {"tf": 1}, "etl.pkg.dataframe.DataFrame": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 2}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 3}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.median": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 2}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.clip": {"tf": 2}, "etl.pkg.dataframe.Series.align": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rpow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.lt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.gt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.le": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.ge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.ne": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.eq": {"tf": 1.4142135623730951}, "etl.pkg.exceptions": {"tf": 1}, "etl.pkg.io": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolver": {"tf": 1}, "etl.pkg.io.FileResolver.name_prefix": {"tf": 1}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 1.7320508075688772}, "etl.pkg.io.FileResolver.output_report": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_archive": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_bad": {"tf": 1}, "etl.pkg.runtime.Runtime": {"tf": 1}, "etl.pkg.workflows.Generic.execute": {"tf": 1}, "etl.sample_generic_etl.execute": {"tf": 1}, "etl.sample_generic_etl.main": {"tf": 1}}, "df": 134}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.components.interface.Executable": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.runtime.Runtime": {"tf": 1}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.config": {"tf": 1}, "etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 2}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.map": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}, "etl.pkg.flags": {"tf": 1}, "etl.pkg.io.file_resolver_context": {"tf": 1}, "etl.pkg.validators.regexp_validator": {"tf": 1.4142135623730951}, "etl.pkg.validators.minmax_validator": {"tf": 1.4142135623730951}, "etl.pkg.validators.date_validator": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_override_start_date": {"tf": 1}}, "df": 68}, "n": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.le": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 2}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 2}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.align": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}}, "df": 26}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}}, "df": 1}}, "u": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}}, "df": 6}, "a": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.query": {"tf": 1}}, "df": 1, "s": {"docs": {"etl.pkg.dataframe.DataFrame.query": {"tf": 1.7320508075688772}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "h": {"docs": {"etl.pkg.dataframe.DataFrame.dropna": {"tf": 1.4142135623730951}}, "df": 1, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.clip": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.clip": {"tf": 3.1622776601683795}}, "df": 3, "s": {"docs": {"etl.pkg.dataframe.DataFrame.clip": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.clip": {"tf": 1.7320508075688772}}, "df": 2}}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 2}}}, "w": {"docs": {"etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {"etl.pkg.components.checkers.ContentChecker": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 2}, "etl.pkg.components.historian": {"tf": 1}, "etl.pkg.components.identifiers": {"tf": 1}, "etl.pkg.components.interface": {"tf": 1}, "etl.pkg.components.interface.Executable": {"tf": 1}, "etl.pkg.components.interface.Pipable": {"tf": 1}, "etl.pkg.components.mappers": {"tf": 1}, "etl.pkg.config.Registry.load": {"tf": 1}, "etl.pkg.config.Registry.get": {"tf": 1.4142135623730951}, "etl.pkg.database": {"tf": 1}, "etl.pkg.dataframe": {"tf": 1}, "etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iloc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.query": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 5.656854249492381}, "etl.pkg.dataframe.DataFrame.to_orc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 5.0990195135927845}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.join": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 2}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 2}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.round": {"tf": 3}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 2}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 5}, "etl.pkg.dataframe.DataFrame.add": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.div": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 3}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 3}, "etl.pkg.dataframe.DataFrame.le": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 2}, "etl.pkg.dataframe.Series.round": {"tf": 2}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.quantile": {"tf": 2}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.median": {"tf": 2}, "etl.pkg.dataframe.Series.groupby": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.Series.explode": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.value_counts": {"tf": 2}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.isin": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.map": {"tf": 3}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 2}, "etl.pkg.dataframe.Series.clip": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.align": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.combine": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.squeeze": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.to_string": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.apply": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.cov": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.corr": {"tf": 2}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rpow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.lt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.gt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.le": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.ge": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.ne": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.eq": {"tf": 1.7320508075688772}, "etl.pkg.exceptions.UndeclaredFieldError": {"tf": 1}, "etl.pkg.flags": {"tf": 1.4142135623730951}, "etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1.7320508075688772}, "etl.pkg.io": {"tf": 2}, "etl.pkg.io.ISO_DATE_PREFIX": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 2.6457513110645907}, "etl.pkg.io.FileResolver.date_pattern": {"tf": 1}, "etl.pkg.io.FileResolver.name_prefix": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_archive": {"tf": 1.7320508075688772}, "etl.pkg.io.FileResolver.move_to_bad": {"tf": 1.7320508075688772}, "etl.pkg.io.file_resolver_context": {"tf": 1.4142135623730951}, "etl.pkg.policy": {"tf": 1.4142135623730951}, "etl.pkg.policy.ActionOnIssue": {"tf": 1}, "etl.pkg.policy.Policy": {"tf": 1}, "etl.pkg.resolvers": {"tf": 1}, "etl.pkg.resolvers.IdentifierResolver": {"tf": 1.4142135623730951}, "etl.pkg.resolvers.TaxonomyResolver": {"tf": 1}, "etl.pkg.resolvers.SchemaResolver": {"tf": 1}, "etl.pkg.runtime": {"tf": 1}, "etl.pkg.runtime.context": {"tf": 1.4142135623730951}, "etl.pkg.validators": {"tf": 1}, "etl.pkg.validators.FieldsValidator": {"tf": 1}, "etl.pkg.validators.regexp_validator": {"tf": 1}, "etl.pkg.workflows": {"tf": 1}, "etl.pkg.workflows.Base": {"tf": 1}, "etl.pkg.workflows.Generic.read_csv": {"tf": 1.4142135623730951}, "etl.sample_generic_etl.FIELDS_WITH_TAXONOMIES": {"tf": 1}, "etl.sample_generic_etl.FIELDS_WITH_VALIDATION": {"tf": 1}, "etl.sample_generic_etl.execute": {"tf": 2}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_archive": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_bad": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_success": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_failure": {"tf": 1}}, "df": 162, "d": {"docs": {}, "df": 0, "o": {"docs": {"etl.pkg.components.checkers.SchemaChecker.pipe": {"tf": 1}, "etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.database": {"tf": 1.4142135623730951}, "etl.pkg.policy.PolicyResolver.tolerates_data_issues": {"tf": 1}, "etl.pkg.policy.from_config": {"tf": 1}, "etl.pkg.resolvers.FieldResolver.get_id": {"tf": 1}, "etl.pkg.resolvers.IdentifierResolver": {"tf": 1}, "etl.pkg.resolvers.TaxonomyResolver": {"tf": 1}, "etl.pkg.runtime.Runtime.get_target_db_connection": {"tf": 1}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1}, "etl.pkg.workflows.Generic.did_produce_recyclable": {"tf": 1}}, "df": 11, "s": {"docs": {"etl.pkg.io.FileResolver": {"tf": 1}, "etl.sample_generic_etl.execute": {"tf": 1}}, "df": 2}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.components.interface.Pipable": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 26}}}}}}, "p": {"docs": {"etl.pkg.config.Registry": {"tf": 1}}, "df": 1}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.config.Registry": {"tf": 2}}, "df": 1}}, "n": {"docs": {"etl.pkg.config.Registry": {"tf": 1}}, "df": 1}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}}}, "y": {"docs": {"etl.pkg.dataframe.DataFrame.dropna": {"tf": 2.6457513110645907}}, "df": 1}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.components.historian": {"tf": 1}, "etl.pkg.components.identifiers": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1}}, "df": 4}}}}, "x": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.components.mappers": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper.pipe": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.pipe": {"tf": 1}, "etl.sample_generic_etl.execute": {"tf": 1}}, "df": 4}}}, "y": {"docs": {"etl.pkg.resolvers": {"tf": 1}, "etl.pkg.resolvers.TaxonomyResolver": {"tf": 1.4142135623730951}, "etl.sample_generic_etl.FIELDS_WITH_TAXONOMIES": {"tf": 1}}, "df": 3, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.resolvers.TaxonomyResolver": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}}, "df": 2}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}}, "df": 2}}}, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 2.23606797749979}}, "df": 2}}}, "u": {"docs": {"etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}}, "df": 2}, "g": {"docs": {"etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}}, "df": 1}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.shape": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.shape": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1.7320508075688772}}, "df": 21, "[": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.interface.Pipable.pipe": {"tf": 1}, "etl.pkg.components.interface.NopPipe.pipe": {"tf": 1}}, "df": 2}}}}}}}}}}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}}, "df": 4}}}, "e": {"docs": {"etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1}}, "df": 1}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 2.8284271247461903}}, "df": 4}}}}, "r": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.Series.isin": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 2}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.explode": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.components.transformers": {"tf": 1}}, "df": 1, "s": {"docs": {"etl.pkg.components.transformers": {"tf": 1}}, "df": 1}}, "d": {"docs": {"etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1.4142135623730951}}, "df": 4}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.Series.rename": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"etl.pkg.dataframe.DataFrame.rename": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.runtime.Runtime": {"tf": 1}}, "df": 1, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"etl.pkg.dataframe.DataFrame.rename": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 2}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 5.477225575051661}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 5.477225575051661}, "etl.pkg.dataframe.DataFrame.le": {"tf": 5.477225575051661}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 5.477225575051661}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 5.477225575051661}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 5.477225575051661}, "etl.pkg.dataframe.Series.rename": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 3}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.isin": {"tf": 3}, "etl.pkg.dataframe.Series.dropna": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.between": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.lt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.gt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.le": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.ge": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.ne": {"tf": 2}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 51, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}}, "df": 22}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}}, "df": 1, "d": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.Series.to_string": {"tf": 1}}, "df": 1}}}}}}}}, "y": {"docs": {"etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.view": {"tf": 1}}, "df": 4, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.iloc": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}}}}}, "m": {"docs": {"etl.pkg.dataframe.DataFrame.clip": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.clip": {"tf": 1.7320508075688772}}, "df": 2}, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 2}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.div": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 4.47213595499958}}, "df": 17}}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1}}, "df": 4}}}}, "e": {"docs": {"etl.pkg.dataframe.DataFrame.categorize": {"tf": 1.4142135623730951}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.config.Registry.load": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 5, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"6": {"4": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}}, "df": 1, "s": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 2}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 2}, "etl.tests.io_test.TestFileResolver.test_date_extraction_many_dates": {"tf": 1}}, "df": 5, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1.7320508075688772}}, "df": 2}}}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}}, "df": 2}}}, "z": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}}, "df": 1}, "v": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 2.449489742783178}}, "df": 2}, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 4.123105625617661}}, "df": 1, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"etl.tests.utils_test.create_test_file": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.tests.utils_test.create_test_file": {"tf": 1}}, "df": 2, "s": {"docs": {"etl.tests.flags_test": {"tf": 1}, "etl.tests.io_test": {"tf": 1}, "etl.tests.utils_test": {"tf": 1}}, "df": 3}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.tests.flags_test.TestArgumentParser": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.tests.io_test.TestFileResolver": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.tests.io_test.TestFileResolverIterator": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"etl.tests.io_test.TestFileResolverContext": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.policy": {"tf": 1}}, "df": 1, "s": {"docs": {"etl.pkg.policy.ActionOnIssue": {"tf": 1}}, "df": 1}}}}, "w": {"docs": {}, "df": 0, "o": {"docs": {"etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.combine": {"tf": 2}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1.4142135623730951}}, "df": 12}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.Series.quantile": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 1.7320508075688772}}, "df": 2}}}}}}}, "v": {"docs": {"etl.pkg.dataframe.DataFrame.corr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.corr": {"tf": 1.4142135623730951}}, "df": 2, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.components.checkers.SchemaChecker.pipe": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.div": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 106, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.between": {"tf": 1}}, "df": 7}}}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}}, "df": 13}}}}}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.Series.between": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}}, "df": 1}}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_valid_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_valid_standalone_end_date": {"tf": 1}}, "df": 10, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.checkers.ContentChecker": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}, "etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1}, "etl.pkg.validators": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_happy_path": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_happy_with_files": {"tf": 1}}, "df": 7, "d": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}}, "df": 1}, "s": {"docs": {"etl.pkg.flags.iso_date": {"tf": 1}, "etl.pkg.validators.date_validator": {"tf": 1}, "etl.sample_generic_etl.main": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.components.checkers.ContentChecker": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1.7320508075688772}, "etl.pkg.flags.ArgumentParser": {"tf": 1}, "etl.sample_generic_etl.FIELDS_WITH_VALIDATION": {"tf": 1}}, "df": 4, "s": {"docs": {"etl.pkg.components.checkers.ContentChecker": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}, "etl.pkg.flags": {"tf": 1}}, "df": 3}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1.7320508075688772}, "etl.pkg.validators.regexp_validator": {"tf": 1.4142135623730951}, "etl.pkg.validators.minmax_validator": {"tf": 1.4142135623730951}, "etl.pkg.validators.date_validator": {"tf": 1}}, "df": 4, "s": {"docs": {"etl.pkg.validators": {"tf": 1}, "etl.pkg.validators.FieldsValidator": {"tf": 1}, "etl.pkg.validators.na_validator": {"tf": 1}}, "df": 3}}}}}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.config.Registry.get": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.query": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 2}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 2}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.add": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.div": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.value_counts": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.map": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 2}, "etl.pkg.dataframe.Series.align": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.combine": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.sub": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.mul": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.div": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.divide": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.truediv": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.floordiv": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.mod": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.pow": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.radd": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.rsub": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.rmul": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.rdiv": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.rmod": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.rpow": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.lt": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.gt": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.le": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.ge": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.ne": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.eq": {"tf": 2.449489742783178}, "etl.pkg.runtime.context": {"tf": 1.4142135623730951}, "etl.pkg.validators.regexp_validator": {"tf": 1}}, "df": 77, "s": {"docs": {"etl.pkg.dataframe.DataFrame": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 3}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 2}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rename": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.round": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 3}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.unique": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.nlargest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.isin": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.map": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.dropna": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.between": {"tf": 2}, "etl.pkg.dataframe.Series.clip": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.align": {"tf": 2}, "etl.pkg.dataframe.Series.combine": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.combine_first": {"tf": 2}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rpow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.lt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.gt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.le": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.ge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.ne": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.eq": {"tf": 1.4142135623730951}, "etl.pkg.flags.Namespace": {"tf": 1}, "etl.pkg.validators.na_validator": {"tf": 1}, "etl.pkg.validators.minmax_validator": {"tf": 1}}, "df": 103}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.iloc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}}, "df": 3}}}}}}}, "s": {"docs": {"etl.pkg.dataframe.Series.to_frame": {"tf": 1.4142135623730951}}, "df": 1}}, "r": {"docs": {"etl.pkg.dataframe.DataFrame.melt": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.query": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1.4142135623730951}}, "df": 4, "s": {"docs": {"etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 2}}, "df": 3}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.eval": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.melt": {"tf": 2.23606797749979}}, "df": 1}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.config.Registry": {"tf": 3.3166247903554}}, "df": 1, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.config.Registry": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}}}}}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}}, "df": 3}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.eval": {"tf": 1}}, "df": 1}}}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 3.1622776601683795}}, "df": 3, "s": {"docs": {"etl.pkg.dataframe.Series.view": {"tf": 1}}, "df": 1}}}, "a": {"docs": {"etl.pkg.dataframe.DataFrame.apply": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "f": {"docs": {"etl.pkg.components.checkers.SchemaChecker.pipe": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker": {"tf": 1.4142135623730951}, "etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1.7320508075688772}, "etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.shape": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 2}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.join": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.round": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.info": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.add": {"tf": 2}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 2}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 2}, "etl.pkg.dataframe.DataFrame.div": {"tf": 2}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 2}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 2}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 2}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 2}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.le": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.shape": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}, "etl.pkg.dataframe.Series.nbytes": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.quantile": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 3.605551275463989}, "etl.pkg.dataframe.Series.count": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.mode": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.explode": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.unique": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 3}, "etl.pkg.dataframe.Series.nlargest": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.isin": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.map": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.between": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.align": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.combine": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.apply": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.cov": {"tf": 2}, "etl.pkg.dataframe.Series.corr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.autocorr": {"tf": 2}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.view": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.add": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.sub": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.mul": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.div": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.divide": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.truediv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.floordiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.mod": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.pow": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.radd": {"tf": 2}, "etl.pkg.dataframe.Series.rsub": {"tf": 2}, "etl.pkg.dataframe.Series.rmul": {"tf": 2}, "etl.pkg.dataframe.Series.rdiv": {"tf": 2}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 2}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 2}, "etl.pkg.dataframe.Series.rmod": {"tf": 2}, "etl.pkg.dataframe.Series.rpow": {"tf": 2}, "etl.pkg.dataframe.Series.lt": {"tf": 2}, "etl.pkg.dataframe.Series.gt": {"tf": 2}, "etl.pkg.dataframe.Series.le": {"tf": 2}, "etl.pkg.dataframe.Series.ge": {"tf": 2}, "etl.pkg.dataframe.Series.ne": {"tf": 2}, "etl.pkg.dataframe.Series.eq": {"tf": 2}, "etl.pkg.exceptions": {"tf": 1}, "etl.pkg.io.FileResolver.output_report": {"tf": 1}, "etl.pkg.io.FileResolver.output_recyclable": {"tf": 1}, "etl.pkg.io.file_resolver_context": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolverIterator": {"tf": 1}, "etl.pkg.policy.PolicyDict": {"tf": 1}, "etl.pkg.policy.strict": {"tf": 1}, "etl.pkg.runtime.context": {"tf": 1.4142135623730951}, "etl.pkg.validators.FieldsValidator": {"tf": 1}, "etl.pkg.validators.regexp_validator": {"tf": 1}, "etl.pkg.validators.minmax_validator": {"tf": 1}, "etl.pkg.workflows.Generic.execute": {"tf": 1}, "etl.sample_generic_etl": {"tf": 1}, "etl.sample_generic_etl.FIELDS_WITH_EXTERNAL_IDENTIFIERS": {"tf": 1}, "etl.sample_generic_etl.FIELDS_WITH_TAXONOMIES": {"tf": 1}, "etl.sample_generic_etl.FIELDS_WITH_VALIDATION": {"tf": 1}, "etl.sample_generic_etl.CSV_SCHEMA": {"tf": 1}, "etl.tests.io_test.TestFileResolverIterator.test_iterator_from_dir": {"tf": 1}}, "df": 140, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}}, "df": 4}}}, "f": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 3, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}}, "df": 2}}}}}, "n": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1.7320508075688772}, "etl.pkg.config.Registry": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 2}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 4.69041575982343}, "etl.pkg.dataframe.DataFrame.join": {"tf": 3.872983346207417}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}, "etl.pkg.flags": {"tf": 1}, "etl.pkg.io": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 1}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 1}, "etl.pkg.policy.PolicyDict": {"tf": 1}, "etl.pkg.policy.Policy.action_on_invalid_field": {"tf": 1}, "etl.pkg.policy.strict": {"tf": 1}, "etl.pkg.policy.from_config": {"tf": 1}, "etl.pkg.validators.regexp_validator": {"tf": 1}, "etl.pkg.validators.minmax_validator": {"tf": 1}, "etl.pkg.workflows": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_args": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_guard_constructor": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_no_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_invalid_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_many_dates": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_other_failure": {"tf": 1}}, "df": 96, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.iloc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.flags": {"tf": 1}, "etl.pkg.io": {"tf": 1}}, "df": 25}}, "e": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 2}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.join": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.combine": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}, "etl.pkg.runtime.context": {"tf": 1}}, "df": 65, "s": {"docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}}, "df": 2}}, "c": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 1}}, "df": 3}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.flags": {"tf": 1}, "etl.pkg.policy.Policy": {"tf": 1}}, "df": 5, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.components.interface.Pipable.pipe": {"tf": 1}, "etl.pkg.components.interface.NopPipe.pipe": {"tf": 1}, "etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 2}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 2}, "etl.pkg.io.FileResolver": {"tf": 1}, "etl.pkg.io.FileResolver.output_report": {"tf": 1}, "etl.pkg.io.FileResolver.output_recyclable": {"tf": 1}, "etl.sample_generic_etl.execute": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_report": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_recyclable": {"tf": 1}}, "df": 25}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.clip": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.clip": {"tf": 1.4142135623730951}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.align": {"tf": 2.23606797749979}}, "df": 3}}}, "r": {"docs": {"etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1}}, "df": 2}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 1}}, "df": 2}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.4142135623730951}}, "df": 2, "s": {"docs": {"etl.pkg.dataframe.Series.nlargest": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1.7320508075688772}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.Series.value_counts": {"tf": 1}}, "df": 1}}}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.components.interface.NopPipe": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 2}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 2}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 53, "s": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 5}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}}, "df": 2}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 2}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 2}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 2}, "etl.pkg.dataframe.DataFrame.div": {"tf": 2}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 2}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 2}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 2}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 2}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}, "etl.pkg.validators.regexp_validator": {"tf": 1}}, "df": 48, "s": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}}, "df": 23}}}}}}, "n": {"docs": {"etl.pkg.dataframe.Series.value_counts": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.between": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}}, "df": 4, "a": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 2}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 3.872983346207417}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 3.605551275463989}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.quantile": {"tf": 1}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1.4142135623730951}}, "df": 27, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1}}, "df": 5}}}}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}}, "df": 4}}}}}}, "r": {"docs": {"etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.config.Registry.load": {"tf": 1}, "etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 3.872983346207417}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 2}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.join": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 3}, "etl.pkg.dataframe.DataFrame.add": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.div": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.le": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 3.605551275463989}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.Series.count": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.dropna": {"tf": 2}, "etl.pkg.dataframe.Series.between": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.clip": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.align": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.combine": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.squeeze": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 2}, "etl.pkg.dataframe.Series.corr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 2}, "etl.pkg.dataframe.Series.sub": {"tf": 2}, "etl.pkg.dataframe.Series.mul": {"tf": 2}, "etl.pkg.dataframe.Series.div": {"tf": 2}, "etl.pkg.dataframe.Series.divide": {"tf": 2}, "etl.pkg.dataframe.Series.truediv": {"tf": 2}, "etl.pkg.dataframe.Series.floordiv": {"tf": 2}, "etl.pkg.dataframe.Series.mod": {"tf": 2}, "etl.pkg.dataframe.Series.pow": {"tf": 2}, "etl.pkg.dataframe.Series.radd": {"tf": 2}, "etl.pkg.dataframe.Series.rsub": {"tf": 2}, "etl.pkg.dataframe.Series.rmul": {"tf": 2}, "etl.pkg.dataframe.Series.rdiv": {"tf": 2}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 2}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 2}, "etl.pkg.dataframe.Series.rmod": {"tf": 2}, "etl.pkg.dataframe.Series.rpow": {"tf": 2}, "etl.pkg.dataframe.Series.lt": {"tf": 2}, "etl.pkg.dataframe.Series.gt": {"tf": 2}, "etl.pkg.dataframe.Series.le": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.ge": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.ne": {"tf": 2}, "etl.pkg.dataframe.Series.eq": {"tf": 2}, "etl.pkg.io.file_resolver_context": {"tf": 1}, "etl.pkg.io.FileResolverIterator": {"tf": 1}}, "df": 105, "g": {"docs": {}, "df": 0, "/": {"3": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}}, "df": 17}}}}}}}}}}}}}}}}}}}}}, "docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 1}}}}}}}}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 1}}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}}, "df": 2}}}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}}, "df": 2}}}}}}}, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "%": {"2": {"7": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}}, "df": 2}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}}}}}}}}}}}, "/": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 1}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 2}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nlargest": {"tf": 2}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 2}, "etl.pkg.dataframe.Series.map": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.apply": {"tf": 1.4142135623730951}, "etl.tests.io_test.TestFileResolverIterator.test_iterator_from_dir": {"tf": 1}}, "df": 18, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 4}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}}, "df": 4}}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.exceptions": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1.4142135623730951}}, "df": 8}}}}}}, "c": {"docs": {"etl.pkg.dataframe.DataFrame.to_orc": {"tf": 1}}, "df": 1}}, "b": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.config.Registry.load": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.explode": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.unique": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 2}, "etl.pkg.dataframe.Series.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.clip": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 2}, "etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1.4142135623730951}, "etl.pkg.flags.Namespace": {"tf": 1}, "etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1.4142135623730951}, "etl.pkg.runtime.Runtime": {"tf": 1}}, "df": 66, "s": {"docs": {"etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.align": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}, "etl.pkg.runtime.Runtime": {"tf": 1}, "etl.pkg.workflows": {"tf": 1}}, "df": 13}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.Series.align": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 2}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1.4142135623730951}}, "df": 9}, "\u2019": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.join": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.div": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.le": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.between": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.align": {"tf": 3}, "etl.pkg.dataframe.Series.combine": {"tf": 2}, "etl.pkg.dataframe.Series.combine_first": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.corr": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.add": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.sub": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.mul": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.div": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.divide": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.truediv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.mod": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.pow": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.radd": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rsub": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rmul": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rmod": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rpow": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.lt": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.gt": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.le": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.ge": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.ne": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.eq": {"tf": 1.7320508075688772}}, "df": 60, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.quantile": {"tf": 1}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 1}}, "df": 16}}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 2}, "etl.pkg.dataframe.DataFrame.items": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.io": {"tf": 1}, "etl.pkg.io.file_resolver_context": {"tf": 1}, "etl.pkg.io.FileResolverIterator": {"tf": 1}, "etl.tests.io_test.TestFileResolverIterator.test_iterator_from_dir": {"tf": 1}}, "df": 11, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}, "w": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"etl.pkg.io.FileResolver.set_date_from_name": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_override_start_date": {"tf": 1}}, "df": 2, "s": {"docs": {"etl.sample_generic_etl.execute": {"tf": 1}}, "df": 1}}}}}}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1.7320508075688772}}, "df": 2}}, "w": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.drop": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"etl.pkg.dataframe.DataFrame.mode": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.validators.regexp_validator": {"tf": 1}}, "df": 5, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.components.checkers.SchemaChecker.pipe": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 3}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.database": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 1}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.Series.value_counts": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}}, "df": 3}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.runtime.Runtime.stop": {"tf": 1}}, "df": 1}}}}}}}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.components.identifiers.Identifier.pipe": {"tf": 1}, "etl.pkg.components.interface.Executable.execute": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ndim": {"tf": 1}, "etl.pkg.dataframe.DataFrame.shape": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 2}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.ndim": {"tf": 1}, "etl.pkg.dataframe.Series.shape": {"tf": 1}, "etl.pkg.dataframe.Series.dtype": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.unique": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1}, "etl.pkg.workflows.Base.execute": {"tf": 1}}, "df": 87, "s": {"docs": {"etl.pkg.components.checkers.SchemaChecker.pipe": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}, "etl.pkg.components.historian.HistoryBuilder.pipe": {"tf": 1}, "etl.pkg.components.identifiers.Identifier.pipe": {"tf": 1}, "etl.pkg.components.interface.Executable.execute": {"tf": 1}, "etl.pkg.components.interface.Pipable.pipe": {"tf": 1}, "etl.pkg.components.interface.NopPipe.pipe": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper.pipe": {"tf": 1}, "etl.pkg.components.mappers.TaxonomyMapper.check_taxonomies": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.pipe": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.map_remainder": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.map_target_entities": {"tf": 1}, "etl.pkg.config.Registry.get": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.unique": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.combine": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}, "etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1}, "etl.pkg.io.FileResolver.get_file_name": {"tf": 1}, "etl.pkg.policy.PolicyResolver": {"tf": 1}, "etl.pkg.policy.PolicyResolver.tolerates_data_issues": {"tf": 1}, "etl.pkg.policy.strict": {"tf": 1}, "etl.pkg.policy.skip": {"tf": 1}, "etl.pkg.policy.from_config": {"tf": 1}, "etl.pkg.resolvers.FieldResolver.get_mnemonic": {"tf": 1}, "etl.pkg.resolvers.FieldResolver.get_id": {"tf": 1}, "etl.pkg.runtime.Runtime.get_config": {"tf": 1.4142135623730951}, "etl.pkg.runtime.Runtime.get_logger": {"tf": 1.4142135623730951}, "etl.pkg.runtime.Runtime.get_target_db_connection": {"tf": 1}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1.4142135623730951}, "etl.pkg.validators.regexp_validator": {"tf": 1.4142135623730951}, "etl.pkg.validators.minmax_validator": {"tf": 1.4142135623730951}, "etl.pkg.validators.date_validator": {"tf": 1}, "etl.pkg.workflows.Base.execute": {"tf": 1}, "etl.pkg.workflows.Generic.read_csv": {"tf": 1}, "etl.pkg.workflows.Generic.execute": {"tf": 1}, "etl.pkg.workflows.Generic.did_produce_recyclable": {"tf": 1}}, "df": 140}, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}}, "df": 21}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.items": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}}, "df": 3}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}}, "df": 1, "d": {"docs": {"etl.pkg.config.Registry": {"tf": 1}}, "df": 1}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 2, "s": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}}, "df": 3, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}}, "df": 1}}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.config": {"tf": 1}}, "df": 1}}}}}, "d": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}}, "df": 5}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.Series.median_approximate": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}}, "df": 2}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.components.historian": {"tf": 1}}, "df": 1, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_records": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 4}}}}}}}, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.policy.PolicyDict": {"tf": 1}}, "df": 3}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.rename": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.div": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 4.47213595499958}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 4.47213595499958}}, "df": 17}}}}}}, "y": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.io.RECYCLABLE_FOLDER": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolver.output_recyclable": {"tf": 1}, "etl.sample_generic_etl.execute": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_recyclable": {"tf": 1}}, "df": 5}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.sample_generic_etl.execute": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}}, "df": 3, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.components.interface": {"tf": 1}, "etl.pkg.components.interface.Executable.execute": {"tf": 1.4142135623730951}, "etl.pkg.components.interface.Pipable": {"tf": 1}, "etl.pkg.components.interface.Pipable.pipe": {"tf": 1}, "etl.pkg.components.interface.NopPipe.pipe": {"tf": 1}, "etl.pkg.io.REPORT_FOLDER": {"tf": 1}, "etl.pkg.io.FileResolver.output_report": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolver.output_recyclable": {"tf": 1}, "etl.pkg.workflows.Base.execute": {"tf": 1.4142135623730951}, "etl.pkg.workflows.Generic.execute": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_report": {"tf": 1}}, "df": 11}}}, "r": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.Series.view": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.shape": {"tf": 1}, "etl.pkg.dataframe.Series.shape": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1}}, "df": 3}}}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}}, "df": 3}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.view": {"tf": 1}, "etl.pkg.flags.Namespace": {"tf": 1}}, "df": 6, "s": {"docs": {"etl.pkg.dataframe.Series.view": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1.4142135623730951}}, "df": 2, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}}, "df": 2, "d": {"docs": {"etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.explode": {"tf": 1}}, "df": 1}}}}}}}}}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.apply": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.apply": {"tf": 1.7320508075688772}}, "df": 2, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.components.interface.Pipable": {"tf": 1}, "etl.pkg.dataframe.DataFrame.shape": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.shape": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.explode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rpow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.lt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.gt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.le": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.ge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.ne": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.eq": {"tf": 1.4142135623730951}}, "df": 69, "s": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1.4142135623730951}}, "df": 22}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.flags": {"tf": 1}}, "df": 14}}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.mappers.TaxonomyMapper.pipe": {"tf": 1}, "etl.pkg.components.mappers.EntityMapper.pipe": {"tf": 1}, "etl.pkg.io": {"tf": 1}, "etl.pkg.resolvers.IdentifierResolver": {"tf": 1}}, "df": 4, "d": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.io.FileResolver.date_pattern": {"tf": 1}, "etl.pkg.io.FileResolverIterator": {"tf": 1}}, "df": 4}, "r": {"docs": {"etl.pkg.io": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolver": {"tf": 1}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_archive": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_bad": {"tf": 1}, "etl.pkg.io.file_resolver_context": {"tf": 1.4142135623730951}, "etl.sample_generic_etl.execute": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_archive": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_bad": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_report": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_recyclable": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_override_start_date": {"tf": 1}}, "df": 12, "s": {"docs": {"etl.pkg.io.FileResolver": {"tf": 1}, "etl.pkg.resolvers": {"tf": 1.4142135623730951}}, "df": 2}}, "s": {"docs": {"etl.pkg.io.FileResolver": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.io.file_resolver_context": {"tf": 1}, "etl.pkg.runtime.context": {"tf": 1}}, "df": 2, "s": {"docs": {"etl.pkg.database": {"tf": 1}, "etl.pkg.io": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 1}, "etl.pkg.runtime": {"tf": 1}, "etl.pkg.runtime.Runtime.start": {"tf": 1}, "etl.pkg.runtime.Runtime.stop": {"tf": 1}, "etl.pkg.runtime.Runtime.get_target_db_connection": {"tf": 1}, "etl.pkg.runtime.context": {"tf": 1}}, "df": 8}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}}, "df": 2}}}}}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 2}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 2}}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}}, "df": 3}}}, "e": {"docs": {"etl.pkg.dataframe.DataFrame.drop": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {"etl.pkg.dataframe.Series.memory_usage": {"tf": 1}}, "df": 1}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.config.Registry.get": {"tf": 1}, "etl.pkg.runtime.Runtime.get_config": {"tf": 1.7320508075688772}}, "df": 3}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}}, "df": 2}}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.io.ISO_DATE_PREFIX": {"tf": 1}, "etl.pkg.io.FileResolver.name_prefix": {"tf": 1}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 1}, "etl.pkg.validators.regexp_validator": {"tf": 2}}, "df": 4}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.view": {"tf": 1}, "etl.pkg.workflows.Generic.read_csv": {"tf": 1}}, "df": 5, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.config.Registry": {"tf": 1}}, "df": 1}}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}}, "df": 1}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.database": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.io": {"tf": 1}}, "df": 3}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}}, "df": 4, "d": {"docs": {"etl.pkg.dataframe.DataFrame.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}}, "df": 17}}}}}}}, "f": {"docs": {"etl.pkg.dataframe.DataFrame.iloc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}}, "df": 11, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.query": {"tf": 2.23606797749979}}, "df": 2, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.exceptions.UndeclaredFieldError": {"tf": 1}}, "df": 3, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.query": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}}, "df": 30}}}, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.lt": {"tf": 3.872983346207417}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 3.872983346207417}, "etl.pkg.dataframe.DataFrame.le": {"tf": 3.872983346207417}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 3.872983346207417}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 3.872983346207417}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 3.872983346207417}}, "df": 6}}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.categorize": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.rename": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.Series.rename": {"tf": 1}}, "df": 2, "d": {"docs": {"etl.pkg.dataframe.DataFrame.rename": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}}, "df": 3}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}}, "df": 3}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.Series.align": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.Series.align": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.Series.view": {"tf": 1}}, "df": 1}}}}}}}}}}}, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"etl.tests.flags_test.TestArgumentParser.test_invalid_start_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_no_input": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_not_existing": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_is_a_dir": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_existing": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_folder": {"tf": 1}}, "df": 7}}}}}, "a": {"docs": {}, "df": 0, "w": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.iloc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.isin": {"tf": 1.4142135623730951}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1}}, "df": 6, "s": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 1}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1}, "etl.pkg.workflows.Base": {"tf": 1}}, "df": 10}, "d": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}}, "df": 4, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"etl.pkg.dataframe.DataFrame.rename": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.Series.quantile": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 2.449489742783178}}, "df": 1}}, "n": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}}, "df": 1}}, "k": {"docs": {"etl.pkg.dataframe.DataFrame.corr": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.corr": {"tf": 2.23606797749979}}, "df": 2}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}}, "df": 4}}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1.4142135623730951}}, "df": 4}}, "b": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.Series.map": {"tf": 2}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.config.Registry": {"tf": 2}}, "df": 1}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1.7320508075688772}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.config.Registry": {"tf": 1.7320508075688772}}, "df": 1}}, "w": {"docs": {"etl.pkg.dataframe.DataFrame.iloc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}}, "df": 21, "s": {"docs": {"etl.pkg.dataframe.DataFrame.shape": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 2}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 2}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 2}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.explode": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_string": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}}, "df": 30}, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 2}}}}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.explode": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}}, "df": 2}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.round": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.corr": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.round": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.round": {"tf": 1}}, "df": 2}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.eval": {"tf": 1}}, "df": 1, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 3}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.exceptions.RuntimeEtlError": {"tf": 1}, "etl.pkg.runtime": {"tf": 1.7320508075688772}, "etl.pkg.runtime.Runtime": {"tf": 1.4142135623730951}, "etl.pkg.runtime.Runtime.get_logger": {"tf": 1}, "etl.pkg.runtime.context": {"tf": 2}}, "df": 5}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "k": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1}}, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.join": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.between": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.align": {"tf": 2.6457513110645907}, "etl.pkg.validators.minmax_validator": {"tf": 1}}, "df": 7}}}}, "h": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 1.7320508075688772}}, "df": 1}}}}, "b": {"docs": {"etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1.4142135623730951}}, "df": 4}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}}, "df": 18}}}, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1.4142135623730951}}, "df": 4}}, "o": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1.4142135623730951}}, "df": 4}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {"etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1.4142135623730951}}, "df": 10}}}}}}}, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {"etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1.4142135623730951}}, "df": 4}}}}}}}}, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1.4142135623730951}}, "df": 4}}}}, "e": {"docs": {"etl.pkg.config.Registry.get": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.clip": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.align": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.add": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.sub": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.mul": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.div": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.divide": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.truediv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.mod": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.pow": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.radd": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rsub": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rmul": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rmod": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rpow": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.lt": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.gt": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.le": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.ge": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.ne": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.eq": {"tf": 1.7320508075688772}, "etl.pkg.runtime.Runtime.start": {"tf": 1}}, "df": 49, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.policy": {"tf": 1}}, "df": 1, "s": {"docs": {"etl.pkg.components.checkers.ContentChecker": {"tf": 1}, "etl.pkg.components.interface": {"tf": 1}, "etl.pkg.components.transformers": {"tf": 1}, "etl.pkg.config": {"tf": 1}, "etl.pkg.database": {"tf": 1}, "etl.pkg.flags": {"tf": 1}, "etl.pkg.io": {"tf": 1}, "etl.pkg.resolvers": {"tf": 1}, "etl.pkg.runtime": {"tf": 1}, "etl.pkg.validators": {"tf": 1}}, "df": 10}, "d": {"docs": {"etl.sample_generic_etl": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rpow": {"tf": 1.4142135623730951}}, "df": 20, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.runtime.Runtime": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}, "etl.pkg.io.FileResolver.date_pattern": {"tf": 1}}, "df": 5, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1}}, "df": 2}}}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 4}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolverIterator": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_happy_with_files": {"tf": 1}}, "df": 3, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 3}}}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.explode": {"tf": 3.605551275463989}, "etl.pkg.dataframe.Series.explode": {"tf": 2.449489742783178}}, "df": 2, "d": {"docs": {"etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}}, "df": 2}}}}}}, "r": {"docs": {"etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 2.23606797749979}}, "df": 2, "s": {"docs": {"etl.pkg.dataframe.DataFrame.eval": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}, "etl.pkg.exceptions": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_no_input": {"tf": 1}}, "df": 3, "s": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}, "etl.pkg.exceptions": {"tf": 1.4142135623730951}, "etl.tests.io_test.TestFileResolver.test_date_extraction_no_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_invalid_date": {"tf": 1}}, "df": 4}}}}}}, "l": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 1}}, "df": 1}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}}, "df": 3, "d": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1}}, "df": 2}, "s": {"docs": {"etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}}, "df": 5}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.components.identifiers.Identifier.pipe": {"tf": 1.4142135623730951}, "etl.pkg.dataframe": {"tf": 1}, "etl.sample_generic_etl.FIELDS_WITH_EXTERNAL_IDENTIFIERS": {"tf": 1}}, "df": 3, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.resolvers": {"tf": 1}}, "df": 1}}}}}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}}, "df": 4}}, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.runtime.Runtime": {"tf": 1}}, "df": 1}}}}}, "d": {"docs": {"etl.pkg.io.FileResolver": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 6, "c": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.io.ISO_DATE_PREFIX": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.io": {"tf": 1}, "etl.pkg.io.FileResolver.date_pattern": {"tf": 1}, "etl.pkg.io.FileResolver.name_prefix": {"tf": 1}}, "df": 3}}}, "s": {"docs": {"etl.pkg.io.FileResolver.set_date_from_name": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.interface": {"tf": 1}, "etl.pkg.components.interface.Executable": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.components.interface": {"tf": 1}, "etl.pkg.components.interface.Executable.execute": {"tf": 1}, "etl.pkg.components.interface.Pipable.pipe": {"tf": 1}, "etl.pkg.components.interface.NopPipe.pipe": {"tf": 1}, "etl.pkg.workflows.Base.execute": {"tf": 1}}, "df": 5}}}, "e": {"docs": {"etl.pkg.components.interface.Executable": {"tf": 1}, "etl.pkg.components.interface.Executable.execute": {"tf": 1}, "etl.pkg.workflows.Base.execute": {"tf": 1}, "etl.pkg.workflows.Generic.execute": {"tf": 1}, "etl.sample_generic_etl.execute": {"tf": 1}}, "df": 5, "s": {"docs": {"etl.sample_generic_etl.execute": {"tf": 1}, "etl.sample_generic_etl.main": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.tests.flags_test.TestArgumentParser": {"tf": 1}, "etl.tests.io_test.TestFileResolver": {"tf": 1}, "etl.tests.io_test.TestFileResolverIterator": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext": {"tf": 1}}, "df": 4}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1.4142135623730951}, "etl.pkg.resolvers.IdentifierResolver": {"tf": 1}}, "df": 7, "s": {"docs": {"etl.pkg.dataframe.DataFrame.iloc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.shape": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.shape": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 106}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}}, "df": 1, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 103, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_not_existing": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_existing": {"tf": 1}}, "df": 50}}}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}}, "df": 1}}}, "t": {"docs": {"etl.tests.flags_test.TestArgumentParser.test_invalid_args": {"tf": 1}}, "df": 1}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.Series.between": {"tf": 1}}, "df": 1, "r": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}}, "df": 7}}, "n": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 2}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 9}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 3.1622776601683795}}, "df": 2, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 2}}, "df": 2, "d": {"docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 1}}, "df": 1}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.eval": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.eval": {"tf": 1}}, "df": 1}}}}}}}}}, "t": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1.7320508075688772}, "etl.pkg.database": {"tf": 1}, "etl.pkg.exceptions": {"tf": 1}, "etl.pkg.exceptions.RuntimeEtlError": {"tf": 1}, "etl.pkg.exceptions.IOEtlError": {"tf": 1}, "etl.pkg.workflows": {"tf": 1.4142135623730951}, "etl.pkg.workflows.Base": {"tf": 1}, "etl.pkg.workflows.Generic": {"tf": 1}, "etl.sample_generic_etl": {"tf": 1.4142135623730951}, "etl.sample_generic_etl.execute": {"tf": 1.4142135623730951}, "etl.tests.flags_test": {"tf": 1}, "etl.tests.io_test": {"tf": 1}}, "df": 12}, "c": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.runtime": {"tf": 1}, "etl.pkg.runtime.Runtime": {"tf": 1}, "etl.pkg.runtime.Runtime.start": {"tf": 1}}, "df": 4}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 2}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 2}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 2}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.policy.PolicyDict": {"tf": 1}}, "df": 28}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 3}}, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.Series.combine": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1.7320508075688772}}, "df": 2}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.components.identifiers.Identifier.pipe": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}}, "df": 4}}}, "y": {"docs": {"etl.sample_generic_etl.main": {"tf": 1}}, "df": 1}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.config.Registry": {"tf": 1.4142135623730951}, "etl.pkg.config.Registry.load": {"tf": 1}}, "df": 2}}}}}}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.7320508075688772}}, "df": 2}}}}, "d": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1.4142135623730951}, "etl.pkg.io.file_resolver_context": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_valid_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_valid_standalone_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_end_date": {"tf": 1}}, "df": 10}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.eval": {"tf": 1}}, "df": 1, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {"etl.pkg.dataframe.DataFrame.eval": {"tf": 1}}, "df": 1}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}}, "df": 2}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.components.interface.NopPipe": {"tf": 1}, "etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 11}}}}, "q": {"docs": {"etl.pkg.dataframe.DataFrame.lt": {"tf": 2}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 2}, "etl.pkg.dataframe.DataFrame.le": {"tf": 2}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 2}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 2}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.eq": {"tf": 1.7320508075688772}}, "df": 7, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.config.Registry": {"tf": 1}}, "df": 1}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.view": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 54}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 13, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.lt": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1.7320508075688772}, "etl.pkg.flags.Namespace": {"tf": 1}}, "df": 7}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.shape": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.isin": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.between": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.clip": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.radd": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rsub": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rmul": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rmod": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rpow": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.lt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.gt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.le": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.ge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.ne": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.eq": {"tf": 1.4142135623730951}}, "df": 62, "s": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nlargest": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1.4142135623730951}}, "df": 27}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.applymap": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.le": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1.4142135623730951}}, "df": 10}}}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.Series.autocorr": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}, "etl.pkg.io.FileResolverIterator": {"tf": 1}}, "df": 35}}}}}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}}, "df": 1, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 2}}, "df": 1}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.Series.cov": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}}, "df": 1}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}}, "df": 5, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}}, "df": 2, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 2}}}}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1.4142135623730951}}, "df": 1, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 1}}, "df": 1}}}}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.exceptions.RuntimeEtlError": {"tf": 1}, "etl.pkg.exceptions.IOEtlError": {"tf": 1}, "etl.pkg.exceptions.ConfigError": {"tf": 1}, "etl.pkg.exceptions.FlagsError": {"tf": 1}, "etl.pkg.exceptions.UndeclaredFieldError": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_no_input": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_failure": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_other_failure": {"tf": 1}}, "df": 14, "s": {"docs": {"etl.pkg.dataframe.DataFrame.rename": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.policy.skip": {"tf": 1}}, "df": 3}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}}, "df": 2}}}}}, "w": {"docs": {}, "df": 0, "m": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 1}}}, "f": {"8": {"docs": {"etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 2}, "docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.lt": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.gt": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.le": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.ge": {"tf": 1.7320508075688772}}, "df": 8, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.components.checkers.ContentChecker": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.exceptions.UndeclaredFieldError": {"tf": 1}, "etl.pkg.policy.Policy.action_on_invalid_field": {"tf": 1}, "etl.pkg.resolvers.FieldResolver.get_mnemonic": {"tf": 1}, "etl.pkg.resolvers.IdentifierResolver": {"tf": 1.4142135623730951}, "etl.pkg.resolvers.TaxonomyResolver": {"tf": 1}, "etl.pkg.resolvers.SchemaResolver": {"tf": 1}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 2.23606797749979}}, "df": 11, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.resolvers": {"tf": 1.4142135623730951}, "etl.pkg.validators.FieldsValidator": {"tf": 1}}, "df": 4, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}, "etl.pkg.validators.FieldsValidator": {"tf": 1}}, "df": 2}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.resolvers.FieldResolver": {"tf": 1}}, "df": 1}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.query": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.components.checkers.ContentChecker": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {"etl.pkg.config.Registry.load": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 3.1622776601683795}, "etl.pkg.exceptions.InvalidFileError": {"tf": 1}, "etl.pkg.exceptions.InvalidDataError": {"tf": 1}, "etl.pkg.io": {"tf": 2.23606797749979}, "etl.pkg.io.ISO_DATE_PREFIX": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 2.23606797749979}, "etl.pkg.io.FileResolver.get_file_name": {"tf": 1.7320508075688772}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolver.output_report": {"tf": 1}, "etl.pkg.io.FileResolver.output_recyclable": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_archive": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_bad": {"tf": 1}, "etl.pkg.io.file_resolver_context": {"tf": 1}, "etl.pkg.workflows.Generic.read_csv": {"tf": 1.4142135623730951}, "etl.sample_generic_etl.execute": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_not_existing": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_is_a_dir": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_archive": {"tf": 1.4142135623730951}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_bad": {"tf": 1.4142135623730951}, "etl.tests.io_test.TestFileResolver.test_ouput_report": {"tf": 1.4142135623730951}, "etl.tests.io_test.TestFileResolver.test_ouput_recyclable": {"tf": 1.4142135623730951}, "etl.tests.io_test.TestFileResolver.test_override_start_date": {"tf": 1.4142135623730951}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_success": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_failure": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_other_failure": {"tf": 1}, "etl.tests.utils_test.create_test_file": {"tf": 1}}, "df": 27, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.recycler.output_recyclable_file": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2}}, "df": 2}}}}, "s": {"docs": {"etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2}, "etl.pkg.io": {"tf": 1.4142135623730951}, "etl.pkg.io.BAD_FOLDER": {"tf": 1}, "etl.pkg.io.ARCHIVE_FOLDER": {"tf": 1}, "etl.pkg.io.RECYCLABLE_FOLDER": {"tf": 1}, "etl.pkg.io.REPORT_FOLDER": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 2.23606797749979}, "etl.pkg.io.file_resolver_context": {"tf": 1}, "etl.pkg.io.FileResolverIterator": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_happy_with_files": {"tf": 1}}, "df": 11, "y": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.io": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 1}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 1}, "etl.pkg.io.file_resolver_context": {"tf": 1.7320508075688772}, "etl.tests.io_test.TestFileResolver": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext": {"tf": 1}}, "df": 6, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.io": {"tf": 1}, "etl.pkg.io.FileResolverIterator": {"tf": 1}, "etl.tests.io_test.TestFileResolverIterator": {"tf": 1}}, "df": 3}}}}}}}}, "s": {"docs": {"etl.pkg.io.file_resolver_context": {"tf": 1}, "etl.pkg.io.FileResolverIterator": {"tf": 1}, "etl.tests.io_test.TestFileResolverIterator.test_iterator_from_dir": {"tf": 1}}, "df": 3}}}}}}}}}}, "l": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.div": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.align": {"tf": 2}, "etl.pkg.dataframe.Series.combine": {"tf": 2}, "etl.pkg.dataframe.Series.add": {"tf": 2}, "etl.pkg.dataframe.Series.sub": {"tf": 2}, "etl.pkg.dataframe.Series.mul": {"tf": 2}, "etl.pkg.dataframe.Series.div": {"tf": 2}, "etl.pkg.dataframe.Series.divide": {"tf": 2}, "etl.pkg.dataframe.Series.truediv": {"tf": 2}, "etl.pkg.dataframe.Series.floordiv": {"tf": 2}, "etl.pkg.dataframe.Series.mod": {"tf": 2}, "etl.pkg.dataframe.Series.pow": {"tf": 2}, "etl.pkg.dataframe.Series.radd": {"tf": 2}, "etl.pkg.dataframe.Series.rsub": {"tf": 2}, "etl.pkg.dataframe.Series.rmul": {"tf": 2}, "etl.pkg.dataframe.Series.rdiv": {"tf": 2}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 2}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 2}, "etl.pkg.dataframe.Series.rmod": {"tf": 2}, "etl.pkg.dataframe.Series.rpow": {"tf": 2}, "etl.pkg.dataframe.Series.lt": {"tf": 2}, "etl.pkg.dataframe.Series.gt": {"tf": 2}, "etl.pkg.dataframe.Series.le": {"tf": 2}, "etl.pkg.dataframe.Series.ge": {"tf": 2}, "etl.pkg.dataframe.Series.ne": {"tf": 2}, "etl.pkg.dataframe.Series.eq": {"tf": 2}}, "df": 42, "n": {"docs": {}, "df": 0, "a": {"docs": {"etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.Series.align": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 25}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.Series.align": {"tf": 1.4142135623730951}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 3}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.combine": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1.7320508075688772}, "etl.pkg.validators.regexp_validator": {"tf": 1}}, "df": 14}}}, "t": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}}, "df": 3}, "v": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.Series.nlargest": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.Series.align": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {"etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}, "etl.pkg.components.interface.NopPipe": {"tf": 1}, "etl.pkg.config.Registry": {"tf": 3.1622776601683795}, "etl.pkg.dataframe": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iloc": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 3.872983346207417}, "etl.pkg.dataframe.DataFrame.to_orc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 2}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.round": {"tf": 2}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 2}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.le": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.quantile": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 2}, "etl.pkg.dataframe.Series.groupby": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.dropna": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.clip": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.align": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.combine": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.squeeze": {"tf": 2}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 2}, "etl.pkg.dataframe.Series.sub": {"tf": 2}, "etl.pkg.dataframe.Series.mul": {"tf": 2}, "etl.pkg.dataframe.Series.div": {"tf": 2}, "etl.pkg.dataframe.Series.divide": {"tf": 2}, "etl.pkg.dataframe.Series.truediv": {"tf": 2}, "etl.pkg.dataframe.Series.floordiv": {"tf": 2}, "etl.pkg.dataframe.Series.mod": {"tf": 2}, "etl.pkg.dataframe.Series.pow": {"tf": 2}, "etl.pkg.dataframe.Series.radd": {"tf": 2}, "etl.pkg.dataframe.Series.rsub": {"tf": 2}, "etl.pkg.dataframe.Series.rmul": {"tf": 2}, "etl.pkg.dataframe.Series.rdiv": {"tf": 2}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 2}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 2}, "etl.pkg.dataframe.Series.rmod": {"tf": 2}, "etl.pkg.dataframe.Series.rpow": {"tf": 2}, "etl.pkg.dataframe.Series.lt": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.gt": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.le": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.ge": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.ne": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.eq": {"tf": 1.7320508075688772}, "etl.pkg.exceptions": {"tf": 1.4142135623730951}, "etl.pkg.flags": {"tf": 1}, "etl.pkg.flags.Namespace": {"tf": 1}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 1}, "etl.pkg.io.FileResolver.output_report": {"tf": 1}, "etl.pkg.policy.Policy.action_on_invalid_field": {"tf": 1}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1}, "etl.pkg.validators.na_validator": {"tf": 1}, "etl.pkg.workflows.Generic": {"tf": 1}, "etl.pkg.workflows.Generic.execute": {"tf": 1}, "etl.tests.flags_test": {"tf": 1}, "etl.tests.io_test": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_archive": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_bad": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_report": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_recyclable": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_override_start_date": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext": {"tf": 1}, "etl.tests.utils_test": {"tf": 1}}, "df": 126, "m": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}}, "df": 2, "a": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.explode": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.map": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.validators.date_validator": {"tf": 1.4142135623730951}}, "df": 9, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}}, "df": 3, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}}, "df": 2}}}}}}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 2}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.Series.align": {"tf": 1}}, "df": 1, "/": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.Series.align": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.components.interface.Executable.execute": {"tf": 1}, "etl.pkg.workflows.Base.execute": {"tf": 1}}, "df": 2}, "r": {"docs": {"etl.pkg.io": {"tf": 1}, "etl.pkg.io.BAD_FOLDER": {"tf": 1}, "etl.pkg.io.ARCHIVE_FOLDER": {"tf": 1}, "etl.pkg.io.RECYCLABLE_FOLDER": {"tf": 1}, "etl.pkg.io.REPORT_FOLDER": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_archive": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_bad": {"tf": 1}, "etl.pkg.io.FileResolverIterator": {"tf": 1}, "etl.tests.utils_test.create_test_file": {"tf": 1}}, "df": 9}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}}, "df": 6}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.pop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.map": {"tf": 1}}, "df": 5}}, "r": {"docs": {"etl.pkg.dataframe.Series.nsmallest": {"tf": 1}}, "df": 1}}, "o": {"docs": {"etl.pkg.dataframe.DataFrame.explode": {"tf": 2}, "etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1.7320508075688772}}, "df": 5, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}}, "df": 2}}}}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1}}, "df": 4, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.policy.strict": {"tf": 1}}, "df": 2}, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.io.FileResolver": {"tf": 1}, "etl.pkg.io.file_resolver_context": {"tf": 1}}, "df": 2}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.config.Registry": {"tf": 1}}, "df": 1, "s": {"docs": {"etl.pkg.config": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.policy.Policy": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 5.291502622129181}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 5.291502622129181}, "etl.pkg.dataframe.DataFrame.le": {"tf": 5.291502622129181}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 5.291502622129181}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 5.291502622129181}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 5.291502622129181}, "etl.pkg.dataframe.Series.rename": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 2}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.between": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.lt": {"tf": 2}, "etl.pkg.dataframe.Series.gt": {"tf": 2}, "etl.pkg.dataframe.Series.le": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.ge": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 2}}, "df": 50}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.pop": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 4}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.groupby": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.combine": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1.4142135623730951}}, "df": 7}}}, "l": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"etl.pkg.dataframe.Series.quantile": {"tf": 1}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 1}}, "df": 2}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}}, "df": 5}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2}}, "df": 1}}}}}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 2}}, "g": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.exceptions.FlagsError": {"tf": 1}}, "df": 1}}}, "r": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.4142135623730951}}, "df": 2, "o": {"docs": {}, "df": 0, "m": {"docs": {"etl.pkg.components.identifiers.Identifier.pipe": {"tf": 1}, "etl.pkg.config.Registry": {"tf": 1.7320508075688772}, "etl.pkg.config.Registry.load": {"tf": 1}, "etl.pkg.config.Registry.get": {"tf": 1}, "etl.pkg.dataframe": {"tf": 1}, "etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.join": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.from_dict": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.quantile": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.dropna": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 2}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_bag": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}, "etl.pkg.flags": {"tf": 1}, "etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1}, "etl.pkg.io": {"tf": 1}, "etl.pkg.io.ISO_DATE_PREFIX": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 1}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolverIterator": {"tf": 1}, "etl.pkg.policy.from_config": {"tf": 1}, "etl.pkg.resolvers.IdentifierResolver": {"tf": 1}, "etl.pkg.resolvers.TaxonomyResolver": {"tf": 1}, "etl.pkg.validators.FieldsValidator": {"tf": 1}, "etl.pkg.validators.date_validator": {"tf": 1}, "etl.sample_generic_etl.execute": {"tf": 1}}, "df": 134}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1}}, "df": 1, "b": {"docs": {}, "df": 0, "i": {"docs": {"etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 1}}, "df": 2}}}, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}}, "df": 1, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}}, "df": 2}}}}, "q": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 2.449489742783178}}, "df": 3, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}}, "df": 6}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.Series.value_counts": {"tf": 1.4142135623730951}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}}, "df": 2}}}}}}}, "s": {"docs": {}, "df": 0, "h": {"docs": {"etl.tests.flags_test.TestArgumentParser.parser": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.join": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1.4142135623730951}}, "df": 57, "s": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nlargest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1.4142135623730951}}, "df": 4}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"etl.pkg.dataframe.DataFrame.eval": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 2}, "etl.pkg.dataframe.Series.combine": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.apply": {"tf": 1.4142135623730951}}, "df": 5, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 2}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 2}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 2}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.map": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.between": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.combine": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.apply": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1.4142135623730951}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1}, "etl.pkg.validators.regexp_validator": {"tf": 1.4142135623730951}, "etl.pkg.validators.minmax_validator": {"tf": 1.4142135623730951}, "etl.pkg.validators.date_validator": {"tf": 1}}, "df": 28, "s": {"docs": {"etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}}, "df": 5}}}}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 2}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1, "y": {"docs": {"etl.pkg.dataframe.DataFrame.query": {"tf": 1}}, "df": 1, "l": {"docs": {"etl.pkg.io.FileResolver.get_file_name": {"tf": 1}}, "df": 1}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"etl.pkg.validators.regexp_validator": {"tf": 1}}, "df": 1}}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"6": {"4": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 3}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 2}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.add": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.sub": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.mul": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.div": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.divide": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.truediv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.mod": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.pow": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.radd": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rsub": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rmul": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rmod": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rpow": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.lt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.gt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.le": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.ge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.ne": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.eq": {"tf": 1.4142135623730951}}, "df": 37}, "docs": {}, "df": 0}, "docs": {"etl.pkg.dataframe.DataFrame.clip": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 54, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.quantile": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}}, "df": 5}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1.4142135623730951}}, "df": 11}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1.4142135623730951}}, "df": 19}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}}, "df": 23}}}}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {"etl.sample_generic_etl.execute": {"tf": 1}}, "df": 1, "s": {"docs": {"etl.pkg.flags": {"tf": 1.7320508075688772}, "etl.pkg.flags.ArgumentParser": {"tf": 1}, "etl.sample_generic_etl.execute": {"tf": 1}, "etl.sample_generic_etl.main": {"tf": 1}, "etl.tests.flags_test": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser": {"tf": 1}}, "df": 6}}}}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2}}, "df": 1}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.Series.align": {"tf": 1.4142135623730951}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "w": {"docs": {"etl.pkg.flags": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.io": {"tf": 1}}, "df": 1}}}}}}}}, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.components.checkers.ContentChecker": {"tf": 1}, "etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 1}, "etl.pkg.policy.Policy": {"tf": 1}}, "df": 34, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.policy.ActionOnIssue": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 2}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 2}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.io.BAD_FOLDER": {"tf": 1}, "etl.pkg.io.ARCHIVE_FOLDER": {"tf": 1}, "etl.pkg.io.RECYCLABLE_FOLDER": {"tf": 1}, "etl.pkg.io.REPORT_FOLDER": {"tf": 1}}, "df": 18, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.Series.between": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.between": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}}, "df": 41}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"etl.pkg.components.interface": {"tf": 1}, "etl.pkg.dataframe.DataFrame": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.policy.strict": {"tf": 1}, "etl.pkg.policy.skip": {"tf": 1}}, "df": 39}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1}}, "df": 6}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1.4142135623730951}}, "df": 2}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.Series.map": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.Series.quantile": {"tf": 1}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 1}, "etl.pkg.policy.ActionOnIssue": {"tf": 1}}, "df": 3}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1.7320508075688772}, "etl.pkg.components.identifiers.Identifier.pipe": {"tf": 1}, "etl.pkg.components.interface.Pipable": {"tf": 1}, "etl.pkg.config.Registry": {"tf": 2.449489742783178}, "etl.pkg.config.Registry.load": {"tf": 1}, "etl.pkg.database": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 2}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 2}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 2}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 2}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 2}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.join": {"tf": 2}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 2}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.add": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.div": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 2}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 2}, "etl.pkg.dataframe.DataFrame.le": {"tf": 2}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 2}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 2}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 2}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 2}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 2}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.dropna": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.between": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.clip": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.align": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.combine": {"tf": 2}, "etl.pkg.dataframe.Series.squeeze": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.combine_first": {"tf": 2}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.cov": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.corr": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.add": {"tf": 2}, "etl.pkg.dataframe.Series.sub": {"tf": 2}, "etl.pkg.dataframe.Series.mul": {"tf": 2}, "etl.pkg.dataframe.Series.div": {"tf": 2}, "etl.pkg.dataframe.Series.divide": {"tf": 2}, "etl.pkg.dataframe.Series.truediv": {"tf": 2}, "etl.pkg.dataframe.Series.floordiv": {"tf": 2}, "etl.pkg.dataframe.Series.mod": {"tf": 2}, "etl.pkg.dataframe.Series.pow": {"tf": 2}, "etl.pkg.dataframe.Series.radd": {"tf": 2}, "etl.pkg.dataframe.Series.rsub": {"tf": 2}, "etl.pkg.dataframe.Series.rmul": {"tf": 2}, "etl.pkg.dataframe.Series.rdiv": {"tf": 2}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 2}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 2}, "etl.pkg.dataframe.Series.rmod": {"tf": 2}, "etl.pkg.dataframe.Series.rpow": {"tf": 2}, "etl.pkg.dataframe.Series.lt": {"tf": 2}, "etl.pkg.dataframe.Series.gt": {"tf": 2}, "etl.pkg.dataframe.Series.le": {"tf": 2}, "etl.pkg.dataframe.Series.ge": {"tf": 2}, "etl.pkg.dataframe.Series.ne": {"tf": 2}, "etl.pkg.dataframe.Series.eq": {"tf": 2}, "etl.pkg.flags.ArgumentParser": {"tf": 1}, "etl.pkg.io.FileResolver.name_prefix": {"tf": 1}, "etl.pkg.io.file_resolver_context": {"tf": 1}, "etl.pkg.io.FileResolverIterator": {"tf": 1}, "etl.pkg.policy.Policy": {"tf": 1}, "etl.pkg.policy.skip": {"tf": 1}, "etl.pkg.runtime.Runtime": {"tf": 1}, "etl.pkg.runtime.context": {"tf": 1.4142135623730951}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1}, "etl.sample_generic_etl.main": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_happy_with_files": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_no_input": {"tf": 1.4142135623730951}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_not_existing": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_is_a_dir": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_existing": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_folder": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_archive": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_bad": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_report": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_recyclable": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_override_start_date": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_many_dates": {"tf": 1}}, "df": 143, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1}}, "df": 7}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}, "etl.pkg.validators.minmax_validator": {"tf": 1}}, "df": 5}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.iloc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 2}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 2}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.quantile": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.explode": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.isin": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 2}, "etl.pkg.dataframe.Series.align": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.view": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}, "etl.pkg.resolvers.IdentifierResolver": {"tf": 1}}, "df": 102}, "d": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.groupby": {"tf": 2.23606797749979}}, "df": 2}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rpow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 52}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}}, "df": 3}, "t": {"docs": {}, "df": 0, "h": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}}, "df": 2}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.itertuples": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 2.6457513110645907}}, "df": 2}}, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1.7320508075688772}}, "df": 1}}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.corr": {"tf": 1.7320508075688772}}, "df": 3}}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {"etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_date_extraction_many_dates": {"tf": 1}}, "df": 8, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"etl.pkg.components.interface.Executable.execute": {"tf": 1}, "etl.pkg.io.FileResolver.output_report": {"tf": 1}, "etl.pkg.workflows.Base": {"tf": 1}, "etl.pkg.workflows.Base.execute": {"tf": 1}, "etl.pkg.workflows.Generic.execute": {"tf": 1.4142135623730951}, "etl.sample_generic_etl": {"tf": 1}, "etl.sample_generic_etl.execute": {"tf": 1.4142135623730951}}, "df": 7, "s": {"docs": {"etl.pkg.workflows": {"tf": 1.7320508075688772}, "etl.pkg.workflows.Base": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 3}}, "d": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.Series.align": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.flags": {"tf": 1}}, "df": 3}}}}, "e": {"docs": {"etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.flags": {"tf": 1}, "etl.pkg.io.FileResolver.date_pattern": {"tf": 1}}, "df": 19, "l": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1.4142135623730951}, "etl.sample_generic_etl.execute": {"tf": 1}}, "df": 7}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.drop": {"tf": 3.605551275463989}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}, "etl.pkg.exceptions.UndeclaredFieldError": {"tf": 1}, "etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1}}, "df": 104}, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 2}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.to_records": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}}, "df": 2}}}}}, "y": {"docs": {"etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}}, "df": 1, "s": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 1}}, "df": 1}}, "l": {"docs": {}, "df": 0, "k": {"docs": {"etl.pkg.io": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.io.FileResolverIterator": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.7320508075688772}}, "df": 1}}}, "e": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}}, "df": 4, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}}, "df": 1, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}}, "df": 23}}}}, "s": {"docs": {"etl.pkg.exceptions": {"tf": 1}, "etl.pkg.runtime.context": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.io.FileResolver": {"tf": 1}}, "df": 1}}}}}}}, "l": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 2}}, "df": 1, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 2}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 2}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 2}, "etl.pkg.dataframe.DataFrame.join": {"tf": 2}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.explode": {"tf": 2}, "etl.pkg.dataframe.Series.isin": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.between": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolverIterator": {"tf": 1}, "etl.sample_generic_etl.FIELDS_WITH_EXTERNAL_IDENTIFIERS": {"tf": 1}, "etl.sample_generic_etl.FIELDS_WITH_TAXONOMIES": {"tf": 1}, "etl.sample_generic_etl.FIELDS_WITH_VALIDATION": {"tf": 1}}, "df": 47, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}}, "df": 2}}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.explode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.explode": {"tf": 1.4142135623730951}}, "df": 3}, "/": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.Series.quantile": {"tf": 1}}, "df": 1}}}}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.config": {"tf": 1}, "etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 2}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 2}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.explode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.clip": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.flags": {"tf": 1}, "etl.pkg.runtime.Runtime": {"tf": 1}, "etl.pkg.runtime.Runtime.get_config": {"tf": 1}}, "df": 59, "s": {"docs": {"etl.pkg.dataframe.DataFrame.explode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.explode": {"tf": 1.4142135623730951}}, "df": 2}, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.flags": {"tf": 1}}, "df": 3}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1.4142135623730951}}, "df": 4, "s": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.policy.skip": {"tf": 1}}, "df": 2}}, "k": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.pop": {"tf": 1.7320508075688772}}, "df": 1}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1.4142135623730951}}, "df": 4, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.io": {"tf": 1}}, "df": 1}}}}}}}}}, "e": {"docs": {}, "df": 0, "u": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.config.Registry.load": {"tf": 1.4142135623730951}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.config": {"tf": 1}, "etl.pkg.config.Registry": {"tf": 1}}, "df": 2}, "d": {"docs": {"etl.pkg.config.Registry.dump": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {"etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}}, "df": 4, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.iloc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}, "etl.pkg.io.FileResolver.output_report": {"tf": 1}, "etl.pkg.io.FileResolver.output_recyclable": {"tf": 1}}, "df": 30, "s": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 40}}}}}, "l": {"docs": {"etl.pkg.dataframe.DataFrame.query": {"tf": 1.7320508075688772}, "etl.pkg.io": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 1.4142135623730951}}, "df": 3}}}, "o": {"docs": {}, "df": 0, "k": {"docs": {"etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}}}}, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.clip": {"tf": 2.23606797749979}}, "df": 4}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.explode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1.4142135623730951}}, "df": 3, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}}, "df": 2}}}}, "g": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.runtime.Runtime": {"tf": 1}, "etl.pkg.runtime.Runtime.get_logger": {"tf": 1.4142135623730951}}, "df": 2, "s": {"docs": {"etl.pkg.runtime": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.tests.flags_test.TestArgumentParser.test_invalid_no_input": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"etl.pkg.dataframe.DataFrame.lt": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.le": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.le": {"tf": 1.7320508075688772}}, "df": 7, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 2}}, "df": 2}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 2}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.melt": {"tf": 1.4142135623730951}}, "df": 1}}}}, "d": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 5}}, "n": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1.4142135623730951}}, "df": 2, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}}, "df": 12}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.add": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.div": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.le": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.groupby": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 2}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.sub": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.mul": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.div": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.divide": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.truediv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.mod": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.pow": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.radd": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rsub": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rmul": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rmod": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rpow": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.lt": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.gt": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.le": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.ge": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.ne": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.eq": {"tf": 1.7320508075688772}}, "df": 58, "s": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 2}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}}, "df": 4}}}}, "f": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 3}, "etl.pkg.dataframe.DataFrame.join": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.align": {"tf": 2.6457513110645907}, "etl.pkg.validators.minmax_validator": {"tf": 1}}, "df": 11}}, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}}}}}}}, "g": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.itertuples": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 2.449489742783178}}, "df": 2}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.lt": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}}, "df": 9}}}, "t": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 2}, "etl.pkg.dataframe.DataFrame.le": {"tf": 2}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 2}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 2}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 2}, "etl.pkg.dataframe.Series.shape": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 2}, "etl.pkg.dataframe.Series.le": {"tf": 1}}, "df": 44}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 2}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.align": {"tf": 1}}, "df": 8}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.pop": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.items": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}}, "df": 32, "s": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 3.872983346207417}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 2}, "etl.pkg.dataframe.Series.rename": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}}, "df": 12}, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}}, "df": 4}}}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 4, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.nlargest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}}, "df": 3}}, "r": {"docs": {"etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}}, "df": 2}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 6}}}, "a": {"docs": {"etl.pkg.dataframe.DataFrame.drop": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.isin": {"tf": 2.6457513110645907}}, "df": 2}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 1}}, "df": 1}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}}, "df": 3}}}}, "g": {"docs": {"etl.pkg.dataframe.Series.autocorr": {"tf": 2}}, "df": 1, "s": {"docs": {"etl.pkg.dataframe.Series.autocorr": {"tf": 1}}, "df": 1}}, "z": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.workflows.Generic.read_csv": {"tf": 1.4142135623730951}, "etl.sample_generic_etl.execute": {"tf": 1}}, "df": 2}}}, "l": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}, "h": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}, "b": {"0": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 2.6457513110645907}}, "df": 1}, "1": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 2.8284271247461903}}, "df": 1}, "2": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 2.23606797749979}}, "df": 1}, "docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 2}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 3}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.join": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 2}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.add": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.div": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.le": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 4.123105625617661}, "etl.pkg.dataframe.Series.groupby": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.align": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.apply": {"tf": 2}, "etl.pkg.dataframe.Series.corr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.add": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.sub": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.mul": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.div": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.divide": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.truediv": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.floordiv": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.mod": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.pow": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.radd": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.rsub": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.rmul": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.rdiv": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.rmod": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.rpow": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.lt": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.gt": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.le": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.ge": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.ne": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.eq": {"tf": 2.8284271247461903}}, "df": 66, "e": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}, "etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 2}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 4}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 2}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.join": {"tf": 2}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.round": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 2}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.map": {"tf": 2}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 2}, "etl.pkg.dataframe.Series.align": {"tf": 2}, "etl.pkg.dataframe.Series.combine": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.apply": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.corr": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}, "etl.pkg.io.FileResolver.date_pattern": {"tf": 1}, "etl.pkg.io.FileResolver.name_prefix": {"tf": 1}, "etl.pkg.workflows.Base": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_success": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_failure": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_other_failure": {"tf": 1}}, "df": 108, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}}, "df": 4}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 46}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}}, "df": 6}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 5}}}, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 2}}, "df": 7}}}}}, "r": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 2.23606797749979}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}}, "df": 7}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.clip": {"tf": 1}}, "df": 3}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.items": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.items": {"tf": 2.449489742783178}}, "df": 1}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.Series.isin": {"tf": 1}}, "df": 1}}}}}, "y": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1.4142135623730951}, "etl.pkg.config": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iloc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 3}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 3.7416573867739413}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 2}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.add": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.div": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.quantile": {"tf": 1}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 2}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 2}, "etl.pkg.dataframe.Series.view": {"tf": 1}, "etl.pkg.flags.Namespace": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_archive": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_bad": {"tf": 1}, "etl.pkg.resolvers": {"tf": 1}, "etl.sample_generic_etl": {"tf": 1.4142135623730951}}, "df": 70, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 2}, "etl.pkg.dataframe.Series.nbytes": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.view": {"tf": 1.7320508075688772}}, "df": 5}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.mode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 2}, "etl.pkg.dataframe.Series.isin": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.between": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}, "etl.pkg.policy.PolicyResolver.tolerates_data_issues": {"tf": 1}, "etl.pkg.workflows.Generic.did_produce_recyclable": {"tf": 1}}, "df": 54, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.components.checkers.ContentChecker.pipe": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 2}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.between": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_increasing": {"tf": 1}, "etl.pkg.dataframe.Series.is_monotonic_decreasing": {"tf": 1}}, "df": 14, "s": {"docs": {"etl.pkg.dataframe.Series.isin": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.join": {"tf": 2}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}, "etl.pkg.validators.minmax_validator": {"tf": 1}}, "df": 52}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.between": {"tf": 1}}, "df": 2, "s": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.clip": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.between": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.clip": {"tf": 1.4142135623730951}}, "df": 3}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.validators.minmax_validator": {"tf": 1}}, "df": 4}}}}}}}}, "r": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.dropna": {"tf": 2.449489742783178}}, "df": 1}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.to_html": {"tf": 2}}, "df": 1}}}}, "x": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}}, "df": 2}, "l": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}}, "df": 1}}, "b": {"docs": {"etl.pkg.dataframe.Series.between": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.flags": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.components.historian": {"tf": 1}, "etl.pkg.flags": {"tf": 1}, "etl.pkg.workflows": {"tf": 1}}, "df": 3}}}, "t": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 57}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.dataframe.DataFrame.dropna": {"tf": 2.23606797749979}}, "df": 1}}}}}}, "f": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_string": {"tf": 1.4142135623730951}}, "df": 3, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}}, "df": 3}}}}, "g": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.Series.rename": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.workflows.Base": {"tf": 1}}, "df": 1, "d": {"docs": {"etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iloc": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.policy.from_config": {"tf": 1}, "etl.pkg.workflows": {"tf": 1}}, "df": 12}}, "i": {"docs": {}, "df": 0, "c": {"docs": {"etl.pkg.policy.strict": {"tf": 1}, "etl.pkg.policy.skip": {"tf": 1}}, "df": 2, "s": {"docs": {"etl.pkg.dataframe.DataFrame.rename": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "k": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.query": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.7320508075688772}}, "df": 1, "s": {"docs": {"etl.pkg.dataframe.DataFrame.eval": {"tf": 1}}, "df": 1}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.Series.align": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.dropna": {"tf": 2.6457513110645907}}, "df": 1}}, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.dropna": {"tf": 2.449489742783178}}, "df": 1}}}}}}}, "g": {"docs": {"etl.pkg.dataframe.DataFrame.to_bag": {"tf": 2}, "etl.pkg.dataframe.Series.to_bag": {"tf": 1}}, "df": 2}, "d": {"docs": {"etl.pkg.io.BAD_FOLDER": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 1}, "etl.pkg.io.FileResolver.move_to_bad": {"tf": 1.4142135623730951}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_bad": {"tf": 1}}, "df": 4}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.io.file_resolver_context": {"tf": 1}}, "df": 2, "s": {"docs": {"etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1}}, "df": 2}, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.query": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {"etl.pkg.io.FileResolver": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.pop": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 2.449489742783178}}, "df": 2, "s": {"docs": {"etl.pkg.dataframe.Series.combine": {"tf": 1.4142135623730951}}, "df": 1}}}, "g": {"docs": {"etl.pkg.dataframe.DataFrame.drop": {"tf": 2.23606797749979}}, "df": 1}, "a": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 2}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 46}}}, "s": {"docs": {"etl.pkg.dataframe.Series.value_counts": {"tf": 2.449489742783178}}, "df": 1}, "d": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.workflows.Generic.read_csv": {"tf": 1}, "etl.sample_generic_etl.execute": {"tf": 1}}, "df": 2}}}, "t": {"docs": {"etl.pkg.dataframe.Series.view": {"tf": 1.4142135623730951}}, "df": 1}}, "n": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.4142135623730951}}, "df": 2}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "i": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nlargest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1.4142135623730951}}, "df": 4}}}}, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 2}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.align": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 48}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}}, "df": 1}}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.Series.align": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.components.historian": {"tf": 1}}, "df": 1}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.components.historian": {"tf": 1}}, "df": 1}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {"etl.pkg.dataframe.DataFrame.corr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.corr": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}}, "df": 5}}}}}}}}}}, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.rename": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {"etl.pkg.dataframe.Series.isin": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {"etl.pkg.components.interface": {"tf": 1}, "etl.pkg.components.interface.Executable": {"tf": 1}, "etl.pkg.components.interface.Pipable": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.join": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolver": {"tf": 1.4142135623730951}, "etl.pkg.policy": {"tf": 1}, "etl.pkg.validators.FieldsValidator": {"tf": 1}}, "df": 14, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}}, "df": 3}}}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.mode": {"tf": 1.7320508075688772}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.Series.align": {"tf": 1}}, "df": 1}}, "d": {"docs": {"etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "w": {"docs": {"etl.pkg.config.Registry": {"tf": 2}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.config.Registry": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"3": {"docs": {"etl.pkg.config.Registry": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}}}, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}}, "df": 1}}}}}, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}}, "df": 18}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.corr": {"tf": 1.7320508075688772}}, "df": 3}}}}}}, ":": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, ":": {"8": {"2": {"0": {"0": {"docs": {"etl.pkg.config.Registry": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 6, "#": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}}}}}}}}}, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 2}}}}}}}}}, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}}, "df": 17}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.to_frame": {"tf": 1}}, "df": 12, "h": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1.7320508075688772}}, "df": 1, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.config.Registry": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.Series.rename": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pivot_table": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1.4142135623730951}, "etl.pkg.flags": {"tf": 1}}, "df": 23}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}}, "df": 5}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.query": {"tf": 1}}, "df": 1}}, "y": {"docs": {"etl.tests.io_test.TestFileResolver.test_happy_file_resolver_archive": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_bad": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_report": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_recyclable": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_override_start_date": {"tf": 1}}, "df": 5}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.io.file_resolver_context": {"tf": 1.4142135623730951}, "etl.pkg.policy": {"tf": 1}, "etl.pkg.runtime.context": {"tf": 1}}, "df": 5, "d": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}}, "df": 2}, "s": {"docs": {"etl.pkg.io.file_resolver_context": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.policy.Policy": {"tf": 1}, "etl.pkg.policy.strict": {"tf": 1}}, "df": 2}}}}}}, "w": {"docs": {}, "df": 0, "k": {"docs": {"etl.pkg.dataframe.DataFrame.itertuples": {"tf": 2}}, "df": 1}}, "l": {"docs": {}, "df": 0, "f": {"docs": {"etl.pkg.dataframe.Series.value_counts": {"tf": 1.4142135623730951}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.sample_generic_etl": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1.4142135623730951}}, "df": 5, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1.4142135623730951}}, "df": 3}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.sample_generic_etl.execute": {"tf": 1}}, "df": 3}}, "x": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.7320508075688772}}, "df": 17}}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"etl.tests.flags_test.TestArgumentParser.test_invalid_no_input": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.components.historian": {"tf": 1}, "etl.pkg.components.identifiers": {"tf": 1}, "etl.pkg.components.mappers": {"tf": 1}}, "df": 3}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.io": {"tf": 1}, "etl.pkg.validators": {"tf": 1}, "etl.tests.utils_test": {"tf": 1}}, "df": 3}}}}}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1.4142135623730951}}, "df": 3}}}, "f": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}}, "df": 2}}, "s": {"docs": {"etl.pkg.dataframe.Series.view": {"tf": 1.7320508075688772}}, "df": 1, "e": {"docs": {"etl.pkg.config.Registry.get": {"tf": 1}, "etl.pkg.dataframe.DataFrame": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.join": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.quantile": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.median_approximate": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.isin": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.runtime": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_no_input": {"tf": 1}}, "df": 39, "d": {"docs": {"etl.pkg.components.interface.NopPipe": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 2}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 2}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 2}, "etl.pkg.dataframe.Series.map": {"tf": 2}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.io.ISO_DATE_PREFIX": {"tf": 1}, "etl.pkg.io.FileResolver.name_prefix": {"tf": 1}, "etl.pkg.runtime.context": {"tf": 1}, "etl.pkg.workflows.Base": {"tf": 1}, "etl.sample_generic_etl.FIELDS_WITH_EXTERNAL_IDENTIFIERS": {"tf": 1}}, "df": 25}, "r": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}}, "df": 10}, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}}, "df": 4}}}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}}, "df": 5}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 2}, "etl.pkg.dataframe.DataFrame.query": {"tf": 2}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.join": {"tf": 2}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.clip": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1}, "etl.pkg.flags": {"tf": 1}, "etl.pkg.validators.regexp_validator": {"tf": 1}, "etl.sample_generic_etl": {"tf": 1}}, "df": 31}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 3.605551275463989}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 3}, "etl.pkg.flags": {"tf": 1}}, "df": 5}}}, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.config.Registry": {"tf": 1}}, "df": 1, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}}, "df": 1}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"etl.pkg.workflows.Generic.read_csv": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}}, "df": 4, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1.4142135623730951}}, "df": 7}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.exceptions.UndeclaredFieldError": {"tf": 1}}, "df": 1, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}}, "df": 32}}}}, "k": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.categorize": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rename": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 2}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.unique": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1.7320508075688772}}, "df": 7, "s": {"docs": {"etl.pkg.dataframe.Series.unique": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}}, "df": 23}}}}, "t": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}}, "df": 1}, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.runtime.context": {"tf": 1}}, "df": 1}}}}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}}, "df": 4}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_other_failure": {"tf": 1}}, "df": 1}}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1.4142135623730951}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.Series.view": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}}, "df": 3, "s": {"docs": {"etl.pkg.dataframe.DataFrame.melt": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.melt": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 3}}}}}}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}}, "df": 2}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 1}}, "df": 2}}}}}, "p": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 2}, "etl.pkg.dataframe.Series.clip": {"tf": 2}}, "df": 3}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.Series.combine_first": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_success": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_failure": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"8": {"docs": {"etl.pkg.dataframe.Series.view": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}}}}, "n": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 4.358898943540674}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 4.358898943540674}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}}, "df": 12, "u": {"docs": {}, "df": 0, "m": {"docs": {"etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 4}}, "df": 2, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}}, "df": 23, "a": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.components.identifiers.Identifier.pipe": {"tf": 1}, "etl.pkg.resolvers.IdentifierResolver": {"tf": 1}, "etl.pkg.resolvers.TaxonomyResolver": {"tf": 1}}, "df": 3}}}}}, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.query": {"tf": 2}}, "df": 1}}}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.shape": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nbytes": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.count": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.align": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.to_string": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1.4142135623730951}}, "df": 31, "s": {"docs": {"etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.Series.quantile": {"tf": 1}}, "df": 2}}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.round": {"tf": 2}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.clip": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1.7320508075688772}}, "df": 8}}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.nunique": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.nunique": {"tf": 2}}, "df": 2}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 2.449489742783178}}, "df": 3}}}, "o": {"docs": {"etl.pkg.components.interface.NopPipe": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.io": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_no_input": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_file_not_existing": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_existing": {"tf": 1}, "etl.tests.io_test.TestFileResolverIterator.test_iterator_from_dir": {"tf": 1}}, "df": 17, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.components.interface.NopPipe": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {"etl.pkg.config.Registry.get": {"tf": 1}, "etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 2}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 2}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 2}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 3.3166247903554}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 4.69041575982343}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.median": {"tf": 2}, "etl.pkg.dataframe.Series.groupby": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.isin": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.dropna": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.clip": {"tf": 2}, "etl.pkg.dataframe.Series.align": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.dataframe.Series.to_string": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 1}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1}, "etl.sample_generic_etl.execute": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_dir_not_folder": {"tf": 1}, "etl.tests.io_test.TestFileResolverContext.test_file_resolver_context_other_failure": {"tf": 1}}, "df": 61, "e": {"docs": {"etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.config.Registry.load": {"tf": 1}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_invalid_no_input": {"tf": 1}}, "df": 19, "s": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1}}, "df": 47}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "k": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 2}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {"etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}}, "df": 2}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {"etl.pkg.dataframe.DataFrame.dropna": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.count": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}}, "df": 15, "e": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 3}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 3}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 2}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.dropna": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.clip": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.Series.align": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.to_string": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rpow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.lt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.gt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.le": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.ge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.ne": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.eq": {"tf": 1.4142135623730951}, "etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1.7320508075688772}}, "df": 67}}, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.Series.value_counts": {"tf": 1.7320508075688772}}, "df": 1, "d": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}}, "df": 2}}}}}}}}, "w": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.combine": {"tf": 1}}, "df": 7}, "d": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}}, "df": 2}}}, "a": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 2}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 2}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 2}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.unique": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.map": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.dropna": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_string": {"tf": 1}, "etl.pkg.validators.na_validator": {"tf": 1}}, "df": 20, "m": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 2}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.items": {"tf": 2}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 2}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.groupby": {"tf": 3.605551275463989}, "etl.pkg.dataframe.Series.value_counts": {"tf": 2}, "etl.pkg.dataframe.Series.isin": {"tf": 2}, "etl.pkg.dataframe.Series.map": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.to_frame": {"tf": 2}, "etl.pkg.dataframe.Series.to_string": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.apply": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}, "etl.pkg.io": {"tf": 1}, "etl.pkg.io.ISO_DATE_PREFIX": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 1.4142135623730951}, "etl.pkg.io.FileResolver.name_prefix": {"tf": 1}, "etl.pkg.io.FileResolver.get_file_name": {"tf": 1.7320508075688772}, "etl.pkg.io.FileResolver.set_date_from_name": {"tf": 1.7320508075688772}, "etl.pkg.io.FileResolverIterator": {"tf": 1}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1.7320508075688772}, "etl.sample_generic_etl.execute": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_archive": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_happy_file_resolver_bad": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_report": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_ouput_recyclable": {"tf": 1}, "etl.tests.io_test.TestFileResolver.test_override_start_date": {"tf": 1}}, "df": 70, "s": {"docs": {"etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 2}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.apply": {"tf": 1.4142135623730951}, "etl.pkg.flags.Namespace": {"tf": 1}, "etl.pkg.io": {"tf": 1}}, "df": 22, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}, "etl.pkg.flags": {"tf": 1}, "etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1.7320508075688772}}, "df": 5}}}}}, "d": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 2}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1}}, "df": 3}}}}}}}}}, "n": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 2}, "etl.pkg.dataframe.DataFrame.join": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 2}, "etl.pkg.dataframe.DataFrame.add": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.div": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.groupby": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}, "etl.pkg.dataframe.Series.value_counts": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.map": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.dropna": {"tf": 2}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.align": {"tf": 6.324555320336759}, "etl.pkg.dataframe.Series.combine": {"tf": 2}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.autocorr": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.add": {"tf": 3}, "etl.pkg.dataframe.Series.sub": {"tf": 3}, "etl.pkg.dataframe.Series.mul": {"tf": 3}, "etl.pkg.dataframe.Series.div": {"tf": 3}, "etl.pkg.dataframe.Series.divide": {"tf": 3}, "etl.pkg.dataframe.Series.truediv": {"tf": 3}, "etl.pkg.dataframe.Series.floordiv": {"tf": 3}, "etl.pkg.dataframe.Series.mod": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.pow": {"tf": 3}, "etl.pkg.dataframe.Series.radd": {"tf": 3}, "etl.pkg.dataframe.Series.rsub": {"tf": 3}, "etl.pkg.dataframe.Series.rmul": {"tf": 3}, "etl.pkg.dataframe.Series.rdiv": {"tf": 3}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 3}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 3}, "etl.pkg.dataframe.Series.rmod": {"tf": 3.3166247903554}, "etl.pkg.dataframe.Series.rpow": {"tf": 3}, "etl.pkg.dataframe.Series.lt": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.gt": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.le": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.ge": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.ne": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.eq": {"tf": 2.8284271247461903}}, "df": 74, "s": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1.4142135623730951}}, "df": 2}, "/": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.mode": {"tf": 1}, "etl.pkg.dataframe.Series.mode": {"tf": 1}}, "df": 2}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 2.449489742783178}}, "df": 4}}}, "t": {"docs": {"etl.pkg.dataframe.DataFrame.dropna": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.dropna": {"tf": 1.4142135623730951}}, "df": 2}, "/": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.nunique": {"tf": 1}}, "df": 5}}}}}}, "p": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.count": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.sub": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.mul": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.div": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.divide": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.truediv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.mod": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.pow": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.radd": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rsub": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rmul": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rmod": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.rpow": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.lt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.gt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.le": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.ge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.ne": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.eq": {"tf": 1.7320508075688772}}, "df": 45, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 2}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 6}}}}}}}}}}, "e": {"docs": {"etl.pkg.dataframe.DataFrame.lt": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.ne": {"tf": 1.7320508075688772}}, "df": 7, "w": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.add": {"tf": 1}, "etl.pkg.dataframe.Series.sub": {"tf": 1}, "etl.pkg.dataframe.Series.mul": {"tf": 1}, "etl.pkg.dataframe.Series.div": {"tf": 1}, "etl.pkg.dataframe.Series.divide": {"tf": 1}, "etl.pkg.dataframe.Series.truediv": {"tf": 1}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1}, "etl.pkg.dataframe.Series.mod": {"tf": 1}, "etl.pkg.dataframe.Series.pow": {"tf": 1}, "etl.pkg.dataframe.Series.radd": {"tf": 1}, "etl.pkg.dataframe.Series.rsub": {"tf": 1}, "etl.pkg.dataframe.Series.rmul": {"tf": 1}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.Series.rmod": {"tf": 1}, "etl.pkg.dataframe.Series.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.lt": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.le": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}, "etl.pkg.dataframe.Series.ne": {"tf": 1}, "etl.pkg.dataframe.Series.eq": {"tf": 1}, "etl.pkg.flags.ArgumentParser.parse_args": {"tf": 1}, "etl.pkg.runtime.context": {"tf": 1}}, "df": 53, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 1}}, "df": 1}}}, "x": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1.4142135623730951}}, "df": 4}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}}, "df": 2}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}}, "df": 2}}}, "y": {"docs": {"etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 3}}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.cov": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}, "etl.pkg.dataframe.Series.add": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.sub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.mul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.div": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.divide": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.truediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.floordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.mod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.pow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.radd": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rsub": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rmul": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rdiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rmod": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rpow": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.lt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.gt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.le": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.ge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.ne": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.eq": {"tf": 1.4142135623730951}}, "df": 43}}}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.Series.round": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.Series.between": {"tf": 1.7320508075688772}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}}, "df": 4}}}}}}}, "s": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 2.23606797749979}}, "df": 4}}}}}}}}, "r": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 2.23606797749979}}, "df": 2}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.view": {"tf": 1.4142135623730951}}, "df": 9, "s": {"docs": {"etl.pkg.dataframe.DataFrame.corr": {"tf": 1}, "etl.pkg.dataframe.Series.corr": {"tf": 1}}, "df": 2}}}}}}}, "b": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 1}}, "df": 2}}}}}, "/": {"docs": {}, "df": 0, "a": {"docs": {"etl.pkg.validators.na_validator": {"tf": 1}}, "df": 1}}}, "k": {"0": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 3.7416573867739413}}, "df": 1}, "1": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 4.123105625617661}}, "df": 1}, "2": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 2.8284271247461903}}, "df": 1}, "3": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 2.8284271247461903}}, "df": 1}, "4": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 2.23606797749979}}, "df": 1}, "5": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 2.23606797749979}}, "df": 1}, "docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.explode": {"tf": 1}}, "df": 2, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1.4142135623730951}, "etl.sample_generic_etl.execute": {"tf": 1}}, "df": 5, "s": {"docs": {"etl.pkg.components.interface": {"tf": 1}, "etl.pkg.components.interface.Executable": {"tf": 1}, "etl.pkg.components.interface.Pipable": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 1.4142135623730951}, "etl.pkg.validators.FieldsValidator": {"tf": 1}}, "df": 5}, "n": {"docs": {"etl.pkg.dataframe.DataFrame.categorize": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.rename": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.config.Registry.get": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.join": {"tf": 5.0990195135927845}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}, "etl.pkg.resolvers.IdentifierResolver": {"tf": 1.4142135623730951}, "etl.pkg.runtime.context": {"tf": 1}}, "df": 14, "s": {"docs": {"etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 3.872983346207417}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.join": {"tf": 2}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.map": {"tf": 1}}, "df": 8}, "w": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1.4142135623730951}}, "df": 12, "s": {"docs": {"etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 8}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.pop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}}, "df": 3}}}}}, "/": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.map": {"tf": 1}}, "df": 6, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}}, "df": 2}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.corr": {"tf": 2.23606797749979}, "etl.pkg.dataframe.Series.corr": {"tf": 2.23606797749979}}, "df": 2}}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.Series.nlargest": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}}, "df": 3}}}, "v": {"docs": {"etl.pkg.config.Registry": {"tf": 1.4142135623730951}}, "df": 1}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.policy.PolicyDict": {"tf": 1}, "etl.pkg.policy.strict": {"tf": 1}}, "df": 3}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.Series.map": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.median": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}, "etl.pkg.runtime.context": {"tf": 1}}, "df": 14}}}}}, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {"etl.pkg.dataframe.DataFrame.items": {"tf": 2}}, "df": 1}}}}}, "j": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {"etl.pkg.config.Registry": {"tf": 1}, "etl.pkg.policy": {"tf": 1}, "etl.pkg.workflows.Generic": {"tf": 1}, "etl.sample_generic_etl.main": {"tf": 1}}, "df": 4, "s": {"docs": {"etl.pkg.workflows": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.join": {"tf": 4.58257569495584}, "etl.pkg.dataframe.Series.align": {"tf": 2.449489742783178}}, "df": 3, "s": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}}, "df": 2}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.DataFrame.merge": {"tf": 1.7320508075688772}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.join": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.config.Registry": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1}, "etl.pkg.dataframe.DataFrame.melt": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.io.FileResolver": {"tf": 1}}, "df": 5, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.to_string": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 2}}, "df": 2}}}}}}}, "y": {"docs": {"etl.pkg.dataframe.DataFrame.rename": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.query": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}}, "df": 5, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.config.Registry": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {"etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 2}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 1}, "etl.pkg.dataframe.Series.rename": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 2}, "etl.pkg.dataframe.Series.apply": {"tf": 1.4142135623730951}}, "df": 15, "r": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 2}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.DataFrame.merge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1}, "etl.pkg.dataframe.Series.squeeze": {"tf": 1}, "etl.pkg.dataframe.Series.apply": {"tf": 1}}, "df": 8}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 1}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 1}, "etl.pkg.io.FileResolver.date_pattern": {"tf": 1}}, "df": 3}}, "t": {"docs": {"etl.sample_generic_etl.execute": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.items": {"tf": 1}, "etl.pkg.io.FileResolver.get_file_name": {"tf": 1}, "etl.pkg.io.FileResolver.output_report": {"tf": 1}, "etl.pkg.io.FileResolver.output_recyclable": {"tf": 1}, "etl.pkg.io.file_resolver_context": {"tf": 1}, "etl.pkg.policy.Policy.action_on_invalid_field": {"tf": 1}, "etl.pkg.policy.strict": {"tf": 1}, "etl.pkg.policy.skip": {"tf": 1}, "etl.pkg.runtime.context": {"tf": 1.4142135623730951}}, "df": 10}, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.itertuples": {"tf": 1}}, "df": 1}}}}}}, "y": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.flags.iso_date": {"tf": 1}, "etl.pkg.validators.date_validator": {"tf": 1}}, "df": 2, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.io.FileResolver": {"tf": 1}}, "df": 1}}}}}}}}, "g": {"docs": {"etl.pkg.config.Registry.get": {"tf": 1}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}, "etl.pkg.dataframe.Series.dt": {"tf": 1}, "etl.pkg.dataframe.Series.cat": {"tf": 1}, "etl.pkg.dataframe.Series.str": {"tf": 1}, "etl.pkg.dataframe.Series.map": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1.4142135623730951}, "etl.pkg.runtime.Runtime.start": {"tf": 1}}, "df": 12, "e": {"docs": {"etl.pkg.dataframe.DataFrame.lt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 2}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.ge": {"tf": 1.7320508075688772}}, "df": 7, "t": {"docs": {"etl.pkg.config.Registry.get": {"tf": 1}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.add": {"tf": 1}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.div": {"tf": 1}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 1}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 1}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.nlargest": {"tf": 1}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 1}, "etl.pkg.io.FileResolver.get_file_name": {"tf": 1}, "etl.pkg.resolvers.FieldResolver.get_mnemonic": {"tf": 1}, "etl.pkg.resolvers.FieldResolver.get_id": {"tf": 1}, "etl.pkg.runtime.Runtime.get_config": {"tf": 1}, "etl.pkg.runtime.Runtime.get_logger": {"tf": 1}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_valid_end_date": {"tf": 1}, "etl.tests.flags_test.TestArgumentParser.test_valid_standalone_end_date": {"tf": 1}}, "df": 37}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 3}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.4142135623730951}}, "df": 1, "d": {"docs": {"etl.pkg.dataframe.DataFrame.to_html": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {"etl.pkg.workflows": {"tf": 1}, "etl.pkg.workflows.Generic": {"tf": 1.4142135623730951}, "etl.pkg.workflows.Generic.execute": {"tf": 1}, "etl.sample_generic_etl": {"tf": 1}, "etl.sample_generic_etl.execute": {"tf": 1}}, "df": 5}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "h": {"docs": {"etl.pkg.dataframe.DataFrame": {"tf": 1}, "etl.pkg.dataframe.Series": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 4.795831523312719}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 4.242640687119285}, "etl.pkg.dataframe.Series.value_counts": {"tf": 1}}, "df": 5, "b": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 4.123105625617661}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 4.123105625617661}}, "df": 3, "s": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 3}, "etl.pkg.dataframe.DataFrame.categorize": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 3}, "etl.pkg.io.FileResolver.date_pattern": {"tf": 1}}, "df": 4}, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}}, "df": 2, "s": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.7320508075688772}}, "df": 2}}, "d": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"etl.pkg.dataframe.DataFrame.cov": {"tf": 1}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.le": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.between": {"tf": 1}, "etl.pkg.dataframe.Series.align": {"tf": 1}, "etl.pkg.dataframe.Series.gt": {"tf": 1}, "etl.pkg.dataframe.Series.ge": {"tf": 1}}, "df": 11}}}}}}, "t": {"docs": {"etl.pkg.dataframe.DataFrame.iloc": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.shape": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.select_dtypes": {"tf": 4}, "etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 6.244997998398398}, "etl.pkg.dataframe.DataFrame.pop": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 7.937253933193772}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 3.872983346207417}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 5}, "etl.pkg.dataframe.DataFrame.query": {"tf": 5.385164807134504}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 4.358898943540674}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 4.69041575982343}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 5.477225575051661}, "etl.pkg.dataframe.DataFrame.squeeze": {"tf": 6.928203230275509}, "etl.pkg.dataframe.DataFrame.to_timestamp": {"tf": 5.744562646538029}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 3.605551275463989}, "etl.pkg.dataframe.DataFrame.to_bag": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 3.4641016151377544}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 3}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 5.830951894845301}, "etl.pkg.dataframe.DataFrame.join": {"tf": 5.477225575051661}, "etl.pkg.dataframe.DataFrame.iterrows": {"tf": 3.872983346207417}, "etl.pkg.dataframe.DataFrame.itertuples": {"tf": 3.872983346207417}, "etl.pkg.dataframe.DataFrame.items": {"tf": 3}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 4.898979485566356}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 4.898979485566356}, "etl.pkg.dataframe.DataFrame.round": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.nunique": {"tf": 3}, "etl.pkg.dataframe.DataFrame.mode": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 5.744562646538029}, "etl.pkg.dataframe.DataFrame.corr": {"tf": 4.242640687119285}, "etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 5}, "etl.pkg.dataframe.DataFrame.to_records": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.to_html": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.add": {"tf": 7.3484692283495345}, "etl.pkg.dataframe.DataFrame.sub": {"tf": 7.3484692283495345}, "etl.pkg.dataframe.DataFrame.mul": {"tf": 7.3484692283495345}, "etl.pkg.dataframe.DataFrame.div": {"tf": 7.3484692283495345}, "etl.pkg.dataframe.DataFrame.divide": {"tf": 7.3484692283495345}, "etl.pkg.dataframe.DataFrame.truediv": {"tf": 7.3484692283495345}, "etl.pkg.dataframe.DataFrame.floordiv": {"tf": 7.3484692283495345}, "etl.pkg.dataframe.DataFrame.mod": {"tf": 7.3484692283495345}, "etl.pkg.dataframe.DataFrame.pow": {"tf": 7.3484692283495345}, "etl.pkg.dataframe.DataFrame.radd": {"tf": 7.3484692283495345}, "etl.pkg.dataframe.DataFrame.rsub": {"tf": 7.3484692283495345}, "etl.pkg.dataframe.DataFrame.rmul": {"tf": 7.3484692283495345}, "etl.pkg.dataframe.DataFrame.rdiv": {"tf": 7.3484692283495345}, "etl.pkg.dataframe.DataFrame.rtruediv": {"tf": 7.3484692283495345}, "etl.pkg.dataframe.DataFrame.rfloordiv": {"tf": 7.3484692283495345}, "etl.pkg.dataframe.DataFrame.rmod": {"tf": 7.3484692283495345}, "etl.pkg.dataframe.DataFrame.rpow": {"tf": 7.3484692283495345}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 6.855654600401044}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 7}, "etl.pkg.dataframe.DataFrame.le": {"tf": 6.855654600401044}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 6.855654600401044}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 6.855654600401044}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 6.855654600401044}, "etl.pkg.dataframe.Series.shape": {"tf": 2}, "etl.pkg.dataframe.Series.round": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.to_timestamp": {"tf": 5.744562646538029}, "etl.pkg.dataframe.Series.groupby": {"tf": 7.615773105863909}, "etl.pkg.dataframe.Series.count": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.explode": {"tf": 3.1622776601683795}, "etl.pkg.dataframe.Series.nunique": {"tf": 3}, "etl.pkg.dataframe.Series.value_counts": {"tf": 4.358898943540674}, "etl.pkg.dataframe.Series.nlargest": {"tf": 4.58257569495584}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 4.58257569495584}, "etl.pkg.dataframe.Series.isin": {"tf": 4.242640687119285}, "etl.pkg.dataframe.Series.map": {"tf": 3.872983346207417}, "etl.pkg.dataframe.Series.dropna": {"tf": 4.358898943540674}, "etl.pkg.dataframe.Series.between": {"tf": 4}, "etl.pkg.dataframe.Series.clip": {"tf": 5.477225575051661}, "etl.pkg.dataframe.Series.align": {"tf": 6.244997998398398}, "etl.pkg.dataframe.Series.combine": {"tf": 4.242640687119285}, "etl.pkg.dataframe.Series.squeeze": {"tf": 6.928203230275509}, "etl.pkg.dataframe.Series.combine_first": {"tf": 4.242640687119285}, "etl.pkg.dataframe.Series.to_frame": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.apply": {"tf": 4.58257569495584}, "etl.pkg.dataframe.Series.cov": {"tf": 3}, "etl.pkg.dataframe.Series.corr": {"tf": 3.872983346207417}, "etl.pkg.dataframe.Series.autocorr": {"tf": 3.872983346207417}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 4.58257569495584}, "etl.pkg.dataframe.Series.view": {"tf": 4.242640687119285}, "etl.pkg.dataframe.Series.add": {"tf": 4}, "etl.pkg.dataframe.Series.sub": {"tf": 4}, "etl.pkg.dataframe.Series.mul": {"tf": 4}, "etl.pkg.dataframe.Series.div": {"tf": 4}, "etl.pkg.dataframe.Series.divide": {"tf": 4}, "etl.pkg.dataframe.Series.truediv": {"tf": 4}, "etl.pkg.dataframe.Series.floordiv": {"tf": 4}, "etl.pkg.dataframe.Series.mod": {"tf": 4}, "etl.pkg.dataframe.Series.pow": {"tf": 4}, "etl.pkg.dataframe.Series.radd": {"tf": 4}, "etl.pkg.dataframe.Series.rsub": {"tf": 4}, "etl.pkg.dataframe.Series.rmul": {"tf": 4}, "etl.pkg.dataframe.Series.rdiv": {"tf": 4}, "etl.pkg.dataframe.Series.rtruediv": {"tf": 4}, "etl.pkg.dataframe.Series.rfloordiv": {"tf": 4}, "etl.pkg.dataframe.Series.rmod": {"tf": 4}, "etl.pkg.dataframe.Series.rpow": {"tf": 4}, "etl.pkg.dataframe.Series.lt": {"tf": 3.872983346207417}, "etl.pkg.dataframe.Series.gt": {"tf": 4.358898943540674}, "etl.pkg.dataframe.Series.le": {"tf": 3.872983346207417}, "etl.pkg.dataframe.Series.ge": {"tf": 4}, "etl.pkg.dataframe.Series.ne": {"tf": 3.872983346207417}, "etl.pkg.dataframe.Series.eq": {"tf": 3.872983346207417}}, "df": 108}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.7320508075688772}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"etl.pkg.dataframe.Series.value_counts": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 1}, "etl.pkg.dataframe.DataFrame.clip": {"tf": 1}, "etl.pkg.dataframe.DataFrame.to_string": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.DataFrame.join": {"tf": 1}, "etl.pkg.dataframe.DataFrame.round": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.Series.round": {"tf": 1}, "etl.pkg.dataframe.Series.clip": {"tf": 1}, "etl.pkg.dataframe.Series.combine_first": {"tf": 1}, "etl.pkg.policy.Policy.action_on_invalid_field": {"tf": 1}, "etl.pkg.validators.FieldsValidator.get_field_validator": {"tf": 1}, "etl.pkg.validators.date_validator": {"tf": 1}}, "df": 13}, "s": {"docs": {"etl.pkg.dataframe.Series.memory_usage": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.dataframe.DataFrame.nlargest": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 2.8284271247461903}}, "df": 2}}, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 1}, "etl.pkg.dataframe.DataFrame.explode": {"tf": 1}, "etl.pkg.dataframe.DataFrame.drop": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.explode": {"tf": 1}, "etl.pkg.dataframe.Series.dropna": {"tf": 1}}, "df": 8, "/": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.groupby": {"tf": 1}, "etl.pkg.dataframe.Series.groupby": {"tf": 1}}, "df": 2}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.dataframe.DataFrame.iterrows": {"tf": 1}, "etl.pkg.dataframe.DataFrame.cov": {"tf": 1}}, "df": 2}}}}}}, "d": {"docs": {"etl.tests.io_test.TestFileResolver.test_guard_constructor": {"tf": 1}}, "df": 1}}}}, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {"etl.pkg.io.FileResolverIterator": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "l": {"docs": {"etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 2}, "etl.pkg.runtime.Runtime.get_config": {"tf": 1}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {"etl.pkg.dataframe.Series.align": {"tf": 1.4142135623730951}}, "df": 1}}}, "x": {"docs": {"etl.pkg.dataframe.DataFrame.sort_values": {"tf": 1}, "etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 2}, "etl.pkg.dataframe.DataFrame.assign": {"tf": 2.449489742783178}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.query": {"tf": 3}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.apply": {"tf": 1.7320508075688772}, "etl.pkg.dataframe.DataFrame.applymap": {"tf": 2.449489742783178}, "etl.pkg.dataframe.Series.apply": {"tf": 2.6457513110645907}}, "df": 10}, "q": {"1": {"docs": {"etl.pkg.dataframe.DataFrame.lt": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.le": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 2.23606797749979}}, "df": 6}, "2": {"docs": {"etl.pkg.dataframe.DataFrame.lt": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.le": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 2.23606797749979}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 2.23606797749979}}, "df": 6}, "docs": {"etl.pkg.dataframe.Series.quantile": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1}, "etl.pkg.dataframe.Series.quantile": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"etl.pkg.io.FileResolver.get_file_name": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 5.830951894845301}, "etl.pkg.dataframe.DataFrame.nlargest": {"tf": 6}, "etl.pkg.dataframe.DataFrame.nsmallest": {"tf": 6}, "etl.pkg.dataframe.DataFrame.groupby": {"tf": 5.656854249492381}, "etl.pkg.dataframe.DataFrame.rename": {"tf": 5.656854249492381}, "etl.pkg.dataframe.DataFrame.query": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.dropna": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.to_parquet": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.lt": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.gt": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.le": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.ge": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.ne": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.DataFrame.eq": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.groupby": {"tf": 5.477225575051661}, "etl.pkg.dataframe.Series.nlargest": {"tf": 4.47213595499958}, "etl.pkg.dataframe.Series.nsmallest": {"tf": 4.47213595499958}, "etl.pkg.dataframe.Series.between": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.Series.align": {"tf": 4.69041575982343}, "etl.pkg.dataframe.Series.to_frame": {"tf": 2.8284271247461903}, "etl.pkg.dataframe.Series.memory_usage": {"tf": 2}}, "df": 21}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"etl.pkg.dataframe.DataFrame.query": {"tf": 2.6457513110645907}, "etl.pkg.dataframe.DataFrame.eval": {"tf": 1.7320508075688772}}, "df": 2}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"etl.pkg.dataframe.DataFrame.memory_usage": {"tf": 1}}, "df": 1}}}}}}}}}, "z": {"docs": {"etl.pkg.dataframe.DataFrame.rename": {"tf": 1.4142135623730951}, "etl.pkg.dataframe.DataFrame.query": {"tf": 3.4641016151377544}}, "df": 2, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {"etl.pkg.dataframe.DataFrame.set_index": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "pipeline": ["trimmer"], "_isPrebuiltIndex": true};

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();